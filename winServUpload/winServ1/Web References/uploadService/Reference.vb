'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
'
Namespace uploadService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private addPhotoReadingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindPhotoReadingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindAudioReadingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addAudioReadingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPhotoreadingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAudioreadingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getConnectionStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private testAddAudioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSensorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindSensorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListAllPhotosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.winServ1.My.MySettings.Default.winServ1_au_edu_qut_mquter_www_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event addPhotoReadingCompleted As addPhotoReadingCompletedEventHandler
        
        '''<remarks/>
        Public Event FindPhotoReadingCompleted As FindPhotoReadingCompletedEventHandler
        
        '''<remarks/>
        Public Event FindAudioReadingCompleted As FindAudioReadingCompletedEventHandler
        
        '''<remarks/>
        Public Event addAudioReadingCompleted As addAudioReadingCompletedEventHandler
        
        '''<remarks/>
        Public Event getPhotoreadingCompleted As getPhotoreadingCompletedEventHandler
        
        '''<remarks/>
        Public Event getAudioreadingCompleted As getAudioreadingCompletedEventHandler
        
        '''<remarks/>
        Public Event getConnectionStringCompleted As getConnectionStringCompletedEventHandler
        
        '''<remarks/>
        Public Event testAddAudioCompleted As testAddAudioCompletedEventHandler
        
        '''<remarks/>
        Public Event addSensorCompleted As addSensorCompletedEventHandler
        
        '''<remarks/>
        Public Event FindSensorCompleted As FindSensorCompletedEventHandler
        
        '''<remarks/>
        Public Event ListAllPhotosCompleted As ListAllPhotosCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addPhotoReading", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addPhotoReading(ByVal pGuid As System.Guid, ByVal pDate As Date, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal buffer() As Byte) As String
            Dim results() As Object = Me.Invoke("addPhotoReading", New Object() {pGuid, pDate, buffer})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addPhotoReadingAsync(ByVal pGuid As System.Guid, ByVal pDate As Date, ByVal buffer() As Byte)
            Me.addPhotoReadingAsync(pGuid, pDate, buffer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addPhotoReadingAsync(ByVal pGuid As System.Guid, ByVal pDate As Date, ByVal buffer() As Byte, ByVal userState As Object)
            If (Me.addPhotoReadingOperationCompleted Is Nothing) Then
                Me.addPhotoReadingOperationCompleted = AddressOf Me.OnaddPhotoReadingOperationCompleted
            End If
            Me.InvokeAsync("addPhotoReading", New Object() {pGuid, pDate, buffer}, Me.addPhotoReadingOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddPhotoReadingOperationCompleted(ByVal arg As Object)
            If (Not (Me.addPhotoReadingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addPhotoReadingCompleted(Me, New addPhotoReadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindPhotoReading", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindPhotoReading(ByVal pGuid As System.Guid, ByVal pDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("FindPhotoReading", New Object() {pGuid, pDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindPhotoReadingAsync(ByVal pGuid As System.Guid, ByVal pDate As Date)
            Me.FindPhotoReadingAsync(pGuid, pDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindPhotoReadingAsync(ByVal pGuid As System.Guid, ByVal pDate As Date, ByVal userState As Object)
            If (Me.FindPhotoReadingOperationCompleted Is Nothing) Then
                Me.FindPhotoReadingOperationCompleted = AddressOf Me.OnFindPhotoReadingOperationCompleted
            End If
            Me.InvokeAsync("FindPhotoReading", New Object() {pGuid, pDate}, Me.FindPhotoReadingOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindPhotoReadingOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindPhotoReadingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindPhotoReadingCompleted(Me, New FindPhotoReadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindAudioReading", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindAudioReading(ByVal pGuid As System.Guid, ByVal pDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("FindAudioReading", New Object() {pGuid, pDate})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindAudioReadingAsync(ByVal pGuid As System.Guid, ByVal pDate As Date)
            Me.FindAudioReadingAsync(pGuid, pDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindAudioReadingAsync(ByVal pGuid As System.Guid, ByVal pDate As Date, ByVal userState As Object)
            If (Me.FindAudioReadingOperationCompleted Is Nothing) Then
                Me.FindAudioReadingOperationCompleted = AddressOf Me.OnFindAudioReadingOperationCompleted
            End If
            Me.InvokeAsync("FindAudioReading", New Object() {pGuid, pDate}, Me.FindAudioReadingOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindAudioReadingOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindAudioReadingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindAudioReadingCompleted(Me, New FindAudioReadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addAudioReading", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addAudioReading(ByVal aGuid As System.Guid, ByVal adate As Date, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal buffer() As Byte) As String
            Dim results() As Object = Me.Invoke("addAudioReading", New Object() {aGuid, adate, buffer})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addAudioReadingAsync(ByVal aGuid As System.Guid, ByVal adate As Date, ByVal buffer() As Byte)
            Me.addAudioReadingAsync(aGuid, adate, buffer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addAudioReadingAsync(ByVal aGuid As System.Guid, ByVal adate As Date, ByVal buffer() As Byte, ByVal userState As Object)
            If (Me.addAudioReadingOperationCompleted Is Nothing) Then
                Me.addAudioReadingOperationCompleted = AddressOf Me.OnaddAudioReadingOperationCompleted
            End If
            Me.InvokeAsync("addAudioReading", New Object() {aGuid, adate, buffer}, Me.addAudioReadingOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddAudioReadingOperationCompleted(ByVal arg As Object)
            If (Not (Me.addAudioReadingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addAudioReadingCompleted(Me, New addAudioReadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPhotoreading", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPhotoreading(ByVal sensorName As String, ByVal pDate As Date) As getPhotoreadingResponseGetPhotoreadingResult
            Dim results() As Object = Me.Invoke("getPhotoreading", New Object() {sensorName, pDate})
            Return CType(results(0),getPhotoreadingResponseGetPhotoreadingResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPhotoreadingAsync(ByVal sensorName As String, ByVal pDate As Date)
            Me.getPhotoreadingAsync(sensorName, pDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPhotoreadingAsync(ByVal sensorName As String, ByVal pDate As Date, ByVal userState As Object)
            If (Me.getPhotoreadingOperationCompleted Is Nothing) Then
                Me.getPhotoreadingOperationCompleted = AddressOf Me.OngetPhotoreadingOperationCompleted
            End If
            Me.InvokeAsync("getPhotoreading", New Object() {sensorName, pDate}, Me.getPhotoreadingOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPhotoreadingOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPhotoreadingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPhotoreadingCompleted(Me, New getPhotoreadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAudioreading", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAudioreading(ByVal sensorName As String, ByVal pDate As Date) As getAudioreadingResponseGetAudioreadingResult
            Dim results() As Object = Me.Invoke("getAudioreading", New Object() {sensorName, pDate})
            Return CType(results(0),getAudioreadingResponseGetAudioreadingResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAudioreadingAsync(ByVal sensorName As String, ByVal pDate As Date)
            Me.getAudioreadingAsync(sensorName, pDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAudioreadingAsync(ByVal sensorName As String, ByVal pDate As Date, ByVal userState As Object)
            If (Me.getAudioreadingOperationCompleted Is Nothing) Then
                Me.getAudioreadingOperationCompleted = AddressOf Me.OngetAudioreadingOperationCompleted
            End If
            Me.InvokeAsync("getAudioreading", New Object() {sensorName, pDate}, Me.getAudioreadingOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAudioreadingOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAudioreadingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAudioreadingCompleted(Me, New getAudioreadingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getConnectionString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getConnectionString() As String
            Dim results() As Object = Me.Invoke("getConnectionString", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getConnectionStringAsync()
            Me.getConnectionStringAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getConnectionStringAsync(ByVal userState As Object)
            If (Me.getConnectionStringOperationCompleted Is Nothing) Then
                Me.getConnectionStringOperationCompleted = AddressOf Me.OngetConnectionStringOperationCompleted
            End If
            Me.InvokeAsync("getConnectionString", New Object(-1) {}, Me.getConnectionStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetConnectionStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getConnectionStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getConnectionStringCompleted(Me, New getConnectionStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/testAddAudio", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function testAddAudio(ByVal aGuid As System.Guid, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal buffer() As Byte) As String
            Dim results() As Object = Me.Invoke("testAddAudio", New Object() {aGuid, buffer})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub testAddAudioAsync(ByVal aGuid As System.Guid, ByVal buffer() As Byte)
            Me.testAddAudioAsync(aGuid, buffer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testAddAudioAsync(ByVal aGuid As System.Guid, ByVal buffer() As Byte, ByVal userState As Object)
            If (Me.testAddAudioOperationCompleted Is Nothing) Then
                Me.testAddAudioOperationCompleted = AddressOf Me.OntestAddAudioOperationCompleted
            End If
            Me.InvokeAsync("testAddAudio", New Object() {aGuid, buffer}, Me.testAddAudioOperationCompleted, userState)
        End Sub
        
        Private Sub OntestAddAudioOperationCompleted(ByVal arg As Object)
            If (Not (Me.testAddAudioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent testAddAudioCompleted(Me, New testAddAudioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addSensor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSensor(ByVal SID As System.Guid, ByVal sName As String) As String
            Dim results() As Object = Me.Invoke("addSensor", New Object() {SID, sName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSensorAsync(ByVal SID As System.Guid, ByVal sName As String)
            Me.addSensorAsync(SID, sName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSensorAsync(ByVal SID As System.Guid, ByVal sName As String, ByVal userState As Object)
            If (Me.addSensorOperationCompleted Is Nothing) Then
                Me.addSensorOperationCompleted = AddressOf Me.OnaddSensorOperationCompleted
            End If
            Me.InvokeAsync("addSensor", New Object() {SID, sName}, Me.addSensorOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSensorOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSensorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSensorCompleted(Me, New addSensorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindSensor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindSensor(ByVal sName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("FindSensor", New Object() {sName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindSensorAsync(ByVal sName As String)
            Me.FindSensorAsync(sName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindSensorAsync(ByVal sName As String, ByVal userState As Object)
            If (Me.FindSensorOperationCompleted Is Nothing) Then
                Me.FindSensorOperationCompleted = AddressOf Me.OnFindSensorOperationCompleted
            End If
            Me.InvokeAsync("FindSensor", New Object() {sName}, Me.FindSensorOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindSensorOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindSensorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindSensorCompleted(Me, New FindSensorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListAllPhotos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListAllPhotos() As ListAllPhotosResponseListAllPhotosResult
            Dim results() As Object = Me.Invoke("ListAllPhotos", New Object(-1) {})
            Return CType(results(0),ListAllPhotosResponseListAllPhotosResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListAllPhotosAsync()
            Me.ListAllPhotosAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListAllPhotosAsync(ByVal userState As Object)
            If (Me.ListAllPhotosOperationCompleted Is Nothing) Then
                Me.ListAllPhotosOperationCompleted = AddressOf Me.OnListAllPhotosOperationCompleted
            End If
            Me.InvokeAsync("ListAllPhotos", New Object(-1) {}, Me.ListAllPhotosOperationCompleted, userState)
        End Sub
        
        Private Sub OnListAllPhotosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListAllPhotosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListAllPhotosCompleted(Me, New ListAllPhotosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=true)>  _
    Partial Public Class getPhotoreadingResponseGetPhotoreadingResult
        
        Private anyField() As System.Xml.XmlElement
        
        Private any1Field As System.Xml.XmlElement
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyElementAttribute(Order:=0)>  _
        Public Property Any() As System.Xml.XmlElement()
            Get
                Return Me.anyField
            End Get
            Set
                Me.anyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyElementAttribute(Order:=1)>  _
        Public Property Any1() As System.Xml.XmlElement
            Get
                Return Me.any1Field
            End Get
            Set
                Me.any1Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=true)>  _
    Partial Public Class getAudioreadingResponseGetAudioreadingResult
        
        Private anyField() As System.Xml.XmlElement
        
        Private any1Field As System.Xml.XmlElement
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyElementAttribute(Order:=0)>  _
        Public Property Any() As System.Xml.XmlElement()
            Get
                Return Me.anyField
            End Get
            Set
                Me.anyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyElementAttribute(Order:=1)>  _
        Public Property Any1() As System.Xml.XmlElement
            Get
                Return Me.any1Field
            End Get
            Set
                Me.any1Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=true)>  _
    Partial Public Class ListAllPhotosResponseListAllPhotosResult
        
        Private anyField() As System.Xml.XmlElement
        
        Private any1Field As System.Xml.XmlElement
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyElementAttribute(Order:=0)>  _
        Public Property Any() As System.Xml.XmlElement()
            Get
                Return Me.anyField
            End Get
            Set
                Me.anyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyElementAttribute(Order:=1)>  _
        Public Property Any1() As System.Xml.XmlElement
            Get
                Return Me.any1Field
            End Get
            Set
                Me.any1Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub addPhotoReadingCompletedEventHandler(ByVal sender As Object, ByVal e As addPhotoReadingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addPhotoReadingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub FindPhotoReadingCompletedEventHandler(ByVal sender As Object, ByVal e As FindPhotoReadingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindPhotoReadingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub FindAudioReadingCompletedEventHandler(ByVal sender As Object, ByVal e As FindAudioReadingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindAudioReadingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub addAudioReadingCompletedEventHandler(ByVal sender As Object, ByVal e As addAudioReadingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addAudioReadingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getPhotoreadingCompletedEventHandler(ByVal sender As Object, ByVal e As getPhotoreadingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPhotoreadingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As getPhotoreadingResponseGetPhotoreadingResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),getPhotoreadingResponseGetPhotoreadingResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getAudioreadingCompletedEventHandler(ByVal sender As Object, ByVal e As getAudioreadingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAudioreadingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As getAudioreadingResponseGetAudioreadingResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),getAudioreadingResponseGetAudioreadingResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getConnectionStringCompletedEventHandler(ByVal sender As Object, ByVal e As getConnectionStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getConnectionStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub testAddAudioCompletedEventHandler(ByVal sender As Object, ByVal e As testAddAudioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class testAddAudioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub addSensorCompletedEventHandler(ByVal sender As Object, ByVal e As addSensorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSensorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub FindSensorCompletedEventHandler(ByVal sender As Object, ByVal e As FindSensorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindSensorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ListAllPhotosCompletedEventHandler(ByVal sender As Object, ByVal e As ListAllPhotosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListAllPhotosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListAllPhotosResponseListAllPhotosResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListAllPhotosResponseListAllPhotosResult)
            End Get
        End Property
    End Class
End Namespace
