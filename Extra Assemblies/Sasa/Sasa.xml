<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sasa</name>
    </assembly>
    <members>
        <member name="T:Sasa.Lazy`1">
            <summary>
            A thread-safe lazy value.
            </summary>
            <typeparam name="T">The type of the value to be lazily evaluated.</typeparam>
            <remarks>
            This implements IOptional&lt;T&gt; since it is temporally optional. In other words, at any given
            time it may or may not have a value.
            
            In general, lazy values computed using side-effecting functions are very difficult to reason about.
            </remarks>
        </member>
        <member name="T:Sasa.IOptional`1">
            <summary>
            Encapsulates a value that may or may not be available.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="T:Sasa.IResolvable`1">
            <summary>
            A container for which you can test whether a value is available.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Sasa.IResolvable`1.HasValue">
            <summary>
            Returns true if a value is available.
            </summary>
        </member>
        <member name="T:Sasa.IValue`1">
            <summary>
            A read-only encapsulated value.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="P:Sasa.IValue`1.Value">
            <summary>
            A read-only reference to a value.
            </summary>
        </member>
        <member name="T:Sasa.IVolatile`1">
            <summary>
            A volatile value.
            </summary>
            <typeparam name="T">The type of value held in the reference.</typeparam>
        </member>
        <member name="M:Sasa.IVolatile`1.TryGetValue(`0@)">
            <summary>
            Attempt to extract the value.
            </summary>
            <param name="value">The value contained in the reference.</param>
            <returns>True if the value was successfully retrieved, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            Return a lazily value computed by invoked thunk().
            </summary>
            <param name="thunk">The function used to compute the value when required.</param>
        </member>
        <member name="M:Sasa.Lazy`1.#ctor(`0)">
            <summary>
            Return a resolved lazy value.
            </summary>
            <param name="v">The value to encapsulate in a lazy type.</param>
        </member>
        <member name="M:Sasa.Lazy`1.TryGetValue(`0@)">
            <summary>
            Attempts to extract the value.
            </summary>
            <param name="value">The lazy value to extract.</param>
            <returns>Returns true if the lazy value was already forced, false otherwise.</returns>
            <remarks>
            This method is thread-safe.
            
            Calling this method does not force the lazy computation.
            </remarks>
        </member>
        <member name="M:Sasa.Lazy`1.Eval">
            <summary>
            Evaluate the thunk.
            </summary>
            <returns>The value returned from the thunk.</returns>
        </member>
        <member name="M:Sasa.Lazy`1.op_Implicit(System.Func{`0})~Sasa.Lazy{`0}">
            <summary>
            Implicitly construct a lazy value from a thunk.
            </summary>
            <param name="t">The thunk used to compute the lazy value.</param>
            <returns>A lazily computed value.</returns>
        </member>
        <member name="M:Sasa.Lazy`1.op_Implicit(`0)~Sasa.Lazy{`0}">
            <summary>
            Implicitly convert a value to an initialized lazy value.
            </summary>
            <param name="t">The value to wrap.</param>
            <returns>The lazily computed value.</returns>
        </member>
        <member name="P:Sasa.Lazy`1.Value">
            <summary>
            Force evaluation of the value.
            </summary>
            <returns>Returns the computed value.</returns>
        </member>
        <member name="P:Sasa.Lazy`1.HasValue">
            <summary>
            Returns true if the value has been computed.
            </summary>
            <remarks>
            This proeprty is thread-safe.
            
            Accessing this property does not force the lazy computation.
            </remarks>
        </member>
        <member name="T:Sasa.Lazy">
            <summary>
            Convenience methods for lazy values.
            </summary>
        </member>
        <member name="M:Sasa.Lazy.Create``1(System.Func{``0})">
            <summary>
            Construct a new lazy value.
            </summary>
            <typeparam name="T">The type of the lazy value.</typeparam>
            <param name="make">The function constructing the lazy value.</param>
            <returns>A new lazily initialized value.</returns>
        </member>
        <member name="M:Sasa.Lazy.AsLazy``1(``0)">
            <summary>
            An extension to explicitly construct a lazy value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to encapsulate.</param>
            <returns>A lazy value.</returns>
        </member>
        <member name="T:Sasa.Triple`3">
            <summary>
            A three-element tuple.
            </summary>
            <typeparam name="T0">First type.</typeparam>
            <typeparam name="T1">Second type.</typeparam>
            <typeparam name="T2">Third type.</typeparam>
        </member>
        <member name="M:Sasa.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Construct a new Triple.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
        </member>
        <member name="M:Sasa.Triple`3.Bind(`0@,`1@,`2@)">
            <summary>
            Bind all values to locals.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
        </member>
        <member name="M:Sasa.Triple`3.Equals(Sasa.Triple{`0,`1,`2})">
            <summary>
            Test Triple equality element-wise.
            </summary>
            <param name="other">The Triple to test for equality.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.Equals(System.Object)">
            <summary>
            Test equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.GetHashCode">
            <summary>
            Compute hash code.
            </summary>
            <returns>Hash of the encapsulated values.</returns>
        </member>
        <member name="M:Sasa.Triple`3.CompareTo(Sasa.Triple{`0,`1,`2})">
            <summary>
            Compare the two values, sequentially Triple.First, then Triple.Second if
            Triple.First are equal, then Triple.Third if Triple.Second is equal.
            </summary>
            <param name="other">The Triple to compare against.</param>
            <returns>
            Returns zero if the tuples are equal element-wise, returns a number greater than zero if
            the current tuple is greater than <paramref name="other"/> element-wise, else returns a
            number greater than zero.
            </returns>
        </member>
        <member name="M:Sasa.Triple`3.ToString">
            <summary>
            Return a string representation of this Triple.
            </summary>
            <returns>String representation of this Triple.</returns>
        </member>
        <member name="M:Sasa.Triple`3.op_Equality(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Compares two Triples for equality.
            </summary>
            <param name="left">The first Triple.</param>
            <param name="right">The second Triple.</param>
            <returns>Returns true if the Triples are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.op_Inequality(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Compares two Triples for inequality.
            </summary>
            <param name="left">The first Triple.</param>
            <param name="right">The second Triple.</param>
            <returns>Returns true if the Triples are not equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Triple`3.op_LessThan(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            Returns zero if the tuples are equal, a number greater than zero if <paramref name="left"/> is
            greater than <paramref name="right"/>, else a number less than zero.
            </returns>
        </member>
        <member name="M:Sasa.Triple`3.op_GreaterThan(Sasa.Triple{`0,`1,`2},Sasa.Triple{`0,`1,`2})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            Returns zero if the tuples are equal, a number greater than zero if <paramref name="left"/> is
            greater than <paramref name="right"/>, else a number less than zero.
            </returns>
        </member>
        <member name="P:Sasa.Triple`3.First">
            <summary>
            First element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Triple`3.Second">
            <summary>
            Second element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Triple`3.Third">
            <summary>
            Third element of the tuple.
            </summary>
        </member>
        <member name="T:Sasa.TypeConstraint`1">
            <summary>
            Specifies a type constraint that normally C# would not be able to enforce.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sasa.TypeConstraint`1.op_Implicit(`0)~Sasa.TypeConstraint{`0}">
            <summary>
            Implicitly convert a value of type <typeparamref name="T"/> to a TypeConstraint.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Sasa.TypeConstraint`1.Value">
            <summary>
            Extract the encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.TypeConstraint`2">
            <summary>
            Specifies a subtyping type constraint relationship. You use this constraint
            primarily when compiling with other code that specifies ITypeConstraint.
            </summary>
            <typeparam name="T">The inherited type.</typeparam>
            <typeparam name="TBase">The base type for which the constraint is enforced.</typeparam>
        </member>
        <member name="M:Sasa.TypeConstraint`2.op_Implicit(`0)~Sasa.TypeConstraint{`0,`1}">
            <summary>
            Implicitly convert a value of type <typeparamref name="T"/> to a TypeConstraint.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Sasa.TypeConstraint`2.Value">
            <summary>
            Extract the encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Doubles">
            <summary>
            Extension methods on System.Double.
            </summary>
        </member>
        <member name="M:Sasa.Doubles.Bound(System.Double,System.Double,System.Double)">
            <summary>
            Bound the given Double by the upper and lower values.
            </summary>
            <param name="value">The value to bound.</param>
            <param name="min">The lower inclusive bound.</param>
            <param name="max">The upper inclusive bound.</param>
            <returns>Returns <paramref name="value"/> if <paramref name="min"/> &lt;= <paramref name="value"/> &lt;= <paramref name="max"/>,
            or <paramref name="min"/> or <paramref name="max"/> if <paramref name="value"/> is out of that range.
            </returns>
        </member>
        <member name="M:Sasa.Doubles.UpTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The lower incusive bound of the stream.</param>
            <param name="end">The upper exclusive bound of the stream.</param>
            <param name="step">The increment used from <paramref name="start"/> to <paramref name="end"/>.</param>
            <returns>A stream of decimal from [<paramref name="start"/>, <paramref name="end"/>).</returns>
        </member>
        <member name="T:Sasa.Events">
             <summary>
             Extension methods to safely trigger events. Triggering events
             using Raise() is both null-safe and thread-safe. Delegates
             are still required to ensure the state they are accessing
             is valid.
             </summary>
             <remarks>
             These functions provide a certain type of thread-safety. Eric
             Lippert described the two thread-safety issues with events on
             his blog:
             
             http://blogs.msdn.com/ericlippert/archive/2009/04/29/events-and-races.aspx
            
             This Events class provides thread-safety #1 in his list, but
             not #2. Clients do not need to perform null checks before calling
             Raise() on them, and do not need to perform locking to synchronize
             add/remove handlers if they use the Add()/Remove() functions,
             etc.
             
             Clients are still required to ensure that any delegates
             called are accessing valid state, even though that state may
             have changed.
             </remarks>
        </member>
        <member name="M:Sasa.Events.RaiseAny(System.Delegate,System.Object[])">
            <summary>
            Safely raise any event.
            </summary>
            <param name="del">The multicast delegate representing the event.</param>
            <param name="args">The arguments to the delegate.</param>
        </member>
        <member name="M:Sasa.Events.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Safely raise an EventHandler event.
            </summary>
            <param name="del">The delegate representing the event.</param>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Sasa.Events.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Safely raise an EventHandler event.
            </summary>
            <typeparam name="T">The type of the EventArgs.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="sender">The object triggering the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Sasa.Events.Raise(System.Action)">
            <summary>
            Safely raise an Action event.
            </summary>
            <param name="del">The delegate representing the event.</param>
        </member>
        <member name="M:Sasa.Events.Raise``1(System.Action{``0},``0)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T">The type of the argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
        </member>
        <member name="M:Sasa.Events.Raise``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T">The type of the first argument to the event.</typeparam>
            <typeparam name="U">The type of the second argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
            <param name="arg1">The second event arg.</param>
        </member>
        <member name="M:Sasa.Events.Raise``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T">The type of the first argument to the event.</typeparam>
            <typeparam name="U">The type of the second argument to the event.</typeparam>
            <typeparam name="V">The type of the third argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
            <param name="arg1">The second event arg.</param>
            <param name="arg2">The third event arg.</param>
        </member>
        <member name="M:Sasa.Events.Raise``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Safely raise an Action event.
            </summary>
            <typeparam name="T">The type of the first argument to the event.</typeparam>
            <typeparam name="U">The type of the second argument to the event.</typeparam>
            <typeparam name="V">The type of the third argument to the event.</typeparam>
            <typeparam name="W">The type of the third argument to the event.</typeparam>
            <param name="del">The delegate representing the event.</param>
            <param name="arg0">The first event arg.</param>
            <param name="arg1">The second event arg.</param>
            <param name="arg2">The third event arg.</param>
            <param name="arg3">The fourth event arg.</param>
        </member>
        <member name="M:Sasa.Events.AddAny``1(``0@,``0)">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.Add(System.EventHandler@,System.EventHandler)">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.Add``1(System.EventHandler{``0}@,System.EventHandler{``0})">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.Add(System.Action@,System.Action)">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.Add``1(System.Action{``0}@,System.Action{``0})">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.Add``2(System.Action{``0,``1}@,System.Action{``0,``1})">
            <summary>
            Add <paramref name="newHandler"/> to the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to add.</param>
        </member>
        <member name="M:Sasa.Events.RemoveAny``1(``0@,``0)">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Remove(System.EventHandler@,System.EventHandler)">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Remove``1(System.EventHandler{``0}@,System.EventHandler{``0})">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <typeparam name="T">Type of event args.</typeparam>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Remove(System.Action@,System.Action)">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Remove``1(System.Action{``0}@,System.Action{``0})">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Remove``2(System.Action{``0,``1}@,System.Action{``0,``1})">
            <summary>
            Remove <paramref name="newHandler"/> from the list of events <paramref name="del"/>.
            </summary>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <param name="newHandler">The delegate to remove.</param>
        </member>
        <member name="M:Sasa.Events.Clear``1(``0@)">
            <summary>
            Clears an event by setting the field to null and returning the previous event contents.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="del">A reference to the local <see cref="T:System.Delegate"/>.</param>
            <returns>The previous event contents.</returns>
        </member>
        <member name="T:Sasa.Empty">
            <summary>
            An empty/void value.
            </summary>
        </member>
        <member name="M:Sasa.Empty.Equals(System.Object)">
            <summary>
            Equality test for Void.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>Returns true of <paramref name="obj"/> is Void, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Empty.GetHashCode">
            <summary>
            Returns the hash code for a Void value.
            </summary>
            <returns>Hash code for Void.</returns>
        </member>
        <member name="M:Sasa.Empty.ToString">
            <summary>
            Convert Void to a string.
            </summary>
            <returns>Returns a string representation of a Unit value.</returns>
        </member>
        <member name="M:Sasa.Empty.op_Equality(Sasa.Empty,Sasa.Empty)">
            <summary>
            Equality on two voids is always true.
            </summary>
            <param name="left">Left hand side.</param>
            <param name="right">Right hand side.</param>
            <returns>Returns true.</returns>
        </member>
        <member name="M:Sasa.Empty.op_Inequality(Sasa.Empty,Sasa.Empty)">
            <summary>
            Inequality on two voids is always false.
            </summary>
            <param name="left">Left hand side.</param>
            <param name="right">Right hand side.</param>
            <returns>Returns false.</returns>
        </member>
        <member name="T:Sasa.Collections.Set`1">
            <summary>
            A simple set based on <see cref="T:Sasa.Collections.Seq`1"/>.
            </summary>
            <typeparam name="T">The type of the set's elements.</typeparam>
        </member>
        <member name="T:Sasa.Collections.ISeq`2">
            <summary>
            The interface describing a purely functional collection.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the elements contained within the collection</typeparam>
            <remarks>
            The precise semantics of the collection is implementation-specific. A sequence of Add and Remove
            calls may return items in an arbitrary sequence depending on the type collection.
            </remarks>
        </member>
        <member name="M:Sasa.Collections.ISeq`2.Add(`1)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The item to add.</param>
            <returns>A new collection with the new item.</returns>
        </member>
        <member name="M:Sasa.Collections.ISeq`2.Remove(`1@)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="value">The item removed.</param>
            <returns>A new collection without the item.</returns>
        </member>
        <member name="M:Sasa.Collections.ISeq`2.Remove">
            <summary>
            Remove an item from the collection
            </summary>
            <returns>A pair of a new collection without the item, and the item that was removed.</returns>
        </member>
        <member name="P:Sasa.Collections.ISeq`2.Value">
            <summary>
            Returns the item to be removed next from the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
        </member>
        <member name="P:Sasa.Collections.ISeq`2.IsEmpty">
            <summary>
            Returns true if the collection is empty.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Set`1.Union(`0)">
            <summary>
            Compute the union of the current set with the given item.
            </summary>
            <param name="item">The item to add to the set.</param>
            <returns>A new set with the union of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Union(`0[])">
            <summary>
            Compute the union of all items.
            </summary>
            <param name="items">The items to add to the set.</param>
            <returns>A new set with the union of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Contains(`0)">
            <summary>
            Checks the set for membership of an item.
            </summary>
            <param name="item">The item to check.</param>
            <returns>Returns true if item is in the set.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Equals(Sasa.Collections.Set{`0})">
            <summary>
            Compares two sets for equality.
            </summary>
            <param name="other">The set to compare.</param>
            <returns>Returns true if the two sets are equivalent.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compute the union of all items.
            </summary>
            <param name="items">The items to add to the set.</param>
            <returns>A new set with the union of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Union(Sasa.Collections.Set{`0})">
            <summary>
            Compute the union of all items.
            </summary>
            <param name="other">The other set whose items we add to the set.</param>
            <returns>A new set with the union of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Intersect(`0[])">
            <summary>
            Compute the intersection of all items.
            </summary>
            <param name="items">The items to compare with the current set.</param>
            <returns>A new set with the intersection of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Compute the intersection of all items.
            </summary>
            <param name="items">The items to compare with the current set.</param>
            <returns>A new set with the intersection of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.GetEnumerator">
            <summary>
            Enumerate over all items in the set.
            </summary>
            <returns>An enumerator for the set.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.Intersect(Sasa.Collections.Set{`0})">
            <summary>
            Compute the intersection of all items.
            </summary>
            <param name="other">The set whose items to compare with the current set.</param>
            <returns>A new set with the intersection of all items.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.op_BitwiseAnd(Sasa.Collections.Set{`0},Sasa.Collections.Set{`0})">
            <summary>
            The union of two sets.
            </summary>
            <param name="s1">The first set.</param>
            <param name="s2">The second set.</param>
            <returns>The union of <paramref name="s1"/> and <paramref name="s2"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.op_BitwiseAnd(Sasa.Collections.Set{`0},`0)">
            <summary>
            The union of a set and a value.
            </summary>
            <param name="s1">The first set.</param>
            <param name="item">The item to add to the set.</param>
            <returns>The union of <paramref name="s1"/> and <paramref name="item"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.op_ExclusiveOr(Sasa.Collections.Set{`0},Sasa.Collections.Set{`0})">
            <summary>
            The intersection of two sets.
            </summary>
            <param name="s1">The first set.</param>
            <param name="s2">The second set.</param>
            <returns>The intersection of <paramref name="s1"/> and <paramref name="s2"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Set`1.ToString">
            <summary>
            Construct a string for the set.
            </summary>
            <returns>A string representation of the set.</returns>
        </member>
        <member name="P:Sasa.Collections.Set`1.IsEmpty">
            <summary>
            Returns true if the set is empty.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Set">
            <summary>
            Utility functions for <see cref="T:Sasa.Collections.Set`1"/>.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Set.Make``1(``0[])">
            <summary>
            Construct an initial set from the list of items.
            </summary>
            <typeparam name="T">The type of the set.</typeparam>
            <param name="items">The initial items with which to populate the set.</param>
            <returns>A new set with the initial values.</returns>
        </member>
        <member name="T:Sasa.NonNull`1">
            <summary>
            This class encapsulates a non-null reference. An of this class instance serves as evidence
            that the encapsulated reference is not null.
            </summary>
            <typeparam name="T">The type of the encapsulated reference.</typeparam>
            <remarks>Proper usage is to never create or declare NonNull types as locals. NonNull should
            only be used to decorate method arguments. The only way an invalid instance of NonNull can
            be created is when declaring it as a local:
            ...
            NonNull&lt;T&gt; foo;
            ...
            T bar = foo; // NullReferenceException
            
            When it comes to high assurance code, you should utilize Option and NonNull types for
            method arguments, to declare which arguments may be null and which must necessarily be
            non-null. The type checker will ensure that values are handled properly within the method,
            and client code will receive the errors when passing in null references for NonNull values.
            </remarks>
        </member>
        <member name="M:Sasa.NonNull`1.#ctor(`0)">
            <summary>
            Construct an assuredy non-null reference.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Sasa.NonNull`1.op_Implicit(Sasa.NonNull{`0})~`0">
            <summary>
            Implicit conversion back to a type T.
            </summary>
            <param name="t">The NonNull value to convert back to T.</param>
            <returns>The encapsulated T value.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.Equals(`0)">
            <summary>
            Compare encapsulated values for equality.
            </summary>
            <param name="other">The value to compare against.</param>
            <returns>True if values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.Equals(Sasa.NonNull{`0})">
            <summary>
            Compare NonNull values for equality.
            </summary>
            <param name="other">The value to compare against.</param>
            <returns>True if values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.Equals(System.Object)">
            <summary>
            Compares equality of the encapsulated value and the given value.
            </summary>
            <param name="obj">The value to compare.</param>
            <returns>True if the values are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.GetHashCode">
            <summary>
            Return the hash code of the encapsulated value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.ToString">
            <summary>
            Returns a string representation of the encapsulated value.
            </summary>
            <returns>Returns a string representation of the encapsulated value.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Equality(Sasa.NonNull{`0},Sasa.NonNull{`0})">
            <summary>
            Compares two NonNull values for equality.
            </summary>
            <param name="n1">The first NonNull.</param>
            <param name="n2">The second NonNull.</param>
            <returns>Returns true if the NonNulls are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Inequality(Sasa.NonNull{`0},Sasa.NonNull{`0})">
            <summary>
            Compares two NonNull values for inequality.
            </summary>
            <param name="n1">The first NonNull.</param>
            <param name="n2">The second NonNull.</param>
            <returns>Returns true if the NonNulls are not equal, and false otherwise.</returns>>
        </member>
        <member name="M:Sasa.NonNull`1.op_Equality(Sasa.NonNull{`0},`0)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Inequality(Sasa.NonNull{`0},`0)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Equality(`0,Sasa.NonNull{`0})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.NonNull`1.op_Inequality(`0,Sasa.NonNull{`0})">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="P:Sasa.NonNull`1.Value">
            <summary>
            Retrieves the encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Null">
            <summary>
            Convenience functions.
            </summary>
        </member>
        <member name="M:Sasa.Null.NonNull``1(``0)">
            <summary>
            Construct a new non-null instance.
            </summary>
            <typeparam name="T">The type of the non-null reference.</typeparam>
            <param name="value">The reference to check for null.</param>
            <returns>An assuredly non-null reference.</returns>
        </member>
        <member name="T:Sasa.MetaExtensions">
            <summary>
            Various simple meta-programming extensions.
            </summary>
        </member>
        <member name="M:Sasa.MetaExtensions.MemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Exploits lambda expressions to ensure the field or property name returned as a
            string is valid.
            </summary>
            <typeparam name="T">The type of the field or property.</typeparam>
            <param name="property">A lambda expression naming a field or property.</param>
            <returns>The name of the field or property.</returns>
        </member>
        <member name="T:Sasa.Either`4">
            <summary>
            This type encapsulates either a value of type <typeparamref name="TFirst"/>,
            <typeparamref name="TSecond"/>, <typeparamref name="TThird"/> or
            <typeparamref name="TFourth"/>.
            </summary>
            <typeparam name="TFirst">Possible 'First' type.</typeparam>
            <typeparam name="TSecond">Possible 'Second' type.</typeparam>
            <typeparam name="TThird">Possible 'Third' type.</typeparam>
            <typeparam name="TFourth">Possible 'Fourth' type.</typeparam>
        </member>
        <member name="M:Sasa.Either`4.op_Implicit(`0)~Sasa.Either{`0,`1,`2,`3}">
            <summary>
            A value of type <typeparamref name="TFirst"/> can be implicitly converted to First.
            </summary>
            <param name="f">The value to implicitly convert.</param>
            <returns>A new Either initialized to First.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Implicit(`1)~Sasa.Either{`0,`1,`2,`3}">
            <summary>
            A value of type <typeparamref name="TSecond"/> can be implicitly converted to Second.
            </summary>
            <param name="s">The value to implicitly convert.</param>
            <returns>A new Either initialized to Second.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Implicit(`2)~Sasa.Either{`0,`1,`2,`3}">
            <summary>
            A value of type <typeparamref name="TThird"/> can be implicitly converted to Third.
            </summary>
            <param name="t">The value to implicitly convert.</param>
            <returns>A new Either initialized to Third.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Implicit(`3)~Sasa.Either{`0,`1,`2,`3}">
            <summary>
            A value of type <typeparamref name="TFourth"/> can be implicitly converted to Fourth.
            </summary>
            <param name="u">The value to implicitly convert.</param>
            <returns>A new Either initialized to Third.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Explicit(Sasa.Either{`0,`1,`2,`3})~`0">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Explicit(Sasa.Either{`0,`1,`2,`3})~`1">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Explicit(Sasa.Either{`0,`1,`2,`3})~`2">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`4.op_Explicit(Sasa.Either{`0,`1,`2,`3})~`3">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`4.First(`0)">
            <summary>
            Returns an instance initialized to <typeparamref name="TFirst"/>.
            </summary>
            <param name="f">The value used to initialize the Either type.</param>
            <returns>An Either type initialized to First.</returns>
        </member>
        <member name="M:Sasa.Either`4.Second(`1)">
            <summary>
            Returns an instance initialized to Second.
            </summary>
            <param name="s">The value used to initialize the Either type.</param>
            <returns>An Either type initialized to Second.</returns>
        </member>
        <member name="M:Sasa.Either`4.Third(`2)">
            <summary>
            Return an Either encapsulating a value of type <typeparamref name="TThird"/>.
            </summary>
            <param name="t">The value to encapsulate.</param>
            <returns>A newly initialized Either value.</returns>
        </member>
        <member name="M:Sasa.Either`4.Fourth(`3)">
            <summary>
            Return an Either encapsulating a value of type <typeparamref name="TFourth"/>.
            </summary>
            <param name="u">The value to encapsulate.</param>
            <returns>A newly initialized Either value.</returns>
        </member>
        <member name="M:Sasa.Either`4.Do(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3})">
            <summary>
            Perform an action on the encapsulated value.
            </summary>
            <param name="first">Function to apply if encapsulated value is of type <typeparamref name="TFirst"/>.</param>
            <param name="second">Function to apply if encapsulated value is of type <typeparamref name="TSecond"/>.</param>
            <param name="third">Function to apply if encapsulated value is of type <typeparamref name="TThird"/>.</param>
            <param name="fourth">Function to apply if encapsulated value is of type <typeparamref name="TFourth"/>.</param>
        </member>
        <member name="M:Sasa.Either`4.Select``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})">
            <summary>
            Transform the encapsulated value into a <typeparamref name="TReturn"/>.
            </summary>
            <typeparam name="TReturn">The type to return.</typeparam>
            <param name="first">Function to apply if encapsulated value is of type <typeparamref name="TFirst"/>.</param>
            <param name="second">Function to apply if encapsulated value is of type <typeparamref name="TSecond"/>.</param>
            <param name="third">Function to apply if encapsulated value is of type <typeparamref name="TThird"/>.</param>
            <param name="fourth">Function to apply if encapsulated value is of type <typeparamref name="TFourth"/>.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:Sasa.Either`4.Select(`0)">
            <summary>
            If the type is <typeparamref name="TFirst"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TFirst"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="M:Sasa.Either`4.Select(`1)">
            <summary>
            If the type is <typeparamref name="TSecond"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TSecond"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="M:Sasa.Either`4.Select(`2)">
            <summary>
            If the type is <typeparamref name="TThird"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TThird"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="M:Sasa.Either`4.Select(`3)">
            <summary>
            If the type is <typeparamref name="TFourth"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TFourth"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="P:Sasa.Either`4.IsFirst">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TFirst"/>.
            </summary>
        </member>
        <member name="P:Sasa.Either`4.IsSecond">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TSecond"/>.
            </summary>
        </member>
        <member name="P:Sasa.Either`4.IsThird">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TThird"/>.
            </summary>
        </member>
        <member name="P:Sasa.Either`4.IsFourth">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TFourth"/>.
            </summary>
        </member>
        <member name="T:Sasa.Either`4._First">
            <summary>
            The internal class representing the 'First' type.
            </summary>
        </member>
        <member name="T:Sasa.Either`4._Second">
            <summary>
            The internal class representing the 'Second' type.
            </summary>
        </member>
        <member name="T:Sasa.Either`4._Third">
            <summary>
            The internal class representing the 'First' type.
            </summary>
        </member>
        <member name="T:Sasa.Either`4._Fourth">
            <summary>
            The internal class representing the 'First' type.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Arrays">
            <summary>
            Array extensions.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Arrays.Append``1(``0[],``0[])">
            <summary>
            Combine the values of two arrays into a new array.
            </summary>
            <typeparam name="T">The type in the array.</typeparam>
            <param name="first">The first array.</param>
            <param name="second">The second array.</param>
            <returns>Returns a new array with the values of <paramref name="first"/>, followed by the values in <paramref name="second"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Aggregate``2(``0[],``1,System.Func{``0,``1,``1})">
            <summary>
            Process each element of an array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <typeparam name="U">The return type.</typeparam>
            <param name="array">The array.</param>
            <param name="seed">The seed value.</param>
            <param name="func">The function transforming the array.</param>
            <returns>The value computed from the array.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Make``1(``0[])">
            <summary>
            A syntactic shortcut to create arrays of values leveraging type inference.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="values">The values to create.</param>
            <returns>An array of the provided values.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Eq``1(``0[],``0[])">
            <summary>
            Test two arrays for equality, element-wise.
            </summary>
            <typeparam name="T">The type of the arrays.</typeparam>
            <param name="a1">The first array.</param>
            <param name="a2">The second array.</param>
            <returns>True if the two arrays are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Slice``1(``0[],System.UInt32,System.UInt32)">
            <summary>
            Return a slice of an array delineated by the start and end indices.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array to slice.</param>
            <param name="start">The start of the slice.</param>
            <param name="end">The end of the slice.</param>
            <returns>The array slice.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Repeat``1(``0[],System.UInt32)">
            <summary>
            Repeats all entries in <paramref name="array"/> up to <paramref name="start"/>
            as many times as will fit.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array to slice.</param>
            <param name="start">The index at which to start duplicating elements.</param>
            <returns>Returns <paramref name="array"/> after the update.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Fill``1(``0[],``0,System.UInt32,System.UInt32)">
            <summary>
            Populates the given array with <paramref name="item"/>, starting at the given index
            for <paramref name="count"/> entries.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array.</param>
            <param name="item">The item with which to fill the array.</param>
            <param name="i">The index to start filling.</param>
            <param name="count">The number of entries to set.</param>
            <returns>Returns <paramref name="array"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Dup``1(``0[])">
            <summary>
            Duplicates a given array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array.</param>
            <returns>A duplicate of the given array.</returns>
        </member>
        <member name="M:Sasa.Collections.Arrays.Bound``1(``0[],System.UInt32)">
            <summary>
            Returns an array with the given length, seeded with the
            <paramref name="array"/>.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The number of items in the returned array.</param>
            <returns>An array of length <paramref name="count"/>.</returns>
            <remarks>If <paramref name="count"/> equals a.Length, then the same array
            is returned. If <paramref name="count"/> is greater than a.Length, then
            a new array is created and seeded with the original values in <paramref name="array"/>
            with the remainder of the array remaining uninitialized.</remarks>
        </member>
        <member name="T:Sasa.Singles">
            <summary>
            Extension methods on System.Single.
            </summary>
        </member>
        <member name="M:Sasa.Singles.Bound(System.Single,System.Single,System.Single)">
            <summary>
            Bound the given Single by the upper and lower values.
            </summary>
            <param name="value">The value to bound.</param>
            <param name="min">The lower inclusive bound.</param>
            <param name="max">The upper inclusive bound.</param>
            <returns>Returns <paramref name="value"/> if <paramref name="min"/> &lt;= <paramref name="value"/> &lt;= <paramref name="max"/>,
            or <paramref name="min"/> or <paramref name="max"/> if <paramref name="value"/> is out of that range.
            </returns>
        </member>
        <member name="M:Sasa.Singles.UpTo(System.Single,System.Single,System.Single)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The lower incusive bound of the stream.</param>
            <param name="end">The upper exclusive bound of the stream.</param>
            <param name="step">The increment used from <paramref name="start"/> to <paramref name="end"/>.</param>
            <returns>A stream of decimal from [<paramref name="start"/>, <paramref name="end"/>).</returns>
        </member>
        <member name="T:Sasa.Either`3">
            <summary>
            This type encapsulates either a value of type <typeparamref name="TFirst"/>,
            <typeparamref name="TSecond"/>, or <typeparamref name="TThird"/>.
            </summary>
            <typeparam name="TFirst">Possible 'First' type.</typeparam>
            <typeparam name="TSecond">Possible 'Second' type.</typeparam>
            <typeparam name="TThird">Possible 'Third' type.</typeparam>
        </member>
        <member name="M:Sasa.Either`3.op_Implicit(`0)~Sasa.Either{`0,`1,`2}">
            <summary>
            A value of type <typeparamref name="TFirst"/> can be implicitly converted to First.
            </summary>
            <param name="f">The value to implicitly convert.</param>
            <returns>A new Either initialized to First.</returns>
        </member>
        <member name="M:Sasa.Either`3.op_Implicit(`1)~Sasa.Either{`0,`1,`2}">
            <summary>
            A value of type <typeparamref name="TSecond"/> can be implicitly converted to Second.
            </summary>
            <param name="s">The value to implicitly convert.</param>
            <returns>A new Either initialized to Second.</returns>
        </member>
        <member name="M:Sasa.Either`3.op_Implicit(`2)~Sasa.Either{`0,`1,`2}">
            <summary>
            A value of type <typeparamref name="TThird"/> can be implicitly converted to Third.
            </summary>
            <param name="t">The value to implicitly convert.</param>
            <returns>A new Either initialized to Third.</returns>
        </member>
        <member name="M:Sasa.Either`3.op_Explicit(Sasa.Either{`0,`1,`2})~`0">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`3.op_Explicit(Sasa.Either{`0,`1,`2})~`1">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`3.op_Explicit(Sasa.Either{`0,`1,`2})~`2">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`3.First(`0)">
            <summary>
            Returns an instances initialized to First.
            </summary>
            <param name="f">The value used to initialize the Either type.</param>
            <returns>An Either type initialized to First.</returns>
        </member>
        <member name="M:Sasa.Either`3.Second(`1)">
            <summary>
            Returns an instances initialized to Second.
            </summary>
            <param name="s">The value used to initialize the Either type.</param>
            <returns>An Either type initialized to Second.</returns>
        </member>
        <member name="M:Sasa.Either`3.Third(`2)">
            <summary>
            Return an Either encapsulating a type T.
            </summary>
            <param name="t">The value to encapsulate.</param>
            <returns>A newly initialized Either value.</returns>
        </member>
        <member name="M:Sasa.Either`3.Do(System.Action{`0},System.Action{`1},System.Action{`2})">
            <summary>
            Perform an action on the encapsulated value.
            </summary>
            <param name="first">Function to apply if encapsulated value is of type <typeparamref name="TFirst"/>.</param>
            <param name="second">Function to apply if encapsulated value is of type <typeparamref name="TSecond"/>.</param>
            <param name="third">Function to apply if encapsulated value is of type <typeparamref name="TThird"/>.</param>
        </member>
        <member name="M:Sasa.Either`3.Select``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})">
            <summary>
            Transform the encapsulated value into a <typeparamref name="TReturn"/>.
            </summary>
            <typeparam name="TReturn">The type to return.</typeparam>
            <param name="first">Function to apply if encapsulated value is of type <typeparamref name="TFirst"/>.</param>
            <param name="second">Function to apply if encapsulated value is of type <typeparamref name="TSecond"/>.</param>
            <param name="third">Function to apply if encapsulated value is of type <typeparamref name="TThird"/>.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:Sasa.Either`3.Select(`0)">
            <summary>
            If the type is <typeparamref name="TFirst"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TFirst"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="M:Sasa.Either`3.Select(`1)">
            <summary>
            If the type is <typeparamref name="TSecond"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TSecond"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="M:Sasa.Either`3.Select(`2)">
            <summary>
            If the type is <typeparamref name="TThird"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TThird"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="P:Sasa.Either`3.IsFirst">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TFirst"/>.
            </summary>
        </member>
        <member name="P:Sasa.Either`3.IsSecond">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TSecond"/>.
            </summary>
        </member>
        <member name="P:Sasa.Either`3.IsThird">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TThird"/>.
            </summary>
        </member>
        <member name="T:Sasa.Either`3._First">
            <summary>
            The internal class representing the 'First' type.
            </summary>
        </member>
        <member name="T:Sasa.Either`3._Second">
            <summary>
            The internal class representing the 'Second' type.
            </summary>
        </member>
        <member name="T:Sasa.Either`3._Third">
            <summary>
            The internal class representing the 'First' type.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Seq`1">
            <summary>
            A purely functional stack.
            </summary>
            <remarks>
            "null" is also a valid sequence value that can be used to
            construct lists (see example).
            </remarks>
            <example>
            <code>Seq&lt;T&gt; list = value1 &amp; value2 &amp; null;</code>
            </example>
            <typeparam name="T">The type of the sequence elements.</typeparam>
        </member>
        <member name="M:Sasa.Collections.Seq`1.#ctor(`0,Sasa.Collections.Seq{`0})">
            <summary>
            Construct a new sequence from a new head value and an existing list.
            </summary>
            <param name="e">The new value at the head of the list.</param>
            <param name="tail">The remainder of the list.</param>
        </member>
        <member name="M:Sasa.Collections.Seq`1.#ctor(`0)">
            <summary>
            Construct a new single-element sequence.
            </summary>
            <param name="e">The new value at the head of the list.</param>
        </member>
        <member name="M:Sasa.Collections.Seq`1.GetEnumerator">
            <summary>
            Returns an enumerator over the given list.
            </summary>
            <returns>An enumeration over the list.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Equals(Sasa.Collections.Seq{`0})">
            <summary>
            Tests structural equality of two sequences.
            </summary>
            <param name="other">The other sequence to compare to.</param>
            <returns>True if the sequences are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns>Returns true if the objects are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.GetHashCode">
            <summary>
            Returns the hash code for the current sequence.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Peek">
            <summary>
            Peeks at the current value in the sequence.
            </summary>
            <returns>The value at the head of the sequence.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the sequence is empty.</exception>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Pop(`0@)">
            <summary>
            Pops the first element off the sequence.
            </summary>
            <param name="value">The value in the first element of the sequence.</param>
            <returns>The remaining sequence.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the sequence is empty.</exception>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Pop">
            <summary>
            Pops the first element off the sequence.
            </summary>
            <returns>A pair consisting of the new sequence and the current element of the sequence.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the sequence is empty.</exception>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Push(`0)">
            <summary>
            Push an element on to the front of the sequence.
            </summary>
            <param name="value">The new head of the sequence.</param>
            <returns>A new sequence.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Contains(`0)">
            <summary>
            Checks whether a value is in the sequence.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if the element is in the sequence, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Reverse">
            <summary>
            Reverse a sequence.
            </summary>
            <returns>A reversed sequence.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Append(Sasa.Collections.Seq{`0})">
            <summary>
            Append the given sequence after the current sequence.
            </summary>
            <param name="other">The elements to append.</param>
            <returns>A new sequence constructed from the given parameters.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.ReverseAppend(Sasa.Collections.Seq{`0})">
            <summary>
            Reverses the current sequence and appens another sequence to the end.
            </summary>
            <param name="append">The sequence to append.</param>
            <returns>A combined sequence.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Select``1(``0,System.Func{`0,Sasa.Collections.Seq{`0},``0})">
            <summary>
            Apply an operation to a deconstructed list.
            </summary>
            <typeparam name="R">The type of return value.</typeparam>
            <param name="otherwise">The value to return if the sequence is empty.</param>
            <param name="cons">The function to invoke with the deconstructed head of the list.</param>
            <returns>Returns cons(head, tail), or otherwise if the sequence is empty.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Select(`0)">
            <summary>
            Return the value at the head of the list.
            </summary>
            <param name="otherwise">The value to return if the sequence is empty.</param>
            <returns>Returns the value at the head of the list, or 'otherwise' if the sequence is empty.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Set(Sasa.Collections.Seq{`0}@)">
            <summary>
            Perform an atomic set of a stack value.
            </summary>
            <param name="slot">The reference at which to place the new head.</param>
            <returns>Returns true if the swap succeeded.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Remove(`0)">
            <summary>
            Remove an element from the sequence.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>A new sequence without the element.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.Do(System.Action{`0})">
            <summary>
            Apply an operation over a sequence.
            </summary>
            <param name="f">The function to apply.</param>
        </member>
        <member name="M:Sasa.Collections.Seq`1.ToString">
            <summary>
            Return a string representation of the given list.
            </summary>
            <returns>String represetation of the list.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.op_BitwiseAnd(Sasa.Collections.Seq{`0},`0)">
            <summary>
            The sequence 'cons'/add operation, to construct a sequence from a new value and an existing list.
            </summary>
            <param name="t">The new value at the head of the list.</param>
            <param name="l">The remainder of the list.</param>
            <returns>A new sequence constructed from the given parameters.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.op_BitwiseAnd(Sasa.Collections.Seq{`0},Sasa.Collections.Seq{`0})">
            <summary>
            The sequence 'cons'/add operation, to construct a sequence from two lists.
            </summary>
            <param name="left">The new value at the head of the list.</param>
            <param name="right">The remainder of the list.</param>
            <returns>A new sequence constructed from the given parameters.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.op_BitwiseOr(Sasa.Collections.Seq{`0},`0)">
            <summary>
            Returns the value at the head of the sequence o, if o is not empty, or t otherwise. This is
            the sequence equivalent of the ?? operator for null values.
            </summary>
            <param name="o">The sequence value to return if not empty.</param>
            <param name="t">The value to return otherwise.</param>
            <returns>Either the head of the list, or t.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.op_Equality(Sasa.Collections.Seq{`0},Sasa.Collections.Seq{`0})">
            <summary>
            Test two sequences for equality.
            </summary>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Seq`1.op_Inequality(Sasa.Collections.Seq{`0},Sasa.Collections.Seq{`0})">
            <summary>
            Test two sequences for inequality.
            </summary>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <returns>Returns true if they are not equal.</returns>
        </member>
        <member name="P:Sasa.Collections.Seq`1.Empty">
            <summary>
            Returns an empty stack.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Seq`1.IsEmpty">
            <summary>
            Returns true if the sequence is empty.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Seq`1.Value">
            <summary>
            Gets the current element of the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
        </member>
        <member name="P:Sasa.Collections.Seq`1.Next">
            <summary>
            Returns the next element in the sequence.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
        </member>
        <member name="T:Sasa.Collections.PQueue`1">
            <summary>
            A persistent queue.
            </summary>
            <typeparam name="T">The type of the queue elements.</typeparam>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize the queue with the given list of values.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.#ctor(`0)">
            <summary>
            Construct a single-element queue.
            </summary>
            <param name="value">The initial queue value.</param>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.Equals(Sasa.Collections.PQueue{`0})">
            <summary>
            Tests structural equality of two queues.
            </summary>
            <param name="other">The other queue to compare to.</param>
            <returns>True if the queues are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns>Returns true if the objects are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.GetHashCode">
            <summary>
            Returns the hash code for the current sequence.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.Enqueue(`0)">
            <summary>
            Enqueue a value and return a new queue.
            </summary>
            <param name="value">The value to enqueue.</param>
            <returns>A new queue with <paramref name="value"/> as its last element.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.Append(Sasa.Collections.PQueue{`0})">
            <summary>
            Appends the elements of two queues.
            </summary>
            <param name="other">The queue whose elements we should append.</param>
            <returns>A new queue consisting of this queue's elements followed by <paramref name="other"/>'s elements.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.Dequeue(`0@)">
            <summary>
            Dequeue the first value in the queue.
            </summary>
            <param name="value">The first value in the queue.</param>
            <returns>Returns a new queue minus the first value.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.Dequeue">
            <summary>
            Remove an item from the collection
            </summary>
            <returns>A pair of a new collection without the item, and the item that was removed.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator over the given list.
            </summary>
            <returns>An enumeration over the list.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.op_Equality(Sasa.Collections.PQueue{`0},Sasa.Collections.PQueue{`0})">
            <summary>
            Test two queues for equality.
            </summary>
            <param name="left">The left queue.</param>
            <param name="right">The right queue.</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.op_Inequality(Sasa.Collections.PQueue{`0},Sasa.Collections.PQueue{`0})">
            <summary>
            Test two sequences for inequality.
            </summary>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <returns>Returns true if they are not equal.</returns>
        </member>
        <member name="M:Sasa.Collections.PQueue`1.ToString">
            <summary>
            Converts a queue to a string.
            </summary>
            <returns>A string representation of the queue.</returns>
        </member>
        <member name="P:Sasa.Collections.PQueue`1.Empty">
            <summary>
            An empty queue.
            </summary>
        </member>
        <member name="P:Sasa.Collections.PQueue`1.IsEmpty">
            <summary>
            Returns true if the queue is empty.
            </summary>
        </member>
        <member name="P:Sasa.Collections.PQueue`1.Value">
            <summary>
            Returns the first value in the queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue is empty.</exception>
        </member>
        <member name="T:Sasa.Collections.PQueue">
            <summary>
            Extension methods on <see cref="T:Sasa.Collections.PQueue`1"/>.
            </summary>
        </member>
        <member name="M:Sasa.Collections.PQueue.ToQueue``1(Sasa.Collections.Seq{``0})">
            <summary>
            Convert a sequence to a queue.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="seq">The sequence to convert to a queue.</param>
            <returns>A queue whose first element is the top of the stack.</returns>
        </member>
        <member name="T:Sasa.CodeGen">
            <summary>
            Utility functinos for code generation.
            </summary>
        </member>
        <member name="M:Sasa.CodeGen.Function``1(System.Type,System.String,System.Reflection.MethodAttributes,System.Boolean,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>
            Create a dynamic method.
            </summary>
            <typeparam name="T">The type of the dynamic method to create.</typeparam>
            <param name="type">The type to which this delegate should be a member.</param>
            <param name="methodName">The name of the delegate's method.</param>
            <param name="attributes">The method attributes.</param>
            <param name="saveAssembly">Flag indicating whether the generated code should be saved to a dll.</param>
            <param name="generate">A call back that performs the code generation.</param>
            <returns>An dynamically created instance of the given delegate type.</returns>
        </member>
        <member name="T:Sasa.Collections.Env`2">
            <summary>
            Environment mapping names to values, matching the semantics of lexical scoping.
            </summary>
            <remarks>
            This is essentially a purely functional dictionary
            that supports shadowed values.
            </remarks>
            <typeparam name="K">The type of keys.</typeparam>
            <typeparam name="V">The type of values.</typeparam>
        </member>
        <member name="M:Sasa.Collections.Env`2.Find(`0)">
            <summary>
            Find the value bound to the key.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The latest value corresponding to that key.</returns>
        </member>
        <member name="M:Sasa.Collections.Env`2.GetEnumerator">
            <summary>
            Generate an enumerator for this map.
            </summary>
            <returns>
            Returns an enumerator over all the bindings in last-in-first-out order.
            </returns>
        </member>
        <member name="M:Sasa.Collections.Env`2.Bind(`0,`1)">
            <summary>
            Bind a value to the given name under this environment.
            </summary>
            <param name="key">The key under which the value is bound.</param>
            <param name="value">The value being bound.</param>
            <returns>A new Env&lt;V&gt; containing the new binding.</returns>
        </member>
        <member name="M:Sasa.Collections.Env`2.ToString">
            <summary>
            Generate a string representation of the current environment.
            </summary>
            <returns>A string representation of the bindings in last-in-first-out-order.</returns>
        </member>
        <member name="P:Sasa.Collections.Env`2.Empty">
            <summary>
            The empty environment.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Env`2.Item(`0)">
            <summary>
            Find the value bound to the key.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The latest value corresponding to that key.</returns>
        </member>
        <member name="T:Sasa.Types">
            <summary>
            Extensions to System.Type.
            </summary>
        </member>
        <member name="M:Sasa.Types.Subtypes(System.Type,System.Type)">
            <summary>
            Returns true if the given types are in a subtyping relationship.
            </summary>
            <param name="subtype">The subtype.</param>
            <param name="supertype">The potential supertype.</param>
            <returns>True if <paramref name="subtype"/> is a subtype of <paramref name="supertype"/>.</returns>
        </member>
        <member name="M:Sasa.Types.Subtypes``1(System.Type)">
            <summary>
            Returns true if the given types are in a subtyping relationship.
            </summary>
            <typeparam name="T">The potential supertype.</typeparam>
            <param name="subtype">The subtype.</param>
            <returns>True if <paramref name="subtype"/> is a subtype of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Sasa.Types.Subtypes``2">
            <summary>
            Returns true if the given types are in a subtyping relationship.
            </summary>
            <typeparam name="TSub">The subtype.</typeparam>
            <typeparam name="TSup">The potential supertype.</typeparam>
            <returns>True if <typeparamref name="TSub"/> is a subtype of <typeparamref name="TSup"/>.</returns>
        </member>
        <member name="M:Sasa.Types.ShortName(System.Type)">
            <summary>
            Return the shortest string required to identify a type.
            </summary>
            <param name="typ">The type to format as a string.</param>
            <returns>A string representation of the type.</returns>
        </member>
        <member name="M:Sasa.Types.ShortGenericType(System.Type,System.Type[],System.Text.StringBuilder)">
            <summary>
            Generates an abbreviated type name for a generic type definition with the specified
            generic type arguments.
            </summary>
            <param name="typ">The generic type definition.</param>
            <param name="genericArguments">The generic type arguments.</param>
            <param name="sb">The StringBuilder to which the type string should be written.</param>
            <returns>An abbreviated generic type name.</returns>
        </member>
        <member name="M:Sasa.Types.ToShortName(System.Type,System.Text.StringBuilder)">
            <summary>
            Return the shortest string required to identify a type.
            </summary>
            <param name="typ">The type to format as a string.</param>
            <param name="sb">The StringBuilder to which the type string should be written.</param>
            <returns>A string representation of the type.</returns>
        </member>
        <member name="M:Sasa.Types.ShortGenericType(System.Type,System.Type[])">
            <summary>
            Generates an abbreviated type name for a generic type definition with the specified
            generic type arguments.
            </summary>
            <param name="typ">The generic type definition.</param>
            <param name="genericArguments">The generic type arguments.</param>
            <returns>An abbreviated generic type name.</returns>
        </member>
        <member name="M:Sasa.Types.IsGenericTypeInstance(System.Type)">
            <summary>
            Checks that the type is a generic type with all generic parameters specified.
            </summary>
            <param name="typ">The type to test.</param>
            <returns>True if the type is instaniated with all generic parameters, false otherwise.</returns>
        </member>
        <member name="T:Sasa.Atomics">
            <summary>
            Extensions to System.Threading.Interlocked.
            </summary>
        </member>
        <member name="M:Sasa.Atomics.Set``1(``0@,``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.Set``1(``0@,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.Set``1(Sasa.Ref{``0},``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.Set``1(Sasa.Ref{``0},``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(``0@,``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(``0@,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(Sasa.Ref{``0},``0,``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <param name="comparand">The current value of the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="M:Sasa.Atomics.SetFailed``1(Sasa.Ref{``0},``0)">
            <summary>
            Perform an atomic set.
            </summary>
            <typeparam name="T">The type of value being swapped.</typeparam>
            <param name="slot">The slot in which to place the new value.</param>
            <param name="value">The new value to place in the slot.</param>
            <returns>Returns true if successfully updated, false if another thread updated instead.</returns>
        </member>
        <member name="T:Sasa.Tuple">
            <summary>
            Tuple convenience functions.
            </summary>
        </member>
        <member name="M:Sasa.Tuple.KV``2(``0,``1)">
            <summary>
            Construct a KeyValuePair from the given values.
            </summary>
            <typeparam name="T">The first type.</typeparam>
            <typeparam name="U">The second type.</typeparam>
            <param name="t">The first value.</param>
            <param name="u">The second value.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:Sasa.Tuple._``2(``0,``1)">
            <summary>
            Construct a Pair from the given values.
            </summary>
            <typeparam name="T">The first type.</typeparam>
            <typeparam name="U">The second type.</typeparam>
            <param name="t">The first value.</param>
            <param name="u">The second value.</param>
            <returns>A new Pair.</returns>
        </member>
        <member name="M:Sasa.Tuple._``3(``0,``1,``2)">
            <summary>
            Construct a Triple from the given values.
            </summary>
            <typeparam name="T">The first type.</typeparam>
            <typeparam name="U">The second type.</typeparam>
            <typeparam name="V">The third type.</typeparam>
            <param name="t">The first value.</param>
            <param name="u">The second value.</param>
            <param name="v">The third value.</param>
            <returns>A new Triple.</returns>
        </member>
        <member name="M:Sasa.Tuple._``4(``0,``1,``2,``3)">
            <summary>
            Construct a Quad from the given values.
            </summary>
            <typeparam name="T">The first type.</typeparam>
            <typeparam name="U">The second type.</typeparam>
            <typeparam name="V">The third type.</typeparam>
            <typeparam name="Q">The fourth type.</typeparam>
            <param name="t">The first value.</param>
            <param name="u">The second value.</param>
            <param name="v">The third value.</param>
            <param name="q">The fourth value.</param>
            <returns>A new Quad.</returns>
        </member>
        <member name="M:Sasa.Tuple.Flatten``4(Sasa.Pair{Sasa.Pair{``0,``1},Sasa.Pair{``2,``3}})">
            <summary>
            Flatten a nested pair of pairs into a Quad.
            </summary>
            <typeparam name="T">The first type.</typeparam>
            <typeparam name="U">The second type.</typeparam>
            <typeparam name="V">The third type.</typeparam>
            <typeparam name="Q">The fourth type.</typeparam>
            <param name="nested">A nested tuple to flatten into a single tuple.</param>
            <returns>A flattened tuple.</returns>
        </member>
        <member name="M:Sasa.Tuple.Flatten``3(Sasa.Pair{Sasa.Pair{``0,``1},``2})">
            <summary>
            Flatten a nested pair of a pair into a Triple.
            </summary>
            <typeparam name="T">The first type.</typeparam>
            <typeparam name="U">The second type.</typeparam>
            <typeparam name="V">The third type.</typeparam>
            <param name="nested">A nested tuple to flatten into a single tuple.</param>
            <returns>A flattened tuple.</returns>
        </member>
        <member name="M:Sasa.Tuple._``1(``0[])">
            <summary>
            A syntactic shortcut to create arrays of values leveraging type inference.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="values">The values to create.</param>
            <returns>An array of the provided values.</returns>
        </member>
        <member name="T:Sasa.Weak`1">
            <summary>
            Exposes a strongly typed interface to an encapsulated WeakReference.
            </summary>
            <typeparam name="T">The type of the object in the WeakReference.</typeparam>
        </member>
        <member name="T:Sasa.IRef`1">
            <summary>
            A mutable reference.
            </summary>
            <typeparam name="T">The type of value the reference contains.</typeparam>
        </member>
        <member name="P:Sasa.IRef`1.Value">
            <summary>
            The value in the reference.
            </summary>
        </member>
        <member name="M:Sasa.Weak`1.#ctor(System.WeakReference)">
            <summary>
            Construct a typed weak reference from the given WeakReference.
            </summary>
            <param name="reference">The WeakReference to encapsulate.</param>
            <exception cref="T:System.InvalidCastException">If the provided WeakReference does not point
            to an object of type T.</exception>
        </member>
        <member name="M:Sasa.Weak`1.#ctor(`0)">
            <summary>
            Encapsulate the given object in a Weak ref.
            </summary>
            <param name="value">The object to encapsulate in a Weak reference.</param>
        </member>
        <member name="M:Sasa.Weak`1.TryGetValue(`0@)">
            <summary>
            Extract the value behind the weak reference.
            </summary>
            <param name="value">The underlying value.</param>
            <returns>True if the value is alive, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(`0)">
            <summary>
            Compares the given object for equality.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the underlying object is equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(Sasa.Weak{`0})">
            <summary>
            Compares the given object for equality.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the underlying object is equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj">The object to compare for equality.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.GetHashCode">
            <summary>
            Hashcode override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sasa.Weak`1.Equals(System.WeakReference)">
            <summary>
            Compares the given object for equality.
            </summary>
            <param name="other">The object to compare against.</param>
            <returns>True if the underlying object is equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Implicit(`0)~Sasa.Weak{`0}">
            <summary>
            Implicitly convert a value of type T to a Weak ref if needed.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Weak reference to the value.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Implicit(Sasa.Weak{`0})~`0">
            <summary>
            Implicitly extract the value encapsulated in the Weak ref.
            </summary>
            <param name="weak">The Weak reference from which to extract the value.</param>
            <returns>The value encapsulated in the Weak ref.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Implicit(Sasa.Weak{`0})~System.WeakReference">
            <summary>
            Implicitly extract the WeakReference encapsulated in the Weak value.
            </summary>
            <param name="weak">The Weak reference from which to extract the WeakReference.</param>
            <returns>The WeakReference encapsulated in the Weak value.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Equality(Sasa.Weak{`0},Sasa.Weak{`0})">
            <summary>
            Compares two weak references for equality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Equality(Sasa.Weak{`0},`0)">
            <summary>
            Compares two weak references for equality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Equality(`0,Sasa.Weak{`0})">
            <summary>
            Compares two weak references for equality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Inequality(Sasa.Weak{`0},Sasa.Weak{`0})">
            <summary>
            Compares two weak references for inequality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Inequality(Sasa.Weak{`0},`0)">
            <summary>
            Compares two weak references for inequality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Weak`1.op_Inequality(`0,Sasa.Weak{`0})">
            <summary>
            Compares two weak references for inequality.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if not equal, false otherwise.</returns>
        </member>
        <member name="P:Sasa.Weak`1.Value">
            <summary>
            Access the underlying value, if it still exists.
            </summary>
        </member>
        <member name="P:Sasa.Weak`1.IsAlive">
            <summary>
            Returns true if the reference is still alive.
            </summary>
        </member>
        <member name="T:Sasa.Pair`2">
            <summary>
            A 2-element tuple type.
            </summary>
            <typeparam name="T0">Type of Pair.First.</typeparam>
            <typeparam name="T1">Type of Pair.Second.</typeparam>
        </member>
        <member name="M:Sasa.Pair`2.#ctor(`0,`1)">
            <summary>
            Construct a new Pair.
            </summary>
            <param name="first">Value of the first element.</param>
            <param name="second">Value of the second element.</param>
        </member>
        <member name="M:Sasa.Pair`2.Bind(`0@,`1@)">
            <summary>
            Bind all tuple elements to locals.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Sasa.Pair`2.ToKeyValue">
            <summary>
            Convert a Pair to a KeyValuePair.
            </summary>
            <returns>A KeyValuePair, where Key=First, Value=Second.</returns>
        </member>
        <member name="M:Sasa.Pair`2.Equals(Sasa.Pair{`0,`1})">
            <summary>
            Test Pair equality element-wise.
            </summary>
            <param name="other"></param>
            <returns>True if the pairs are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.Equals(System.Object)">
            <summary>
            Test equality.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.GetHashCode">
            <summary>
            Compute hash code.
            </summary>
            <returns>Hash code for the encapsulated values.</returns>
        </member>
        <member name="M:Sasa.Pair`2.CompareTo(Sasa.Pair{`0,`1})">
            <summary>
            Compare the two values, Pair.First first, then Pair.Second if Pair.First are equal.
            </summary>
            <param name="other">The Pair to compare against.</param>
            <returns>
            Returns zero if the pairs are equal element-wise, returns a number greater than zero if
            the current pair is greater than <paramref name="other"/> element-wise, else returns a
            number greater than zero.
            </returns>
        </member>
        <member name="M:Sasa.Pair`2.ToString">
            <summary>
            Return a string representation of this Pair.
            </summary>
            <returns>A string representation of this Pair.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Implicit(Sasa.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Implicitly convert Pair to KeyValuePair.
            </summary>
            <param name="pair">The Pair to convert.</param>
            <returns>A KeyValuePair, where Key=First, Value=Second.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~Sasa.Pair{`0,`1}">
            <summary>
            Implicitly convert KeyValuePair to Pair.
            </summary>
            <param name="pair">The KeyValuePair to convert.</param>
            <returns>A new Pair instance, where First=Key, and Second=Value.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Equality(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Compares two Pairs for equality.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>Returns true if the Pairs are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_Inequality(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Compares two Pairs for inequality.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>Returns true if the Pairs are not equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Pair`2.op_LessThan(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>
            Returns zero if the pairs are equal, a number greater than zero if <paramref name="left"/> is
            greater than <paramref name="right"/>, else a number less than zero.
            </returns>
        </member>
        <member name="M:Sasa.Pair`2.op_GreaterThan(Sasa.Pair{`0,`1},Sasa.Pair{`0,`1})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first Pair.</param>
            <param name="right">The second Pair.</param>
            <returns>
            Returns zero if the pairs are equal, a number greater than zero if <paramref name="left"/> is
            greater than <paramref name="right"/>, else a number less than zero.
            </returns>
        </member>
        <member name="P:Sasa.Pair`2.First">
            <summary>
            First element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Pair`2.Second">
            <summary>
            Second element of the tuple.
            </summary>
        </member>
        <member name="T:Sasa.String.Strings">
            <summary>
            String extension methods.
            </summary>
        </member>
        <member name="M:Sasa.String.Strings.IsNullOrEmpty(System.String)">
            <summary>
            Returns true if string is null or empty.
            </summary>
            <param name="s">The string to test.</param>
            <returns>True if the string is null or of length 0.</returns>
        </member>
        <member name="M:Sasa.String.Strings.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Ensures returned string is not null or empty.
            </summary>
            <param name="s">The string to test.</param>
            <param name="otherwise">The string to return if 's is null or empty.</param>
            <returns>Returns the string if the not null or of length 0, or 'otherwise' otherwise.</returns>
        </member>
        <member name="M:Sasa.String.Strings.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Return a slice of a string delineated by the start and end indices.
            </summary>
            <param name="s">The string to slice.</param>
            <param name="start">The start of the slice.</param>
            <param name="end">The end of the slice.</param>
            <returns>The string slice.</returns>
        </member>
        <member name="M:Sasa.String.Strings.ToFilePath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a filesystem path given a stream of path components.
            </summary>
            <param name="components">The sequence of component paths.</param>
            <returns>A file system path separated by the OS-specific separator character.</returns>
        </member>
        <member name="M:Sasa.String.Strings.ToFilePath(System.String[])">
            <summary>
            Returns a filesystem path given an array of path components.
            </summary>
            <param name="components">The array of component paths.</param>
            <returns>A file system path separated by the OS-specific separator character.</returns>
        </member>
        <member name="M:Sasa.String.Strings.WordWrapAt(System.String,System.Int32)">
            <summary>
            Wraps the string at the given column index.
            </summary>
            <param name="s">The string to process.</param>
            <param name="column">The column at which to wrap the string.</param>
            <returns>A stream of strings representing the wrapped lines. String.Length is &lt;= column.</returns>
        </member>
        <member name="M:Sasa.String.Strings.HardWrapAt(System.String,System.Int32)">
            <summary>
            Wraps the string at the given column index.
            </summary>
            <param name="s">The string to process.</param>
            <param name="column">The column at which to wrap the string.</param>
            <returns>A stream of strings representing the wrapped lines. String.Length is &lt;= column.</returns>
        </member>
        <member name="M:Sasa.String.Strings.Lines(System.String)">
            <summary>
            Returns the string split into individual lines.
            </summary>
            <param name="s">The string to split.</param>
            <returns>An array of all the lines in the string.</returns>
        </member>
        <member name="M:Sasa.String.Strings.Words(System.String)">
            <summary>
            Returns an array split by whitespace.
            </summary>
            <param name="s">The string to split.</param>
            <returns>An array of strings which were separate by whitespace in the original string.</returns>
        </member>
        <member name="M:Sasa.String.Strings.ToBase64(System.String)">
            <summary>
            Convert a string to Base64.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The Base64-encoded string.</returns>
        </member>
        <member name="M:Sasa.String.Strings.FromBase64(System.String)">
            <summary>
            Convert a string from a Base64 encoded string to another string.
            </summary>
            <param name="s">The string the convert.</param>
            <returns>The unencoded string.</returns>
        </member>
        <member name="M:Sasa.String.Strings.Split(System.String,System.StringSplitOptions,System.Char[])">
            <summary>
            Split the string according to the given options and delimiters.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The options to use when splitting the string.</param>
            <param name="delimiter">The delimiters used to split the string.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Sasa.String.Strings.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
            Split the string according to the given options and delimiters.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The options to use when splitting the string.</param>
            <param name="delimiter">The delimiters used to split the string.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Sasa.String.Strings.SliceEquals(System.String,System.Int32,System.String)">
            <summary>
            Checks the value of a substring.
            </summary>
            <param name="first">The string to inspect.</param>
            <param name="start">The index at which to check for the substring.</param>
            <param name="sub">The string to use for comparison.</param>
            <returns>True if string <paramref name="sub"/> is found at <paramref name="first"/>[<paramref name="start"/>].</returns>
        </member>
        <member name="M:Sasa.String.Strings.Tokenize(System.String,System.String[])">
            <summary>
            Searches the input stream for a set of tokens;
            </summary>
            <param name="input">The input string to search.</param>
            <param name="tokens">The list of tokens to search for.</param>
            <returns>A stream of tokens.</returns>
        </member>
        <member name="T:Sasa.String.Strings.Token">
            <summary>
            Tokens identified by the Tokenize function.
            </summary>
        </member>
        <member name="P:Sasa.String.Strings.Token.Index">
            <summary>
            The index marking the beginning of the token.
            </summary>
        </member>
        <member name="P:Sasa.String.Strings.Token.Tok">
            <summary>
            The token identified.
            </summary>
        </member>
        <member name="P:Sasa.String.Strings.Token.Input">
            <summary>
            The input string being searched.
            </summary>
        </member>
        <member name="T:Sasa.Either`2">
            <summary>
            This type encapsulates either a value of type <typeparamref name="TFirst"/>,
            or <typeparamref name="TSecond"/>.
            </summary>
            <typeparam name="TFirst">Possible 'First' type.</typeparam>
            <typeparam name="TSecond">Possible 'Second' type.</typeparam>
        </member>
        <member name="M:Sasa.Either`2.op_Implicit(`0)~Sasa.Either{`0,`1}">
            <summary>
            A value of type <typeparamref name="TFirst"/> can be implicitly converted to First.
            </summary>
            <param name="f">The value to implicitly convert.</param>
            <returns>A new Either initialized to First.</returns>
        </member>
        <member name="M:Sasa.Either`2.op_Implicit(`1)~Sasa.Either{`0,`1}">
            <summary>
            A value of type <typeparamref name="TSecond"/> can be implicitly converted to Second.
            </summary>
            <param name="s">The value to implicitly convert.</param>
            <returns>A new Either initialized to Second.</returns>
        </member>
        <member name="M:Sasa.Either`2.op_Explicit(Sasa.Either{`0,`1})~`0">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`2.op_Explicit(Sasa.Either{`0,`1})~`1">
            <summary>
            An explicit cast on an Either type ensures the cast is appropriate.
            </summary>
            <param name="e">The Either type to convert.</param>
            <returns>The value encapsulated in the Either type, if the cast is appropriate, and
            InvalidCastException otherwise.</returns>
        </member>
        <member name="M:Sasa.Either`2.First(`0)">
            <summary>
            Returns an instances initialized to First.
            </summary>
            <param name="f">The value used to initialize the Either type.</param>
            <returns>An Either type initialized to First.</returns>
        </member>
        <member name="M:Sasa.Either`2.Second(`1)">
            <summary>
            Returns an instances initialized to Second.
            </summary>
            <param name="s">The value used to initialize the Either type.</param>
            <returns>An Either type initialized to Second.</returns>
        </member>
        <member name="M:Sasa.Either`2.Do(System.Action{`0},System.Action{`1})">
            <summary>
            Perform an action on the encapsulated value.
            </summary>
            <param name="first">Function to apply if encapsulated value is of type <typeparamref name="TFirst"/>.</param>
            <param name="second">Function to apply if encapsulated value is of type <typeparamref name="TSecond"/>.</param>
        </member>
        <member name="M:Sasa.Either`2.Select``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            Transform the encapsulated value into a <typeparamref name="TReturn"/>.
            </summary>
            <typeparam name="TReturn">The type to return.</typeparam>
            <param name="first">Function to apply if encapsulated value is of type <typeparamref name="TFirst"/>.</param>
            <param name="second">Function to apply if encapsulated value is of type <typeparamref name="TSecond"/>.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:Sasa.Either`2.Select(`0)">
            <summary>
            If the type is <typeparamref name="TFirst"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TFirst"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="M:Sasa.Either`2.Select(`1)">
            <summary>
            If the type is <typeparamref name="TSecond"/>, return the value, else return <paramref name="otherwise"/>.
            </summary>
            <param name="otherwise">The value to return if Either is not the expected type.</param>
            <returns>The encapsulated <typeparamref name="TSecond"/>, or <paramref name="otherwise"/>.</returns>
        </member>
        <member name="P:Sasa.Either`2.IsFirst">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TFirst"/>.
            </summary>
        </member>
        <member name="P:Sasa.Either`2.IsSecond">
            <summary>
            Returns true if encapsulated type is of type <typeparamref name="TSecond"/>.
            </summary>
        </member>
        <member name="T:Sasa.Either`2._First">
            <summary>
            The internal class representing the 'First' type.
            </summary>
        </member>
        <member name="T:Sasa.Either`2._Second">
            <summary>
            The internal class representing the 'Second' type.
            </summary>
        </member>
        <member name="T:Sasa.Union16">
            <summary>
            Represents a 16-bit union.
            </summary>
        </member>
        <member name="F:Sasa.Union16.Unsigned">
            <summary>
            The unsigned fragment of the union.
            </summary>
        </member>
        <member name="F:Sasa.Union16.Signed">
            <summary>
            The signed fragment of the union.
            </summary>
        </member>
        <member name="M:Sasa.Union16.#ctor(System.Int16)">
            <summary>
            Construct a flat 16-bit union from a signed value.
            </summary>
            <param name="value">The signed value.</param>
        </member>
        <member name="M:Sasa.Union16.#ctor(System.UInt16)">
            <summary>
            Construct a flat 16-bit union from an unsigned value.
            </summary>
            <param name="value">The unsigned value.</param>
        </member>
        <member name="T:Sasa.Union32">
            <summary>
            Represents a 32-bit union.
            </summary>
        </member>
        <member name="F:Sasa.Union32.Unsigned">
            <summary>
            The unsigned fragment of the union.
            </summary>
        </member>
        <member name="F:Sasa.Union32.Signed">
            <summary>
            The signed fragment of the union.
            </summary>
        </member>
        <member name="F:Sasa.Union32.Single">
            <summary>
            The single fragment of the union.
            </summary>
        </member>
        <member name="M:Sasa.Union32.#ctor(System.Int32)">
            <summary>
            Construct a flat 32-bit union from a signed value.
            </summary>
            <param name="value">The signed value.</param>
        </member>
        <member name="M:Sasa.Union32.#ctor(System.UInt32)">
            <summary>
            Construct a flat 32-bit union from an unsigned value.
            </summary>
            <param name="value">The unsigned value.</param>
        </member>
        <member name="M:Sasa.Union32.#ctor(System.Single)">
            <summary>
            Construct a flat 32-bit union from an unsigned value.
            </summary>
            <param name="value">The single-precision floating point value.</param>
        </member>
        <member name="T:Sasa.Union64">
            <summary>
            Represents a 64-bit union.
            </summary>
        </member>
        <member name="F:Sasa.Union64.Unsigned">
            <summary>
            The unsigned fragment of the union.
            </summary>
        </member>
        <member name="F:Sasa.Union64.Signed">
            <summary>
            The signed fragment of the union.
            </summary>
        </member>
        <member name="F:Sasa.Union64.Double">
            <summary>
            The double-precision floating point fragment of the union.
            </summary>
        </member>
        <member name="M:Sasa.Union64.#ctor(System.Int64)">
            <summary>
            Construct a flat 64-bit union from a signed value.
            </summary>
            <param name="value">The signed value.</param>
        </member>
        <member name="M:Sasa.Union64.#ctor(System.UInt64)">
            <summary>
            Construct a flat 64-bit union from an unsigned value.
            </summary>
            <param name="value">The unsigned value.</param>
        </member>
        <member name="M:Sasa.Union64.#ctor(System.Double)">
            <summary>
            Construct a flat 64-bit union from a double-precision floating point value.
            </summary>
            <param name="value">The double-precision floating point value.</param>
        </member>
        <member name="T:Sasa.Union128">
            <summary>
            Represents a 128-bit decimal union.
            </summary>
        </member>
        <member name="F:Sasa.Union128.Decimal">
            <summary>
            The decimal value.
            </summary>
        </member>
        <member name="F:Sasa.Union128.First64">
            <summary>
            The first 64-bits of the decimal.
            </summary>
        </member>
        <member name="F:Sasa.Union128.Second64">
            <summary>
            The second 64-bits of the decimal.
            </summary>
        </member>
        <member name="M:Sasa.Union128.#ctor(System.Decimal)">
            <summary>
            Construct a flat 128-bit union from a decimal.
            </summary>
            <param name="value">The decimal value.</param>
        </member>
        <member name="M:Sasa.Union128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Construct a flat 128-bit union from two unsigned 64-bit values.
            </summary>
            <param name="first64">The first 64-bits.</param>
            <param name="second64">The second 64-bits.</param>
        </member>
        <member name="T:Sasa.Endian">
            <summary>
            Endian conversions.
            </summary>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.Int16)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.UInt16)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(Sasa.Union16)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(Sasa.Union32)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.Int32)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.UInt32)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.Int64)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(Sasa.Union64)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.UInt64)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.ToBig(System.Decimal)">
            <summary>
            Convert the value to big endian.
            </summary>
            <param name="value">The host endian encoded value to convert.</param>
            <returns>Big endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(Sasa.Union16)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.Int16)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.UInt16)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.Int32)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(Sasa.Union32)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.UInt32)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(Sasa.Union64)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.Int64)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.UInt64)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.FromBig(System.Decimal)">
            <summary>
            Convert the value from big endian to host endian encoding.
            </summary>
            <param name="value">The big endian encoded value to convert.</param>
            <returns>Host endian encoded value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(Sasa.Union128)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="value">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.Decimal)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="value">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(Sasa.Union16)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.Int16)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.UInt16)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.UInt32)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.Int32)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(Sasa.Union32)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.UInt64)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(System.Int64)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="M:Sasa.Endian.Swap(Sasa.Union64)">
            <summary>
            Swap upper and lower bytes.
            </summary>
            <param name="i">The value being swapped.</param>
            <returns>The swapped value.</returns>
        </member>
        <member name="T:Sasa.Web.Url64">
            <summary>
            Encodes bytes into a base64 alphabet that is safe to embed into URLs.
            </summary>
        </member>
        <member name="M:Sasa.Web.Url64.ToUrl64(System.Byte[])">
            <summary>
            Convert bytes to a Url64 string.
            </summary>
            <param name="b">The binary data.</param>
            <returns>The equivalent Url64 encoded string.</returns>
        </member>
        <member name="M:Sasa.Web.Url64.FromUrl64(System.String)">
            <summary>
            Convert from a Url64 string representation back to binary.
            </summary>
            <param name="s">The string in Url64 form.</param>
            <returns>The decoded bytes corresponding to the given string.</returns>
        </member>
        <member name="T:Sasa.Linq.Enumerables">
            <summary>
            Extensions to IEnumerable.
            </summary>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Consumes a sequence while applying a function to each element.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The enumerator.</param>
            <param name="f">The function to apply.</param>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Apply a function to each element of the collection.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The enumerator.</param>
            <param name="f">The function to aplpy.</param>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Push``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the given item to the beginning of a sequence.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="head">The new first element of the enumeration.</param>
            <param name="tail">The rest of the enumeration.</param>
            <returns>An enumeration with 'head' as the first value.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Append an item to the end of an enumeration.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The enumeration being modified.</param>
            <param name="last">The element being appended to the enumeration.</param>
            <returns>An enumeration with a new last element.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flattens a nested enumerable.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The nested enumerable.</param>
            <returns>A flattened stream.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <returns>A formatted string.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <param name="toString">The function used to convert each element to a string.</param>
            <returns>A formatted string.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.StringBuilder)">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <param name="output">The StringBuilder to which the output is written.</param>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Format``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.StringBuilder,System.Func{``0,System.String})">
            <summary>
            Formats each element of the stream with the given separator between them.
            </summary>
            <typeparam name="T">The type being enumerated.</typeparam>
            <param name="source">The input stream to format.</param>
            <param name="separator">The element separating each element of the stream.</param>
            <param name="output">The StringBuilder to which the output is written.</param>
            <param name="toString">The function used to convert each element to a string.</param>
        </member>
        <member name="M:Sasa.Linq.Enumerables.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs an ordered comparison on two sequences.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <returns>Zero if two sequences are equal, greater than zero if <paramref name="first"/>
            &gt; <paramref name="second"/>, less than zero otherwise.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Generate``1(``0,System.Func{``0,Sasa.Option{``0}})">
            <summary>
            Generate a sequence of elements given a generator function.
            </summary>
            <typeparam name="T">The type of sequence elements.</typeparam>
            <param name="seed">The initial seed value.</param>
            <param name="generator">The generator function.</param>
            <returns>A sequence of elements.</returns>
        </member>
        <member name="M:Sasa.Linq.Enumerables.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            Copy the elements of the stream to the given array starting at the given index.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="array">The target array.</param>
            <param name="start">The starting index of the array.</param>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Consumes the entire sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence to consume.</param>
            <remarks>
            This is primarily of use to enumerators that induce side-effects while
            producing values. Consume forces the side-effects eagerly instead of
            lazily.
            </remarks>
        </member>
        <member name="M:Sasa.Linq.Enumerables.Transpose``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Swaps the rows and columns of a nested sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence whose rows and columns are swapped.</returns>
            <remarks>
            Note that this method will handle jagged sequences, but transposing
            twice will not necessarily recover the same sequence as the original
            input. All the jagged entries will be pushed to the last row.
            </remarks>
        </member>
        <member name="T:Sasa.Ref`1">
            <summary>
            Simple reference.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="P:Sasa.Ref`1.Value">
            <summary>
            The encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.ImmutableValue`1">
            <summary>
            An immutable value.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
        </member>
        <member name="M:Sasa.ImmutableValue`1.#ctor(`0)">
            <summary>
            Constructs an instance of a value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Sasa.ImmutableValue`1.Value">
            <summary>
            The encapsulated value.
            </summary>
        </member>
        <member name="T:Sasa.Integers">
            <summary>
            Extensions for core int values.
            </summary>
        </member>
        <member name="M:Sasa.Integers.UpTo(System.Int32,System.Int32)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The lower incusive bound of the stream.</param>
            <param name="end">The upper exclusive bound of the stream.</param>
            <returns>A stream of int from [start, end).</returns>
        </member>
        <member name="M:Sasa.Integers.UpTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The lower incusive bound of the stream.</param>
            <param name="end">The upper exclusive bound of the stream.</param>
            <param name="step">The incremental value.</param>
            <returns>A stream of int from [start, end) incremented by 'step'.</returns>
        </member>
        <member name="M:Sasa.Integers.UpTo(System.UInt32,System.UInt32)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The lower incusive bound of the stream.</param>
            <param name="end">The upper exclusive bound of the stream.</param>
            <returns>A stream of uint from [start, end).</returns>
        </member>
        <member name="M:Sasa.Integers.DownTo(System.Int32,System.Int32)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The upper incusive bound of the stream.</param>
            <param name="end">The lower exclusive bound of the stream.</param>
            <returns>A stream of int from [start, end).</returns>
        </member>
        <member name="M:Sasa.Integers.DownTo(System.UInt32,System.UInt32)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The upper incusive bound of the stream.</param>
            <param name="end">The lower exclusive bound of the stream.</param>
            <returns>A stream of int from [start, end).</returns>
        </member>
        <member name="M:Sasa.Integers.Bound(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bound the given int by the upper and lower values.
            </summary>
            <param name="value">The int to bound.</param>
            <param name="min">The lower inclusive bound.</param>
            <param name="max">The upper inclusive bound.</param>
            <returns>Returns i if min &lt;= i &lt;= max, or min or max if i is out of that range.</returns>
        </member>
        <member name="T:Sasa.Decimals">
            <summary>
            Extension methods on System.Decimal.
            </summary>
        </member>
        <member name="M:Sasa.Decimals.Bound(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Bound the given Decimal by the upper and lower values.
            </summary>
            <param name="value">The value to bound.</param>
            <param name="min">The lower inclusive bound.</param>
            <param name="max">The upper inclusive bound.</param>
            <returns>Returns <paramref name="value"/> if <paramref name="min"/> &lt;= <paramref name="value"/> &lt;= <paramref name="max"/>,
            or <paramref name="min"/> or <paramref name="max"/> if <paramref name="value"/> is out of that range.
            </returns>
        </member>
        <member name="M:Sasa.Decimals.UpTo(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns a stream of numbers from start up to end.
            </summary>
            <param name="start">The lower incusive bound of the stream.</param>
            <param name="end">The upper exclusive bound of the stream.</param>
            <param name="step">The increment used from <paramref name="start"/> to <paramref name="end"/>.</param>
            <returns>A stream of decimal from [<paramref name="start"/>, <paramref name="end"/>).</returns>
        </member>
        <member name="T:Sasa.Quad`4">
            <summary>
            A 4-element tuple type.
            </summary>
            <typeparam name="T0">The type of the first value.</typeparam>
            <typeparam name="T1">The type of the second value.</typeparam>
            <typeparam name="T2">The type of the third value.</typeparam>
            <typeparam name="T3">The type of the fourth value.</typeparam>
        </member>
        <member name="M:Sasa.Quad`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Construct a new Quad.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
            <param name="fourth">The fourth value.</param>
        </member>
        <member name="M:Sasa.Quad`4.Bind(`0@,`1@,`2@,`3@)">
            <summary>
            Bind all tuple elements to locals.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="third">The third value.</param>
            <param name="fourth">The fourth value.</param>
        </member>
        <member name="M:Sasa.Quad`4.Equals(Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Test equality of Quads element-wise.
            </summary>
            <param name="other">The other Quad to compare for equality.</param>
            <returns>True if the Quad instances match, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.Equals(System.Object)">
            <summary>
            Test equality.
            </summary>
            <param name="obj">Object to compare for equality.</param>
            <returns>True if the objects match, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.GetHashCode">
            <summary>
            Generate a hash code.
            </summary>
            <returns>The hash of the encapsulated values.</returns>
        </member>
        <member name="M:Sasa.Quad`4.CompareTo(Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Compare the two values, testing sequentially, Quad.First, Quad.Second
            Quad.Third, and Quad.Fourth for any values that can specify an 
            ordering.
            </summary>
            <param name="other">The Quad to compare against.</param>
            <returns>The ordering compares sequentially Quad.First, Quad.Second,
            Quad.Third and Quad.Fourth until it finds an entry that ensures an
            total order.</returns>
        </member>
        <member name="M:Sasa.Quad`4.ToString">
            <summary>
            Return a string representation of this Quad.
            </summary>
            <returns>A string representation of this Quad.</returns>
        </member>
        <member name="M:Sasa.Quad`4.op_Equality(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Compares two Quads for equality.
            </summary>
            <param name="left">The first Quad.</param>
            <param name="right">The second Quad.</param>
            <returns>Returns true if the Quads are equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.op_Inequality(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Compares two Quads for inequality.
            </summary>
            <param name="left">The first Quad.</param>
            <param name="right">The second Quad.</param>
            <returns>Returns true if the Quads are not equal, and false otherwise.</returns>
        </member>
        <member name="M:Sasa.Quad`4.op_LessThan(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Orders two pairs.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            Returns zero if the tuples are equal, a number greater than zero if <paramref name="left"/> is
            greater than <paramref name="right"/>, else a number less than zero.
            </returns>
        </member>
        <member name="M:Sasa.Quad`4.op_GreaterThan(Sasa.Quad{`0,`1,`2,`3},Sasa.Quad{`0,`1,`2,`3})">
            <summary>
            Orders two tuples.
            </summary>
            <param name="left">The first tuple.</param>
            <param name="right">The second tuple.</param>
            <returns>
            Returns zero if the tuples are equal, a number greater than zero if <paramref name="left"/> is
            greater than <paramref name="right"/>, else a number less than zero.
            </returns>
        </member>
        <member name="P:Sasa.Quad`4.First">
            <summary>
            First element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Quad`4.Second">
            <summary>
            Second element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Quad`4.Third">
            <summary>
            Third element of the tuple.
            </summary>
        </member>
        <member name="P:Sasa.Quad`4.Fourth">
            <summary>
            Fourth element of the tuple.
            </summary>
        </member>
        <member name="T:Sasa.Option`1">
            <summary>
            Represents a possibly null value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <remarks>
            When it comes to high assurance code, you should utilize Option and NonNull types for
            method arguments, to declare which arguments may be null and which must necessarily be
            non-null. The type checker will ensure that values are handled properly within the method,
            and client code will receive the errors when passing in null references for NonNull values.
            </remarks>
        </member>
        <member name="M:Sasa.Option`1.#ctor(`0)">
            <summary>
            Construct an optional value.
            </summary>
            <param name="value">The wrapped value.</param>
        </member>
        <member name="M:Sasa.Option`1.Equals(`0)">
            <summary>
            Compares Option&lt;T&gt; and a T for equality.
            </summary>
            <param name="other">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.Equals(Sasa.Option{`0})">
            <summary>
            Compares two Option&lt;T&gt; instances for equality.
            </summary>
            <param name="other">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Sasa.Option`1.TryGetValue(`0@)">
            <summary>
            Attempts to extract the value.
            </summary>
            <param name="value">The value extracted.</param>
            <returns>Returns true if a value was available, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Implicit(`0)~Sasa.Option{`0}">
            <summary>
            An implicit conversion from any value to an optional value.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>Returns a wrapped optional reference.</returns>
        </member>
        <member name="M:Sasa.Option`1.ToString">
            <summary>
            Return a string representation.
            </summary>
            <returns>A string representation of the optional value.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Equality(Sasa.Option{`0},Sasa.Option{`0})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Inequality(Sasa.Option{`0},Sasa.Option{`0})">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Equality(Sasa.Option{`0},`0)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Inequality(Sasa.Option{`0},`0)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Equality(`0,Sasa.Option{`0})">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:Sasa.Option`1.op_Inequality(`0,Sasa.Option{`0})">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The left comparand.</param>
            <param name="right">The right comparand.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="P:Sasa.Option`1.Value">
            <summary>
            The wrapped value.
            </summary>
        </member>
        <member name="P:Sasa.Option`1.HasValue">
            <summary>
            Returns true if there is a value.
            </summary>
            <returns>True if not null.</returns>
        </member>
        <member name="P:Sasa.Option`1.None">
            <summary>
            An empty option value.
            </summary>
        </member>
        <member name="T:Sasa.Option">
            <summary>
            Option operations.
            </summary>
            <remarks>
            This class provides all the LINQ overloads needed to transparently work
            with System.Nullable&lt;T&gt; and Option&lt;&gt; in LINQ computations.
            </remarks>
        </member>
        <member name="M:Sasa.Option.ToOption``1(``0)">
            <summary>
            Construct a new optional value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="value">The value to track.</param>
            <returns></returns>
        </member>
        <member name="M:Sasa.Option.ToOption``1(System.Nullable{``0})">
            <summary>
            Construct a new optional value.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="value">A nullable value.</param>
            <returns></returns>
        </member>
        <member name="M:Sasa.Option.ToNullable``1(Sasa.Option{``0})">
            <summary>
            Construct a Nullable value type given an option type.
            </summary>
            <typeparam name="T">The nullable type.</typeparam>
            <param name="option">The optional value.</param>
            <returns>A new nullable value.</returns>
        </member>
        <member name="M:Sasa.Option.Select``2(Sasa.Option{``0},System.Func{``0,``1})">
            <summary>
            Transforms the embedded value to a new value if it exists, otherwise
            returns None.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="R">The type of the returned optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to apply if <paramref name="option"/> has a value.</param>
            <returns>
            Returns <paramref name="some"/>(<paramref name="option"/>) if <code>o.HasValue</code>
            is true, or <code>new Option(default(R))</code> otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Option.Select``2(System.Nullable{``0},System.Func{``0,``1})">
            <summary>
            Transforms the embedded value to a new value if it exists, otherwise
            returns None.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="R">The type of the returned optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to apply if <paramref name="option"/> has a value.</param>
            <returns>
            Returns <paramref name="some"/>(<paramref name="option"/>) if <code>o.HasValue</code>
            is true, or <code>new Option(default(R))</code> otherwise.
            </returns>
        </member>
        <member name="M:Sasa.Option.Select``2(Sasa.Option{``0},System.Func{``0,``1},``1)">
            <summary>
            Performs a total match on the optional value and returns a new value.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
            <typeparam name="R">The type of the returned value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to call with the encapsulated value.</param>
            <param name="none">The return value if optional value is None.</param>
            <returns>A value computed from the given functions.</returns>
        </member>
        <member name="M:Sasa.Option.Select``2(Sasa.Option{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Performs a total match on the optional value and returns a new value.
            </summary>
            <typeparam name="T">The type of the encapsulated value.</typeparam>
            <typeparam name="R">The type of the returned value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="some">The function to call with the encapsulated value.</param>
            <param name="none">The function to call if no value available.</param>
            <returns>A value computed from the given functions.</returns>
        </member>
        <member name="M:Sasa.Option.Select``1(Sasa.Option{``0},``0)">
            <summary>
            Returns the encapsulated value if Some, returns 'none' otherwise.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="none">The value to return if o.IsNone.</param>
            <returns>The value encapsulated in the option if <code>o.HasValue</code> is true,
            <paramref name="none"/> otherwise.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(Sasa.Option{``0},System.Func{``0,Sasa.Option{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T">The type of the original value.</typeparam>
            <typeparam name="U">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(Sasa.Option{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T">The type of the original value.</typeparam>
            <typeparam name="U">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(System.Nullable{``0},System.Func{``0,Sasa.Option{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T">The type of the original value.</typeparam>
            <typeparam name="U">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``2(System.Nullable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Project an optional value to another optional value.
            </summary>
            <typeparam name="T">The type of the original value.</typeparam>
            <typeparam name="U">The type of the projected value.</typeparam>
            <param name="option">The original optional instance.</param>
            <param name="selector">The projection function.</param>
            <returns>A new optional value computed from the original.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(Sasa.Option{``0},System.Func{``0,Sasa.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T">The type of the first value.</typeparam>
            <typeparam name="U">The type of the second value.</typeparam>
            <typeparam name="R">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(System.Nullable{``0},System.Func{``0,Sasa.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T">The type of the first value.</typeparam>
            <typeparam name="U">The type of the second value.</typeparam>
            <typeparam name="R">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(Sasa.Option{``0},System.Func{``0,System.Nullable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T">The type of the first value.</typeparam>
            <typeparam name="U">The type of the second value.</typeparam>
            <typeparam name="R">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
        </member>
        <member name="M:Sasa.Option.SelectMany``3(System.Nullable{``0},System.Func{``0,System.Nullable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects two optional values to a third value.
            </summary>
            <typeparam name="T">The type of the first value.</typeparam>
            <typeparam name="U">The type of the second value.</typeparam>
            <typeparam name="R">The type of the projected value.</typeparam>
            <param name="option">The optional type.</param>
            <param name="selector">The intermediate projection function.</param>
            <param name="result">The final projection function.</param>
            <returns>The returned optional value.</returns>
        </member>
        <member name="M:Sasa.Option.Do``1(Sasa.Option{``0},System.Action{``0})">
            <summary>
            Performs the given action on the embedded value if it exists.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="option">The optional value.</param>
            <param name="action">The function to apply.</param>
        </member>
        <member name="T:Sasa.Func.Func">
            <summary>
            Typed delegate extension methods.
            </summary>
        </member>
        <member name="M:Sasa.Func.Func.Id``1(``0)">
            <summary>
            The identity function.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="value">The value to return.</param>
            <returns>Simply returns <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Fix``2(System.Func{System.Func{``0,``1},System.Func{``0,``1}})">
            <summary>
            Compute the fixpoint of a given function.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <typeparam name="R">The return type.</typeparam>
            <param name="f">The function describing the body of the recursive function.</param>
            <returns>A recursive definition of the given function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Fix``3(System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})">
            <summary>
            Compute the fixpoint of a given function.
            </summary>
            <typeparam name="T">The first argument type.</typeparam>
            <typeparam name="U">The second argument type.</typeparam>
            <typeparam name="R">The return type.</typeparam>
            <param name="f">The function describing the body of the recursive function.</param>
            <returns>A recursive definition of the given function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Const``2(``1)">
            <summary>
            Constructs a function that simply returns a constant value.
            </summary>
            <typeparam name="TInput">The type of input value.</typeparam>
            <typeparam name="TConst">The type of return value.</typeparam>
            <param name="value">The value to return.</param>
            <returns>Simply returns <paramref name="value"/>.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Tuple``3(System.Func{``0,``1,``2})">
            <summary>
            Lift a multi-arg function to a single-arg function that takes a pair.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="R">The type of the return value.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Tuple``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Lift a multi-arg function to a single-arg function that takes a triple.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <typeparam name="R">The type of the return value.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Tuple``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Lift a multi-arg function to a single-arg function that takes a quad.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <typeparam name="Q">The type of the fourth argument.</typeparam>
            <typeparam name="R">The type of the return value.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Tuple``2(System.Action{``0,``1})">
            <summary>
            Lift a multi-arg function to a single-arg function that takes a pair.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Tuple``3(System.Action{``0,``1,``2})">
            <summary>
            Lift a multi-arg function to a single-arg function that takes a triple.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Tuple``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Lift a multi-arg function to a single-arg function that takes a quad.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <typeparam name="Q">The type of the fourth argument.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Curry``3(System.Func{``0,``1,``2})">
            <summary>
            Lift a multi-arg function to a single-arg curried function.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="R">The type of the return value.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Lift a multi-arg function to a single-arg curried function.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <typeparam name="R">The type of the return value.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Lift a multi-arg function to a single-arg curried function.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <typeparam name="Q">The type of the fourth argument.</typeparam>
            <typeparam name="R">The type of the return value.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Curry``2(System.Action{``0,``1})">
            <summary>
            Lift a multi-arg function to a single-arg curried function.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Curry``3(System.Action{``0,``1,``2})">
            <summary>
            Lift a multi-arg function to a single-arg curried function.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Curry``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Lift a multi-arg function to a single-arg curried function.
            </summary>
            <typeparam name="T">The type of the first argument.</typeparam>
            <typeparam name="U">The type of the second argument.</typeparam>
            <typeparam name="V">The type of the third argument.</typeparam>
            <typeparam name="Q">The type of the fourth argument.</typeparam>
            <param name="fn">The function to curry.</param>
            <returns>A curried function.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Empty``1(System.Action)">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <param name="fn">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Empty``1(System.Action{``0})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="fn">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Empty``2(System.Action{``0,``1})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="fn">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Empty``3(System.Action{``0,``1,``2})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="fn">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Empty``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Wraps an action that returns void into a function that returns Empty.
            </summary>
            <param name="fn">The delegate to wrap.</param>
            <returns>A new delegate that returns Empty on invocation.</returns>
        </member>
        <member name="M:Sasa.Func.Func.Coerce``1(System.Delegate)">
            <summary>
            Coerces one delegate type to another.
            </summary>
            <typeparam name="TFunc">The return delegate type</typeparam>
            <param name="func">The source delegate to coerce.</param>
            <returns>A new delegate of the expected type.</returns>
            <remarks>
            Inspired by:
            http://jacobcarpenters.blogspot.com/2006/06/cast-delegate.html
            </remarks>
        </member>
        <member name="T:Sasa.Enum.Enums">
            <summary>
            Extensions for System.Enum.
            </summary>
        </member>
        <member name="M:Sasa.Enum.Enums.ToEnum``1(System.String)">
            <summary>
            Parses an enumeration value from the string representation.
            </summary>
            <typeparam name="E">The type of the enum.</typeparam>
            <param name="e">The string representation of the enum.</param>
            <returns>The enum corresponding to the string representation.</returns>
        </member>
        <member name="M:Sasa.Enum.Enums.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Parses an enumeration value from the string representation.
            </summary>
            <typeparam name="E">The type of the enum.</typeparam>
            <param name="e">The string representation of the enum.</param>
            <param name="ignoreCase">Indicates whether the parse is case-sensitive.</param>
            <returns>The enum corresponding to the string representation.</returns>
        </member>
        <member name="M:Sasa.Enum.Enums.IsDefined``1(``0)">
            <summary>
            Returns true if the value is valid for the given enum type.
            </summary>
            <typeparam name="E">The type of the enum.</typeparam>
            <param name="e">The enum value to test.</param>
            <returns>Returns true if the value is valid for the enum.</returns>
        </member>
        <member name="M:Sasa.Enum.Enums.Values``1">
            <summary>
            Retrieves a sequence of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="E">An enumeration type.</typeparam>
            <returns>A typed sequence of the enumeration constants.</returns>
        </member>
        <member name="M:Sasa.Enum.Enums.Names``1">
            <summary>
            Retrieves a sequence of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="E">An enumeration type.</typeparam>
            <returns>A sequence of the string representations of the enumeration constants.</returns>
        </member>
        <member name="M:Sasa.Enum.Enums.TryParse``1(System.String,``0@)">
            <summary>
            Attempt to parse the given string as an enum.
            </summary>
            <typeparam name="E">The type of the enum.</typeparam>
            <param name="enumString">The string representation of the num.</param>
            <param name="enumValue">The enum corresponding to the string representation if
            successful, or the default value otherwise.</param>
            <returns>True if the parse succeeded, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Enum.Enums.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Attempt to parse the given string as an enum.
            </summary>
            <typeparam name="E">The type of the enum.</typeparam>
            <param name="enumString">The string representation of the num.</param>
            <param name="ignoreCase">Indicates whether the parse is case-sensitive.</param>
            <param name="enumValue">The enum corresponding to the string representation if
            successful, or the default value otherwise.</param>
            <returns>True if the parse succeeded, false otherwise.</returns>
        </member>
        <member name="T:Sasa.Enum.Enums.Cell`1">
            <summary>
            Caches the enum values array.
            </summary>
            <typeparam name="E">The type of the enum.</typeparam>
        </member>
        <member name="T:Sasa.Collections.Dictionaries">
            <summary>
            Useful extensions to <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.FindOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value named by 'key', or inserts 'otherwise' into the dictionary and returns that.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="d">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="otherwise">The value to insert and return if the key is not in the dictionary.</param>
            <returns>d[key] if d contains key, and if not, it inserts (key, otherwise), and returns otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.InsertIfDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds the value to the dictionary if it does not already exist.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="d">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="value">The value to insert.</param>
            <returns>True if the item was inserted, false if the key already exists.</returns>
        </member>
        <member name="M:Sasa.Collections.Dictionaries.FindOrOtherwise``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value named by 'key', or if no such entry exists, returns 'otherwise'.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="d">The dictionary.</param>
            <param name="key">The dictionary key.</param>
            <param name="otherwise">The value to insert and return if the key is not in the dictionary.</param>
            <returns>Returns d[key] if it exists, or otherwise if it does not.</returns>
        </member>
        <member name="T:Sasa.Linq.Zips">
            <summary>
            Zip functions merge streams of values together into tuples.
            </summary>
        </member>
        <member name="M:Sasa.Linq.Zips.ZipWith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Zip two streams to a user-defined type.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="R">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.ZipWith``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Zip three streams to a user-defined type.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="R">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.ZipWith``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Zip four streams to a user-defined type.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <typeparam name="R">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <param name="fourth">The fourth stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Pair the elements of two streams.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Zip the elements of three streams.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Zip the elements of four streams.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <param name="fourth">The fourth stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``3(System.Collections.Generic.IEnumerable{Sasa.Pair{``0,``1}},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Zip a paired stream with a third stream.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``4(System.Collections.Generic.IEnumerable{Sasa.Pair{``0,``1}},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Zip a paired stream with two more streams.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="third">The third stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``4(System.Collections.Generic.IEnumerable{Sasa.Triple{``0,``1,``2}},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Zip a three element stream with a fourth stream.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.Zip``4(System.Collections.Generic.IEnumerable{Sasa.Pair{``0,``1}},System.Collections.Generic.IEnumerable{Sasa.Pair{``2,``3}})">
            <summary>
            Zip two paired streams.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <returns>A stream of tupled values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.ZipWith``5(System.Collections.Generic.IEnumerable{Sasa.Pair{``0,``1}},System.Collections.Generic.IEnumerable{Sasa.Pair{``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Zip two paired streams.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <typeparam name="R">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.ZipWith``4(System.Collections.Generic.IEnumerable{Sasa.Pair{``0,``1}},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Zip a paired stream with a third stream.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="R">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
        <member name="M:Sasa.Linq.Zips.ZipWith``5(System.Collections.Generic.IEnumerable{Sasa.Triple{``0,``1,``2}},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Zip a three element stream with a fourth stream.
            </summary>
            <typeparam name="T">The type of the first stream.</typeparam>
            <typeparam name="U">The type of the second stream.</typeparam>
            <typeparam name="V">The type of the third stream.</typeparam>
            <typeparam name="Q">The type of the fourth stream.</typeparam>
            <typeparam name="R">The type of the returned stream.</typeparam>
            <param name="first">The first stream.</param>
            <param name="second">The second stream.</param>
            <param name="selector">The function mapping the given stream values into the return value.</param>
            <returns>A stream of return values.</returns>
        </member>
    </members>
</doc>
