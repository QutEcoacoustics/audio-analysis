<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sasa.Linq</name>
    </assembly>
    <members>
        <member name="T:Sasa.Linq.IdentityVisitor">
            <summary>
            A visitor that simply returns the expression as-is. Clients must simply override the
            nodes they wish to transform.
            </summary>
        </member>
        <member name="T:Sasa.Linq.ExpressionVisitor`1">
            <summary>
            An expression visitor base class. Each ExpressionType has a corresponding
            abstract method to ensure all node types are handled.
            </summary>
            <remarks>Base on mattwar's excellent series:
            http://blogs.msdn.com/mattwar/pages/linq-links.aspx</remarks>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Processes the given expression by dispatching to the appropriate expression handler.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Add(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic addition without overflow checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.AddChecked(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic addition with overflow checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.And(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a bitwise AND operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.AndAlso(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a short-circuiting conditional AND operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.ArrayLength(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents getting the length of a one-dimensional array.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.ArrayIndex(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents indexing into a one-dimensional array.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Call(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            A node that represents a method call.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Coalesce(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a null coalescing operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Conditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            A node that represents a conditional operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Constant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            A node that represents an expression that has a constant value.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Convert(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents a cast or conversion operation. If the operation is
            a numeric conversion, it overflows silently if the converted value does not
            fit the target type.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.ConvertChecked(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents a cast or conversion operation. If the operation is
            a numeric conversion, an exception is thrown if the converted value does
            not fit the target type.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Divide(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic division.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Equal(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents an equality comparison.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.ExclusiveOr(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a bitwise XOR operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.GreaterThan(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a "greater than" numeric comparison.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.GreaterThanOrEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a "greater than or equal" numeric comparison.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Invoke(System.Linq.Expressions.InvocationExpression)">
            <summary>
            A node that represents applying a delegate or lambda expression to a list
            of argument expressions.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Lambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            A node that represents a lambda expression.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.LeftShift(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a bitwise left-shift operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.LessThan(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a "less than" numeric comparison.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.LessThanOrEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a "less than or equal" numeric comparison.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.ListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            A node that represents creating a new System.Collections.IEnumerable object
            and initializing it from a list of elements.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.MemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            A node that represents reading from a field or property.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.MemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            A node that represents creating a new object and initializing one or more
            of its members.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Modulo(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents an arithmetic remainder operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Multiply(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic multiplication without overflow checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.MultiplyChecked(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic multiplication with overflow checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Negate(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents an arithmetic negation operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.UnaryPlus(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents a unary plus operation. The result of a predefined
            unary plus operation is simply the value of the operand, but user-defined
            implementations may have non-trivial results.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.NegateChecked(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents an arithmetic negation operation that has overflow
            checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.New(System.Linq.Expressions.NewExpression)">
            <summary>
            A node that represents calling a constructor to create a new object.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.NewArrayInit(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            A node that represents creating a new one-dimensional array and initializing
            it from a list of elements.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.NewArrayBounds(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            A node that represents creating a new array where the bounds for each dimension
            are specified.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Not(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents a bitwise complement operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.NotEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents an inequality comparison.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Or(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a bitwise OR operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.OrElse(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a short-circuiting conditional OR operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Parameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            A node that represents a reference to a parameter defined in the context
            of the expression.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Power(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents raising a number to a power.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Quote(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents an expression that has a constant value of type System.Linq.Expressions.Expression.
            A System.Linq.Expressions.ExpressionType.Quote node can contain references
            to parameters defined in the context of the expression it represents.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.RightShift(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents a bitwise right-shift operation.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.Subtract(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic subtraction without overflow checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.SubtractChecked(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A node that represents arithmetic subtraction with overflow checking.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.TypeAs(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A node that represents an explicit reference or boxing conversion where null
            is supplied if the conversion fails.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.ExpressionVisitor`1.TypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            A node that represents a type test.
            </summary>
            <param name="e">The expression to process.</param>
            <returns>The value computed from the expression.</returns>
        </member>
        <member name="T:Sasa.Linq.ErrorVisitor`1">
            <summary>
            A visitor that throws NotSupportedException for every node. Clients
            must simply override the nodes they do support.
            </summary>
        </member>
        <member name="T:Sasa.Linq.Queryable`1">
            <summary>
            A default Queryable implementation.
            </summary>
            <typeparam name="T">The type returned by the query.</typeparam>
            <remarks>Based on code provided by mattwar:
            http://blogs.msdn.com/mattwar/archive/2007/07/30/linq-building-an-iqueryable-provider-part-i.aspx</remarks>
        </member>
        <member name="M:Sasa.Linq.Queryable`1.#ctor(Sasa.Linq.QueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Construct a queryable object with the given provider and expression.
            </summary>
            <param name="provider">The query provider.</param>
            <param name="expression">The query expression.</param>
        </member>
        <member name="M:Sasa.Linq.Queryable`1.GetEnumerator">
            <summary>
            Execute the query and enumerate over the return values.
            </summary>
            <returns>An enumeration over the return values of the query.</returns>
        </member>
        <member name="P:Sasa.Linq.Queryable`1.Expression">
            <summary>
            The query expression.
            </summary>
        </member>
        <member name="P:Sasa.Linq.Queryable`1.ElementType">
            <summary>
            The return type of the query expression.
            </summary>
        </member>
        <member name="P:Sasa.Linq.Queryable`1.Provider">
            <summary>
            The query provider.
            </summary>
        </member>
        <member name="T:Sasa.Linq.QueryProvider">
            <summary>
            A base query provider which implements much of the common functionality.
            </summary>
        </member>
        <member name="M:Sasa.Linq.QueryProvider.ToString(System.Linq.Expressions.Expression)">
            <summary>
            Return the expression as a string.
            </summary>
            <param name="expression">The expression to convert.</param>
            <returns>A string representation of the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Execute the expression and return the given object type.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="expression">The expression to execute.</param>
            <returns>The value returned from executing the expression.</returns>
        </member>
        <member name="M:Sasa.Linq.QueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Create a typed IQueryable for this provider.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="expression">The expression to execute used to construct the query.</param>
            <returns>A query returning a value of type T.</returns>
        </member>
    </members>
</doc>
