<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            A basic implementation of ICommand that wraps a method that takes no parameters or a method that takes one parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
            <remarks>Use this constructor to provide an action that ignores the ICommand parameter.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> class.
            </summary>
            <param name="objectAction">An action that takes an object parameter.</param>
            <remarks>Use this constructor to provide an action that uses the object parameter passed by the Execute method.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute. Will not be fired by ActionCommand.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            An action that will change a specified property to a specified value when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
            <exception cref="T:System.ArgumentException">A property with <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> could not be found on the Target.</exception>
            <exception cref="T:System.ArgumentException">Could not set <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> to the value specified by <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Gets or sets the name of the property to change. This is a dependency property.
            </summary>
            <value>The name of the property to change.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Gets or sets the value to set. This is a dependency property.
            </summary>
            <value>The value to set.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Gets or sets the duration of the animation that will occur when the ChangePropertyAction is invoked.  This is a dependency property.
            If the duration is unset, no animation will be applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Ease">
            <summary>
            Gets or sets the easing function to use with the animation when the ChangePropertyAction is invoked.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager is a custom VisualStateManager that can smooth out the animation of layout properties.
            With this custom VisualStateManager, states can include changes to properties like Grid.Column, can change element heights to or from Auto, and so on.
            These changes will be smoothed out over time using the GeneratedDuration and GeneratedEasingFunction of the appropriate transition.
            See the "VisualStateManager overrides" region below for a general description of the algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            A VisualStateGroup can use Fluid Layout or not.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.RuntimeVisibilityPropertyProperty">
            <summary>
            Visibility is shadowed by a custom attached property at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            A VisualStateGroup keeps a list of these original values in an attached property.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            For every state, the layout-specific properties get extracted and then are attached to the state. These properties are removed from the state itself.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Remember the current state.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            This is the set of elements that are currently in motion.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            This is the storyboard that is animating the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            This list contains all the known layout properties.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.PathToPropertyMap">
            <summary>
            Silverlight does not provide a direct means of getting a DependencyProperty from a PropertyPath, so this structure is used
            to locate tracked paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Stop the animation and replace the layout changes that were made to support that animation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Locate the transition that VisualStateManager will use to animate the change, so that the layout animation can match the duration and ease.
            </summary>
            <param name="group">The group in which the transition is taking place</param>
            <param name="previousState">The state that you are coming from</param>
            <param name="state">The state you are going to</param>
            <returns>The transition</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Remove all layout-affecting properties from the Storyboard for the state and cache them in an attached property.
            </summary>
            <param name="state">The state you are moving to</param>
            <returns>A Storyboard containing the layout properties in that state</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            The set of target elements is the set of all elements that might have moved in a layout transition. This set is the closure of:
             - Elements with layout properties animated in the state.
             - Siblings of elements in the set.
             - Parents of elements in the set.
             
            Subsequent code will check these rectangles both before and after the layout change.
            </summary>
            <param name="control">The control whose layout is changing state</param>
            <param name="layoutStoryboard">The storyboard containing the layout changes</param>
            <param name="originalValueRecords">Any previous values from previous state navigations that might be reverted</param>
            <param name="movingElements">The set of elements currently in motion, if there is a state change transition ongoing</param>
            <returns>The full set of elements whose layout may have changed</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Get a set of rectangles for all the elements in the target list.
            </summary>
            <param name="targets">The set of elements to consider</param>
            <param name="movingElements">The set of elements currently in motion</param>
            <returns>A Dictionary mapping elements to their rects</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Get the layout rectangle of an element, by getting the layout slot and then computing which portion of the slot is being used.
            </summary>
            <param name="element">The element whose rect we want to get</param>
            <returns>The layout rect of that element</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Get the opacities of elements at the time of the state change, instead of visibilities, because the state change may be in process and the current value is the most important.
            </summary>
            <param name="control">The control whose state is changing</param>
            <param name="layoutStoryboard">The storyboard with the layout properties</param>
            <param name="originalValueRecords">The set of original values</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Go through the layout Storyboard and set all the properties by using SetValue to enable calling UpdateLayout without
            ticking the timeline, which would cause a render.
            All values that are overwritten will be stored in the collection of OriginalValueRecords so that they can be replaced later.
            </summary>
            <param name="control">The control whose state is changing</param>
            <param name="layoutStoryboard">The storyboard holding the layout properties</param>
            <param name="originalValueRecords">The store of original values</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Take all the elements that will be moving as a result of the layout animation, and wrap them in Canvases so that
            they do not affect their sibling elements.
            </summary>
            <param name="movingElements">The set of elements that will be moving</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Take all the elements that have been moving as a result of the layout animation, and unwrap them from their Canvases.
            </summary>
            <param name="movingElements">The set of elements that have been moving</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Copy the layout properties from the source element to the target element, clearing them from the source.
            </summary>
            <param name="source">The source of the layout properties</param>
            <param name="target">The destination of the layout properties</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Create the actual storyboard that will be used to animate the transition. Use all previously calculated results.
            </summary>
            <param name="duration">The duration of the animation</param>
            <param name="ease">The easing function to be used in the animation</param>
            <param name="movingElements">The set of elements that will be moving</param>
            <param name="oldOpacities">The old opacities of the elements whose viisibility is changing</param>
            <returns>The storyboard</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord remembers the original value of a property that was changed in a state.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            This enumerated type indicates whether a FluidMoveBehavior applies to the element to which it is attached, or to the children of that element.
            "Self" is useful when there is a single element that should behave in a special manner; "Children" is useful when the same behavior should apply to all
            children of a WrapPanel or to the ItemsHost Panel of an ItemsControl.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Behavior that watches an element (or a set of elements) for layout changes, and moves the element smoothly to the new position when needed.
            This behavior does not animate the size or visibility of an element; it only animates the offset of that element within its parent container.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            DependencyProperty for the duration of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
            DependencyProperty for the scope of the behavior. See FluidMoveScope for more details.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
            DependencyProperty for the active state of the behavior.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseXProperty">
            <summary>
            DependencyProperty for the EasingFunction to use for the horizontal component of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseYProperty">
            <summary>
            DependencyProperty for the EasingFunction to use for the vertical component of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            The duration of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
            Indicates whether the behavior applies just to this element, or to all children of the element (if the element is a Panel).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
            Indicates whether the behavior is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseX">
            <summary>
            EasingFunction to use for the horizontal component of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseY">
            <summary>
            EasingFunction to use for the vertical component of the move.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            An action that will transition a FrameworkElement to a specified VisualState when invoked.
            </summary>
            <remarks>
            If the TargetName property is set, this action will attempt to change the state of the targeted element. If not, it walks
            the element tree in an attempt to locate an alternative target that defines states. ControlTemplate and UserControl are 
            two common possibilities.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Called when the target changes. If the TargetName property isn't set, this action has custom behavior.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">Could not locate an appropriate FrameworkElement with states.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action is invoked.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">Could not change the target to the specified StateName.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Whether or not to use a VisualTransition to transition between states.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            The name of the VisualState.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.HyperlinkAction">
            <summary>
            An action that will navigate to a given hyperlink.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.HyperlinkAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action is invoked.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.HyperlinkAction.NavigateUri">
            <summary>
            The Uri of the page to open.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.HyperlinkAction.TargetWindow">
            <summary>
            The name of the window or tab in which NavigateUri should be opened. 
            </summary>
            <remarks>
            Several values have special meanings: "_blank" will load in a new browser window, "_parent" will attempt to 
            load in the parent frame, and "_self" will target the current page or frame. 
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            A Trigger that is triggered by a keyboard event.  If the target Key and Modifiers are detected, it fires.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            The Key that must be pressed for the Trigger to fire.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            The Modifiers that must be active for the Trigger to fire (the default is no modifiers pressed).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Whether to listen to the KeyDown or KeyUp event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Repositions the attached element in response to mouse drag gestures on the element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            DependencyProperty for the X position of the dragged element, relative to the left of the root element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            DependencyProperty for the Y position of the dragged element, relative to the top of the root element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            DependencyProperty for the ConstrainToParentBounds property. If true, the dragged element will be constrained to stay within the bounds of its parent container.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Attempts to update the position of the associated element to the specified coordinates.
            </summary>
            <param name="point">The desired position of the element in root coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Applies a relative position translation to the associated element.
            </summary>
            <param name="x">The X component of the desired translation in root coordinates.</param>
            <param name="y">The Y component of the desired translation in root coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Applies the given translation to the RenderTransform of the associated element.
            </summary>
            <param name="x">The X component of the translation in parent coordinates.</param>
            <param name="y">The Y component of the translation in parent coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Updates the X and Y properties based on the current rendered position of the associated element.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
            Determines whether the given cursor position should count as part of the drag operation.
            </summary>
            <param name="currentPosition">The cursor position.</param>
            <returns>
            	<c>true</c> if the provided position should count as part of the drag operation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Check if one Rect is contained by another.
            </summary>
            <param name="rect1">The containing Rect.</param>
            <param name="rect2">The contained Rect.</param>
            <returns><c>true</c> if rect1 contains rect2; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Transforms as vector.
            </summary>
            <param name="transform">The transform.</param>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <returns>A Point containing the values of X and Y transformed by transform as a Vector.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Gets the transform offset.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The offset of the transform.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Called when the behavior is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Occurs when a drag gesture is initiated.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Occurs when a drag gesture update is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Occurs when a drag gesture is finished.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Gets or sets the X position of the dragged element, relative to the left of the root element. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Gets or sets the Y position of the dragged element, relative to the top of the root element. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Gets or sets a value indicating whether the dragged element is constrained to stay within the bounds of its parent container. This is a dependency property.
            </summary>
            <value>
            	<c>true</c> if the dragged element should be constrained to its parents bounds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Gets the on-screen position of the associated element in root coordinates.
            </summary>
            <value>The on-screen position of the associated element in root coordinates.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Gets the element bounds in element coordinates.
            </summary>
            <value>The element bounds in element coordinates.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Gets the parent element of the associated object.
            </summary>
            <value>The parent element of the associated object.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Gets the root element of the scene in which the associated object is located.
            </summary>
            <value>The root element of the scene in which the associated object is located.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            An Action that will play a sound to completion.
            </summary>
            <remarks>
            This Action is intended for use with short sound effects that don't need to be stopped or controlled. If you're trying 
            to create a music player or game, it may not meet your needs.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            When the Action is invoked, this method is used to customize the dynamically created MediaElement.
            </summary>
            <remarks>
            This method may be useful for Action authors who wish to extend PlaySoundAction. If you wanted to control the 
            MediaElement Balance property, you could inherit from PlaySoundAction and override this method.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria are met and the action should be invoked. 
            </summary>
            <remarks>
            Each invocation of the Action plays a new sound.  Although the implementation is subject-to-change, the caller should 
            anticipate that this will create a new MediaElement, which will be cleaned up when the sound completes or if the media 
            fails to play.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            A Uri defining the location of the sound file.  This is used to set the source property of the MediaElement. This is a dependency property.
            </summary>
            <remarks>
            The sound can be any file format supported by MediaElement.  In the case of a video, it will only play the
            audio portion.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Control the volume of the sound.  This is used to set the Volume property of the MediaElement.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            An Action that will remove the targeted element from the tree when invoked.
            </summary>
            <remarks>
            This Action may fail. The Action understands how to remove elements from common parents but not from custom collections or direct manipulation
            of the visual tree.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            An abstract class that provides the ability to target a Storyboard.
            </summary>
            <remarks>
            For Action authors, this class provides a standard way to target a Storyboard.  Design tools may choose to provide a 
            special editing experience for classes that inherit from this Action, thereby improving the designer experience. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the Storyboard property is changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            The targeted Storyboard.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            An action that will change the state of a targeted storyboard when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action should be invoked. This method will attempt to 
            change the targeted storyboard in a way defined by the ControlStoryboardOption.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            An abstract class that provides the ability to target a Storyboard.
            </summary>
            <remarks>
            For Trigger authors, this class provides a standard way to target a Storyboard.  Design tools may choose to provide a 
            special editing experience for classes that inherit from this Trigger, thereby improving the designer experience. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the Storyboard property is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            The targeted Storyboard.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            A trigger that listens for the completion of a Storyboard.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            A Trigger that is triggered by a specified event occurring on its source and fires after a delay when that event is fired.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Gets or sets the number of milliseconds to wait between ticks. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Gets or sets the total number of ticks to be fired before the Trigger is finished.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.ExceptionStringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find a property named &quot;{0}&quot; on type &quot;{1}.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot assign value of type &quot;{0}&quot; to property &quot;{1}&quot; of type &quot;{2}&quot;. The &quot;{1}&quot; property can be assigned only values of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Looks up a localized string similar to Property &quot;{0}&quot; defined by type &quot;{1}&quot; does not expose a set method and therefore cannot be modified..
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
              Looks up a localized string similar to Could not change state of target {0} to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Looks up a localized string similar to Target {0} does not define any VisualStateGroups. .
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Looks up a localized string similar to The target of the RemoveElementAction is not supported..
            </summary>
        </member>
    </members>
</doc>
