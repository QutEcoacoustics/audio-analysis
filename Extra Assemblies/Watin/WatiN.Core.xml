<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WatiN.Core</name>
    </assembly>
    <members>
        <member name="T:WatiN.Core.SimpleTimer">
             <summary>
             This class provides a simple way to handle loops that have to time out after 
             a specified number of seconds.
             </summary>
             <example>
             This is an example how you could use this class in your code.
             <code>
             // timer should elapse after 30 seconds
             SimpleTimer timeoutTimer = new SimpleTimer(30);
            
             do
             {
               // Your check logic goes here
               
               // wait 200 miliseconds
               Thread.Sleep(200);
             } while (!timeoutTimer.Elapsed);
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.SimpleTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SimpleTimer"/> class.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:WatiN.Core.SimpleTimer.Elapsed">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.SimpleTimer"/> is elapsed.
            </summary>
            <value><c>true</c> if elapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.SimpleTimer.Timeout">
            <summary>
            The number of seconds after which this timer times out. The time out can only be
            set through the constructor.
            </summary>
        </member>
        <member name="T:WatiN.Core.TextFieldCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TextField"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.BaseElementCollection">
            <summary>
            This class is mainly used by Watin internally as the base class for all 
            of the element collections.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IBaseElementCollection.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder,WatiN.Core.CreateElementInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
            <param name="createElementInstance">The create element instance.</param>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList,WatiN.Core.CreateElementInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
            <param name="createElementInstance">The create element instance.</param>
        </member>
        <member name="M:WatiN.Core.BaseElementCollection.GetEnumerator">
            <exclude />
        </member>
        <member name="P:WatiN.Core.BaseElementCollection.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:WatiN.Core.BaseElementCollection.Enumerator">
            <exclude />
        </member>
        <member name="M:WatiN.Core.BaseElementCollection.Enumerator.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList,WatiN.Core.CreateElementInstance)">
            <exclude />
        </member>
        <member name="M:WatiN.Core.BaseElementCollection.Enumerator.Reset">
            <exclude />
        </member>
        <member name="M:WatiN.Core.BaseElementCollection.Enumerator.MoveNext">
            <exclude />
        </member>
        <member name="P:WatiN.Core.BaseElementCollection.Enumerator.Current">
            <exclude />
        </member>
        <member name="P:WatiN.Core.BaseElementCollection.Enumerator.System#Collections#IEnumerator#Current">
            <exclude />
        </member>
        <member name="P:WatiN.Core.Interfaces.ITextFieldCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.TextField"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.TextFieldCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TextFieldCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TextFieldCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TextFieldCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.TextFieldCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.TextField"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.RadioButton">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            radio.
            </summary>
        </member>
        <member name="T:WatiN.Core.RadioCheck">
            <summary>
            Base class for <see cref="T:WatiN.Core.CheckBox"/> and <see cref="T:WatiN.Core.RadioButton"/> provides
            support for common functionality.
            </summary>
        </member>
        <member name="T:WatiN.Core.Element">
            <summary>
            This is the base class for all other element types in this project, like
            Button, Checkbox etc.. It provides common functionality to all these elements
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElement.Focus">
            <summary>
            Gives the element focus.
            </summary>
            <exception cref="T:WatiN.Core.Exceptions.ElementDisabledException">if the element is disabled and can not recieve focus.</exception>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElement.GetAttributeValue(System.String)">
            <summary>
            Gets the value of the attribute
            </summary>
            <param name="attributeName">The attribute name</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElement.Click">
            <summary>
            Clicks this element and waits till the event is completely finished (page is loaded 
            and ready) .
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WatiN.Core.Interfaces.IElement.FireEvent(System.String)" -->
        <member name="M:WatiN.Core.Interfaces.IElement.FireEventNoWait(System.String)">
            <summary>
            Only fires the specified <paramref name="eventName"/> on this element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.ClassName">
            <summary>
            Gets the name of the element's css class.
            </summary>
            <value>The name of the element's class.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.Text">
            <summary>
            Gets the innertext of this element (and the innertext of all the elements contained
            in this element).
            </summary>
            <value>The inner text of this element</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.Title">
            <summary>
            Gets the title of the element.
            </summary>
            <value>The title of this element.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.InnerHtml">
            <summary>
            Gets the inner HTML of the element.
            </summary>
            <value>The inner HTML of the element.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.Exists">
            <summary>
            Does the HTML element exists.
            </summary>
            <value>True if the HTML element exists, otherwise false.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.Parent">
            <summary>
            Gets the parent element of this element.
            If the parent type is known you can cast it to that type.
            </summary>
            <value>The parent.</value>
            <example>
            The following example shows you how to use the parent property.
            Assume your web page contains a bit of html that looks something
            like this:
            
            div
              a id="watinlink" href="http://watin.sourceforge.net" /
              a href="http://sourceforge.net/projects/watin" /
            /div
            div
              a id="watinfixturelink" href="http://watinfixture.sourceforge.net" /
              a href="http://sourceforge.net/projects/watinfixture" /
            /div
            Now you want to click on the second link of the watin project. Using the 
            parent property the code to do this would be:
            
            <code>
            Div watinDiv = (Div) ie.Link("watinlink").Parent;
            watinDiv.Links[1].Click();
            </code>
            </example>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.NextSibling">
            <summary>
            Gets the next sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The next sibling.</value>		
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.PreviousSibling">
            <summary>
            Gets the previous sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The previous sibling.</value>		
        </member>
        <member name="P:WatiN.Core.Interfaces.IElement.TagName">
            <summary>
            Gets the tag name of this element.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="M:WatiN.Core.Element.#ctor(WatiN.Core.DomContainer,System.Object)">
            <summary>
            This constructor is mainly used from within WatiN.
            </summary>
            <param name="domContainer"><see cref="P:WatiN.Core.Element.DomContainer"/> this element is located in</param>
            <param name="element">The element</param>
        </member>
        <member name="M:WatiN.Core.Element.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            This constructor is mainly used from within WatiN.
            </summary>
            <param name="domContainer"><see cref="P:WatiN.Core.Element.DomContainer"/> this element is located in</param>
            <param name="elementFinder">The element finder.</param>
        </member>
        <member name="M:WatiN.Core.Element.#ctor(WatiN.Core.Element,System.Collections.ArrayList)">
            <summary>
            This constructor is mainly used from within WatiN.
            </summary>
            <param name="element">The element.</param>
            <param name="elementTags">The element tags the element should match with.</param>
        </member>
        <member name="M:WatiN.Core.Element.GetAttributeValue(System.String)">
            <summary>
            This methode can be used if the attribute isn't available as a property of
            Element or a subclass of Element.
            </summary>
            <param name="attributeName">The attribute name. This could be different then named in
            the HTML. It should be the name of the property exposed by IE on it's element object.</param>
            <returns>The value of the attribute if available; otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="M:WatiN.Core.Element.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Element.Click">
            <summary>
            Clicks this element and waits till the event is completely finished (page is loaded 
            and ready) .
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.ClickNoWait">
            <summary>
            Clicks this instance and returns immediately. Use this method when you want to continue without waiting
            for the click event to be finished. Mostly used when a 
            HTMLDialog is displayed after clicking the element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Focus">
            <summary>
            Gives the (input) focus to this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.DoubleClick">
            <summary>
            Doubleclicks this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyDown">
            <summary>
            Does a keydown on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyDown(System.Char)">
            <summary>
            Does a keydown on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyPress">
            <summary>
            Does a keyspress on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyUp">
            <summary>
            Does a keyup on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.KeyUp(System.Char)">
            <summary>
            Does a keyup on this element.
            </summary>
            <param name="character">The character.</param>
        </member>
        <member name="M:WatiN.Core.Element.Blur">
            <summary>
            Fires the blur event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Change">
            <summary>
            Fires the change event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.MouseEnter">
            <summary>
            Fires the mouseenter event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.MouseDown">
            <summary>
            Fires the mousedown event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.MouseUp">
            <summary>
            Fires the mouseup event on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.FireEvent(System.String)">
            <summary>
            Fires the specified <paramref name="eventName"/> on this element
            and waits for it to complete.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:WatiN.Core.Element.FireEvent(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Fires the event. The <paramref name="eventProperties" /> collection
            can be used to set values of the event object in the browser to 
            full fill the needs of javascript attached to the event handler.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="eventProperties">The event properties that need to be set.</param>
        </member>
        <member name="M:WatiN.Core.Element.FireEventNoWait(System.String)">
            <summary>
            Only fires the specified <paramref name="eventName"/> on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Flash">
            <summary>
            Flashes this element 5 times.
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Flash(System.Int32)">
            <summary>
            Flashes this element the specified number of flashes.
            </summary>
            <param name="numberOfFlashes">The number of flashes.</param>
        </member>
        <member name="M:WatiN.Core.Element.Highlight(System.Boolean)">
            <summary>
            Highlights this element.
            </summary>
            <param name="doHighlight">if set to <c>true</c> the element is highlighted; otherwise it's not.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilExists">
            <summary>
            Waits until the element exists or will time out after 30 seconds.
            To change the default time out, set <see cref="P:WatiN.Core.IE.Settings.WaitUntilExistsTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilExists(System.Int32)">
            <summary>
            Waits until the element exists. Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="timeout">The timeout in seconds.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilRemoved">
            <summary>
            Waits until the element no longer exists or will time out after 30 seconds.
            To change the default time out, set <see cref="P:WatiN.Core.IE.Settings.WaitUntilExistsTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntilRemoved(System.Int32)">
            <summary>
            Waits until the element no longer exists. Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="timeout">The timeout in seconds.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.String)">
            <summary>
            Waits until the given <paramref name="attributename"/> matches <paramref name="expectedValue"/>.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.String,System.Int32)">
            <summary>
            Waits until the given <paramref name="attributename" /> matches <paramref name="expectedValue" />.
            Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Waits until the given <paramref name="attributename"/> matches <paramref name="expectedValue"/>.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(System.String,System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Waits until the given <paramref name="attributename" /> matches <paramref name="expectedValue" />.
            Wait will time out after <paramref name="timeout"/> seconds.
            </summary>
            <param name="attributename">The attributename.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Waits until the given <paramref name="constraint"/> matches.
            Wait will time out after <see cref="P:WatiN.Core.Settings.WaitUntilExistsTimeOut"/> seconds.
            </summary>
            <param name="constraint">The BaseConstraint.</param>
        </member>
        <member name="M:WatiN.Core.Element.WaitUntil(WatiN.Core.Constraints.BaseConstraint,System.Int32)">
            <summary>
            Waits until the given <paramref name="constraint" /> matches.
            </summary>
            <param name="constraint">The BaseConstraint.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:WatiN.Core.Element.Refresh">
            <summary>
            Call this method to make sure the cached reference to the html element on the web page
            is refreshed on the next call you make to a property or method of this element.
            When you want to check if an element still <see cref="P:WatiN.Core.Element.Exists"/> you don't need 
            to call the <see cref="M:WatiN.Core.Element.Refresh"/> method since <see cref="P:WatiN.Core.Element.Exists"/> calls it internally.
            </summary>
            <example>
            The following code shows in which situation you can make use of the refresh mode.
            The code selects an option of a selectlist and then checks if this option
            is selected.
            <code>
            SelectList select = ie.SelectList(id);
            
            // Lets assume calling Select causes a postback, 
            // which would invalidate the reference to the html selectlist.
            select.Select(val);
            
            // Refresh will clear the cached reference to the html selectlist.
            select.Refresh(); 
            
            // B.t.w. executing:
            // select = ie.SelectList(id); 
            // would have the same effect as calling: 
            // select.Refresh().
            
            // Assert against a freshly fetched reference to the html selectlist.
            Assert.AreEqual(val, select.SelectedItem);
            </code>
            If you need to use refresh on an element retrieved from a collection of elements you 
            need to rewrite your code a bit.
            <code>
            SelectList select = ie.Spans[1].SelectList(id);
            select.Refresh(); // this will not have the expected effect
            </code>
            Rewrite your code as follows:
            <code>
            SelectList select = ie.Span(Find.ByIndex(1)).SelectList(id);
            select.Refresh(); // this will have the expected effect
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.getElement">
            <summary>
            Calls <see cref="M:WatiN.Core.Element.Refresh"/> and returns the element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Element.WaitForComplete">
            <summary>
            Waits till the page load is complete. This should only be used on rare occasions
            because WatiN calls this function for you when it handles events (like Click etc..)
            To change the default time out, set <see cref="P:WatiN.Core.IE.Settings.WaitForCompleteTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor``1">
             <summary>
             Gets the closest ancestor of the specified type.
             </summary>
             <returns>An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor&lt;Div&gt;;
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor``1(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Gets the closest ancestor of the specified Type and constraint.
            </summary>
            <param name="findBy">The constraint to match with.</param>
            <returns>
            An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor&lt;Div&gt;(Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.Type)">
             <summary>
             Gets the closest ancestor of the specified type.
             </summary>
             <param name="ancestorType">The ancestorType.</param>
             <returns>An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor(typeof(Div));
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(WatiN.Core.Constraints.BaseConstraint)">
             <summary>
             Gets the closest ancestor of the specified AttributConstraint.
             </summary>
             <param name="findBy">The AttributConstraint to match with.</param>
             <returns>An Element. If no ancestor of ancestorType is found <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor(Find.ByText("First name"));
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.Type,WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Gets the closest ancestor of the specified Type and AttributConstraint.
            </summary>
            <param name="ancestorType">Type of the ancestor.</param>
            <param name="findBy">The AttributConstraint to match with.</param>
            <returns>
            An instance of the ancestorType. If no ancestor of ancestorType is found <code>null</code> is returned.
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor(typeof(Div), Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.String,WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Gets the closest ancestor of the specified Tag and AttributConstraint.
            </summary>
            <param name="tagName">The tag of the ancestor.</param>
            <param name="findBy">The AttributConstraint to match with.</param>
            <returns>
            <returns>An typed instance of the element matching the Tag and the AttributeConstriant.
            If no specific type is available, an element of type ElementContainer will be returned. 
            If there is no ancestor that matches Tag and BaseConstraint, <code>null</code> is returned.</returns>
            </returns>
            <example>
            The following example returns the Div a textfield is located in.
            <code>
            IE ie = new IE("http://www.example.com");
            Div mainDiv = ie.TextField("firstname").Ancestor("Div", Find.ByText("First name"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Element.Ancestor(System.String)">
             <summary>
             Gets the closest ancestor of the specified Tag.
             </summary>
             <param name="tagName">The tag of the ancestor.</param>
             <returns>An typed instance of the element matching the Tag. If no specific type is
             available, an element of type ElementContainer will be returned. 
             If there is no ancestor that matches Tag, <code>null</code> is returned.</returns>
            <example>
             The following example returns the Div a textfield is located in.
             <code>
             IE ie = new IE("http://www.example.com");
             Div mainDiv = ie.TextField("firstname").Ancestor("Div");
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.Element.ClassName">
            <summary>
            Gets the name of the stylesheet class assigned to this ellement (if any).
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:WatiN.Core.Element.Complete">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> is completely loaded.
            </summary>
            <value><c>true</c> if complete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Element.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Element.Id">
            <summary>
            Gets the id of this element as specified in the HTML.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:WatiN.Core.Element.Text">
            <summary>
            Gets the innertext of this element (and the innertext of all the elements contained
            in this element).
            </summary>
            <value>The innertext.</value>
        </member>
        <member name="P:WatiN.Core.Element.TextAfter">
            <summary>
            Returns the text displayed after this element when it's wrapped
            in a Label element; otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Element.TextBefore">
            <summary>
            Returns the text displayed before this element when it's wrapped
            in a Label element; otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Element.InnerHtml">
            <summary>
            Gets the inner HTML of this element.
            </summary>
            <value>The inner HTML.</value>
        </member>
        <member name="P:WatiN.Core.Element.OuterText">
            <summary>
            Gets the outer text.
            </summary>
            <value>The outer text.</value>
        </member>
        <member name="P:WatiN.Core.Element.OuterHtml">
            <summary>
            Gets the outer HTML.
            </summary>
            <value>The outer HTML.</value>
        </member>
        <member name="P:WatiN.Core.Element.TagName">
            <summary>
            Gets the tag name of this element.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:WatiN.Core.Element.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.Element.NextSibling">
            <summary>
            Gets the next sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The next sibling.</value>
        </member>
        <member name="P:WatiN.Core.Element.PreviousSibling">
            <summary>
            Gets the previous sibling of this element in the Dom of the HTML page.
            </summary>
            <value>The previous sibling.</value>
        </member>
        <member name="P:WatiN.Core.Element.Parent">
            <summary>
            Gets the parent element of this element.
            If the parent type is known you can cast it to that type.
            </summary>
            <value>The parent.</value>
            <example>
            The following example shows you how to use the parent property.
            Assume your web page contains a bit of html that looks something
            like this:
            
            div
              a id="watinlink" href="http://watin.sourceforge.net" /
              a href="http://sourceforge.net/projects/watin" /
            /div
            div
              a id="watinfixturelink" href="http://watinfixture.sourceforge.net" /
              a href="http://sourceforge.net/projects/watinfixture" /
            /div
            Now you want to click on the second link of the watin project. Using the 
            parent property the code to do this would be:
            
            <code>
            Div watinDiv = (Div) ie.Link("watinlink").Parent;
            watinDiv.Links[1].Click();
            </code>
            </example>
        </member>
        <member name="P:WatiN.Core.Element.DispHtmlBaseElement">
            <summary>
            Gets the DispHtmlBaseElement by casting <see cref="P:WatiN.Core.Element.HTMLElement"/>.
            </summary>
            <value>The DispHtmlBaseElement.</value>
        </member>
        <member name="P:WatiN.Core.Element.DomContainer">
            <summary>
            Gets the DOMcontainer for this element.
            </summary>
            <value>The DOM container.</value>
        </member>
        <member name="P:WatiN.Core.Element.HTMLElement">
            <summary>
            Gets the DOM HTML element for this instance as an object. Cast it to 
            the interface you need. Most of the time the object supports IHTMLELement, 
            IHTMLElement2 and IHTMLElement3 but you can also cast it to a more
            specific interface. You should reference the microsoft.MSHTML.dll 
            assembly to cast it to a valid type.
            </summary>
            <value>The DOM element.</value>
        </member>
        <member name="P:WatiN.Core.Element.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Element"/> exists.
            </summary>
            <value><c>true</c> if exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:WatiN.Core.RadioCheck.#ctor(WatiN.Core.Element,System.Collections.ArrayList)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.RadioCheck"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="elementTags">The element tags the element should match with.</param>
        </member>
        <member name="M:WatiN.Core.RadioButton.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.RadioButton"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableBodyCollection">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.ITableBodyCollection"/>
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.BaseElementCollection">
            <summary>
            The FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.IBaseElementCollection"/>
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.BaseElementCollection.clientPort">
            <summary>
             Client port used to communicate with the jssh server
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.BaseElementCollection.elementFinder">
            <summary>
            The FireFox element finder
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.BaseElementCollection.elements">
            <summary>
            Collection of FireFox elements
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.BaseElementCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:WatiN.Core.Mozilla.BaseElementCollection.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.BaseElementCollection.ClientPort">
            <summary>
            Gets the client port used to communicate with the jssh server.
            </summary>
            <value>The client port.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.BaseElementCollection.ElementFinder">
            <summary>
            The FireFox element finder
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableBodyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ITableBody"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableBodyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ITableBody"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Interfaces.IElementsContainerTemp">
            <summary>
            Temp. interface, will be removed and <see cref="T:WatiN.Core.Interfaces.IDocument"/> will use <see cref="T:WatiN.Core.Interfaces.IElementsContainer"/>
            when the implementation of <see cref="T:WatiN.Core.Mozilla.Document"/> supports all of the functionality.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Area(System.String)">
            <summary>
            Finds an area element using the specified id.
            </summary>
            <param name="id">The id of the area element being sought.</param>
            <returns>The area element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Area(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a area element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the area element being sought.</param>
            <returns>The area element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Area(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a area element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the area element being sought.</param>
            <returns>The area element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Button(System.String)">
            <summary>
            Finds a button element using the specified id.
            </summary>
            <param name="id">The id of the button element being sought.</param>
            <returns>The button element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Button(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a button element using the specified regular expression.
            </summary>
            <param name="regex">The regular expression for the id of the button element being sought.</param>
            <returns>The button element which id matches the regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Button(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a button element using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the button element being sought.</param>
            <returns>The button element for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.CheckBox(System.String)">
            <summary>
            Finds a checkbox element using the specified id.
            </summary>
            <param name="id">The id of the checkbox element being sought.</param>
            <returns>The checkbox element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.CheckBox(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a checkbox element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the checkbox element being sought.</param>
            <returns>The checkbox element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.CheckBox(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a checkbox element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the checkbox element being sought.</param>
            <returns>The checkbox element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Div(System.String)">
            <summary>
            Finds a div element using the specified id.
            </summary>
            <param name="id">The id of the div element being sought.</param>
            <returns>The div element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Div(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a div element using the specified regular expression to match the div's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the div element being sought.</param>
            <returns>The div element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Div(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a div element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the div element being sought.</param>
            <returns>The div element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Element(System.String)">
            <summary>
            Finds an element matching the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>The element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Element(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element using the specified regular expression to match the elements's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the element being sought.</param>
            <returns>The element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Element(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds an element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the element being sought.</param>
            <returns>The element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Form(System.String)">
            <summary>
            Finds a form element using the specified id.
            </summary>
            <param name="id">The id of the form element being sought.</param>
            <returns>The form element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Form(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a form element using the specified regular expression to match the forms's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the form element being sought.</param>
            <returns>The form element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Form(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a form element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the form element being sought.</param>
            <returns>The form element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Frame(System.String)">
            <summary>
            Finds a frame element using the specified id.
            </summary>
            <param name="id">The id of the frame element being sought.</param>
            <returns>The frame element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Frame(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a frame element using the specified regular expression to match the frame's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the frame element being sought.</param>
            <returns>The frame element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Frame(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a frame element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the frame element being sought.</param>
            <returns>The frame element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Image(System.String)">
            <summary>
            Finds an image element using the specified id.
            </summary>
            <param name="id">The id of the image element being sought.</param>
            <returns>The image element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Image(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an image element using the specified regular expression to match the image's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the image element being sought.</param>
            <returns>The image element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Image(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds an image element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the image element being sought.</param>
            <returns>The image element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Label(System.String)">
            <summary>
            Finds a label element using the specified id.
            </summary>
            <param name="id">The id of the label element being sought.</param>
            <returns>The label element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Label(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a label element using the specified regular expression to match the label's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the label element being sought.</param>
            <returns>The label element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Label(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a label element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the label element being sought.</param>
            <returns>The label element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Link(System.String)">
            <summary>
            Finds a link element using the specified id.
            </summary>
            <param name="id">The id of the link element being sought.</param>
            <returns>The link element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Link(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a link element using the specified regular expression to match the link's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the link element being sought.</param>
            <returns>The link element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Link(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a link element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the link element being sought.</param>
            <returns>The link element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Para(System.String)">
            <summary>
            Finds a paragraph element using the specified id.
            </summary>
            <param name="id">The id of the paragraph element being sought.</param>
            <returns>The paragraph element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Para(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a paragraph element using the specified regular expression to match the paragraph's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the paragraph element being sought.</param>
            <returns>The paragraph element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Para(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a paragraph element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the paragraph element being sought.</param>
            <returns>The paragraph element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.RadioButton(System.String)">
            <summary>
            Finds a radio button element using the specified id.
            </summary>
            <param name="id">The id of the radio button element being sought.</param>
            <returns>The radio button element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.RadioButton(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a radio button element using the specified regular expression to match the paragraph's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the radio button element being sought.</param>
            <returns>The radio button element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.RadioButton(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a radio button element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the radio button element being sought.</param>
            <returns>The radio button element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.SelectList(System.String)">
            <summary>
            Finds a select element using the specified id.
            </summary>
            <param name="id">The id of the select element being sought.</param>
            <returns>The select element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.SelectList(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a select list element using the specified regular expression to match the select list's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the select list element being sought.</param>
            <returns>The select list element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.SelectList(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a select list element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the select list element being sought.</param>
            <returns>The select list element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Span(System.String)">
            <summary>
            Finds a span element using the specified id.
            </summary>
            <param name="id">The id of the span element being sought.</param>
            <returns>The span element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Span(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a span element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the span element being sought.</param>
            <returns>The span element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Span(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a span element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the span element being sought.</param>
            <returns>The span element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Table(System.String)">
            <summary>
            Finds a table using the specified Id.
            </summary>
            <param name="id">The id of the table element being sought.</param>
            <returns>The table element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Table(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table element being sought.</param>
            <returns>The table element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.Table(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table element being sought.</param>
            <returns>The table element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableBody(System.String)">
            <summary>
            Finds a table body using the specified Id.
            </summary>
            <param name="id">The id of the table body element being sought.</param>
            <returns>The table body element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableBody(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table body element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table body element being sought.</param>
            <returns>The table body element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableBody(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table body element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table body element being sought.</param>
            <returns>The table body element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableRow(System.String)">
            <summary>
            Finds a table row using the specified Id.
            </summary>
            <param name="id">The id of the table row element being sought.</param>
            <returns>The table row element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableRow(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table row element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table row element being sought.</param>
            <returns>The table row element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableRow(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table row element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table row element being sought.</param>
            <returns>The table row element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableCell(System.String)">
            <summary>
            Finds a table cell using the specified Id.
            </summary>
            <param name="id">The id of the table cell element being sought.</param>
            <returns>The table cell element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableCell(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table cell element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table cell element being sought.</param>
            <returns>The table cell element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TableCell(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table cell element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table cell element being sought.</param>
            <returns>The table cell element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TextField(System.String)">
            <summary>
            Finds a text field using the Id.
            </summary>
            <param name="id">The id of the text field element being sought.</param>
            <returns>The text field element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TextField(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a text field element using the specified regular expression.
            </summary>
            <param name="regex">The regular expression for the id of the text field element being sought.</param>
            <returns>The text field element which id matches the regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainerTemp.TextField(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a text field element using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the text field element being sought.</param>
            <returns>The text field element for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Areas">
            <summary>
            Returns all the area elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Buttons">
            <summary>
            Returns all the button elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.CheckBoxes">
            <summary>
            Returns all the checkbox elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Divs">
            <summary>
            Returns all the div elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Forms">
            <summary>
            Returns all the form elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Frames">
            <summary>
            Returns all the frame elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Images">
            <summary>
            Returns all the image elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Labels">
            <summary>
            Returns all the label elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Links">
            <summary>
            Returns all the label elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Paras">
            <summary>
            Returns all the paragraph elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.RadioButtons">
            <summary>
            Returns all the radio button elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.SelectLists">
            <summary>
            Returns all the select list elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Spans">
            <summary>
            Returns all the span elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.Tables">
            <summary>
            Returns all the table elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.TableBodies">
            <summary>
            Returns all the table body elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.TableRows">
            <summary>
            Returns all the table row elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.TableCells">
            <summary>
            Returns all the table cell elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainerTemp.TextFields">
            <summary>
            Returns all the text fields elements for the current document
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IDocument.Eval(System.String)">
            <summary>
            Evaluates the specified JavaScript code within the scope of this
            document. Returns the value computed by the last expression in the
            code block after implicit conversion to a string.
            </summary>
            <example>
            The following example shows an alert dialog then returns the string "4".
            <code>
            Eval("window.alert('Hello world!'); 2 + 2");
            </code>
            </example>
            <param name="javaScriptCode">The JavaScript code</param>
            <returns>The result converted to a string</returns>
            <exception cref="T:WatiN.Core.Exceptions.JavaScriptException">Thrown when the JavaScript code cannot be evaluated
            or throws an exception during evaluation</exception>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDocument.ActiveElement">
            <summary>
            Gets the active element in this webpage.
            </summary>
            <value>The active element or <c>null</c> if no element has the focus.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDocument.Html">
            <summary>
            Gets the HTML of the Body part of the webpage.
            </summary>
            <value>The HTML of the Body part of the webpage.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDocument.Text">
            <summary>
            Gets the inner text of the Body part of the webpage.
            </summary>
            <value>The inner text.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDocument.Title">
            <summary>
            Gets the title of the webpage.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDocument.Uri">
             <summary>
             Returns a System.Uri instance of the url displayed in the address bar of the browser, 
             of the currently displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Uri of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Uri.ToString());
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDocument.Url">
             <summary>
             Returns the url, as displayed in the address bar of the browser, of the currently
             displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Url of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Url);
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="F:WatiN.Core.Mozilla.Element.knownAttributeOverrides">
            <summary>
            List of html attributes that have to retrieved as properties in order to get the correct value.
            I.e. for options myOption.getAttribute("selected"); returns nothing if it's selected. 
            However  myOption.selected returns true.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Element"/> class.
            </summary>
            <param name="elementVariable">The javascript variable name referencing this element.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.Focus">
            <summary>
            Gives the element focus.
            </summary>
            <exception cref="T:WatiN.Core.Exceptions.ElementDisabledException">if the element is disabled and can not recieve focus.</exception>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.Click">
            <summary>
            Clicks this element and waits till the event is completely finished (page is loaded
            and ready) .
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WatiN.Core.Mozilla.Element.FireEvent(System.String)" -->
        <member name="M:WatiN.Core.Mozilla.Element.FireEventNoWait(System.String)">
            <summary>
            Only fires the specified <paramref name="eventName"/> on this element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.ExecuteEvent(System.String)">
            <summary>
            Executes the event.
            </summary>
            <param name="eventName">Name of the event to fire.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.ExecuteMethod(System.String)">
            <summary>
            Executes a method with no parameters.
            </summary>
            <param name="methodName">Name of the method to execute.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.GetAttributeValue(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.GetProperty(System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.GetElementByProperty(System.String)">
            <summary>
            Gets the element by property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns the element that is returned by the specified property</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.SetAttributeValue(System.String,System.String)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.Element.SetProperty(System.String,System.String)">
            <summary>
            Sets the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.ChildNodes">
            <summary>
            Gets a collection of child nodes for the current element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.NodeType">
            <summary>
            Gets the type of the node, Mozilla DOM only?
            </summary>
            <value>The type of the node.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.InnerHtml">
            <summary>
            Gets the inner HTML of this element.
            </summary>
            <value>The inner HTML.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.TagName">
            <summary>
            Gets the tag name of this element.
            </summary>
            <value>The name of the tag.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.Text">
            <summary>
            Gets the innertext of this element (and the innertext of all the elements contained
            in this element).
            </summary>
            <value>The inner text of this element</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.Title">
            <summary>
            Gets the title of the element.
            </summary>
            <value>The title of this element.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.ClassName">
            <summary>
            Gets the name of the element's css class.
            </summary>
            <value>The name of the element's class.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Interfaces.IElement"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.ClientPort">
            <summary>
            Gets the client port used to communicate with the jssh server..
            </summary>
            <value>The client port.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Element.ElementVariable">
            <summary>
            Gets the javascript element variable name which represents this element.
            </summary>
            <value>The element variable.</value>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Area(System.String)">
            <summary>
            Finds an area element using the specified id.
            </summary>
            <param name="id">The area element being sought.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Area(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a area element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the area element being sought.</param>
            <returns>The area element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Area(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a area element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the area element being sought.</param>
            <returns>The area element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Button(System.String)">
            <summary>
            Finds a button element using the specified id.
            </summary>
            <param name="id">The id of the button element being sought.</param>
            <returns>
            The button element for the corresponding id, or null if none is found
            </returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Button(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a button element using the specified regular expression.
            </summary>
            <param name="regex">The regular expression for the id of the button element being sought.</param>
            <returns>The button element which id matches the regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Button(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a button element using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the button element being sought.</param>
            <returns>The button element for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.CheckBox(System.String)">
            <summary>
            Finds a checkbox element using the specified id.
            </summary>
            <param name="id">The id of the checkbox element being sought.</param>
            <returns>The checkbox element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.CheckBox(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a checkbox element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the checkbox element being sought.</param>
            <returns>The checkbox element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.CheckBox(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a check box element using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the check box element being sought.</param>
            <returns>The check box element for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Div(System.String)">
            <summary>
            Finds a div element using the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Div(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a div element using the specified regular expression to match the div's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the div element being sought.</param>
            <returns>The div element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Div(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a div element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the div element being sought.</param>
            <returns>The div element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Form(System.String)">
            <summary>
            Finds a form element using the specified id.
            </summary>
            <param name="id">The id of the form element being sought.</param>
            <returns>The form element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Form(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a form element using the specified regular expression to match the forms's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the form element being sought.</param>
            <returns>The form element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Form(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a form element using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the form element being sought.</param>
            <returns>The form element for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>        
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Frame(System.String)">
            <summary>
            Finds a frame element using the specified id.
            </summary>
            <param name="id">The id of the frame element being sought.</param>
            <returns>The frame element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Frame(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a frame element using the specified regular expression to match the frame's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the frame element being sought.</param>
            <returns>The frame element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Frame(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a frame element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the frame element being sought.</param>
            <returns>The frame element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Label(System.String)">
            <summary>
            Finds a label element using the specified id.
            </summary>
            <param name="id">The id of the label element being sought.</param>
            <returns>The label element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Label(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a label element using the specified regular expression to match the label's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the label element being sought.</param>
            <returns>The label element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Label(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a label element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the label element being sought.</param>
            <returns>The label element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Link(System.String)">
            <summary>
            Finds a link element using the specified id.
            </summary>
            <param name="id">The id of the link element being sought.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Link(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a link element using the specified regular expression to match the link's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the link element being sought.</param>
            <returns>The link element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Link(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a link element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the link element being sought.</param>
            <returns>The link element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Image(System.String)">
            <summary>
            Finds an image element using the specified id.
            </summary>
            <param name="id">The id of the image element being sought.</param>
            <returns>The image element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Image(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an image element using the specified regular expression to match the image's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the image element being sought.</param>
            <returns>The image element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Image(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds an image element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the image element being sought.</param>
            <returns>The image element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Para(System.String)">
            <summary>
            Finds a paragraph element using the specified id.
            </summary>
            <param name="id">The id of the paragraph element being sought.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Para(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a paragraph element using the specified regular expression to match the paragraph's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the paragraph element being sought.</param>
            <returns>The paragraph element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Para(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a paragraph element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the paragraph element being sought.</param>
            <returns>The paragraph element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.RadioButton(System.String)">
            <summary>
            Finds a radio button element using the specified id.
            </summary>
            <param name="id">The id of the radio button element being sought.</param>
            <returns>The radio button element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.RadioButton(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a radio button element using the specified regular expression to match the paragraph's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the radio button element being sought.</param>
            <returns>The radio button element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.RadioButton(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a radio button element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the radio button element being sought.</param>
            <returns>The radio button element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.SelectList(System.String)">
            <summary>
            Finds a select element using the specified id.
            </summary>
            <param name="id">The id of the select element being sought.</param>
            <returns>The select element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.SelectList(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a select list element using the specified regular expression to match the select list's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the select list element being sought.</param>
            <returns>The select list element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.SelectList(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a select list using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the select list being sought.</param>
            <returns>The select list for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Span(System.String)">
            <summary>
            Finds a span element using the specified id.
            </summary>
            <param name="id">The id of the span element being sought.</param>
            <returns>The span element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Span(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a span element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the span element being sought.</param>
            <returns>The span element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Span(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a select span using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the span being sought.</param>
            <returns>The span for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Table(System.String)">
            <summary>
            Finds a table using the specified Id.
            </summary>
            <param name="id">The id of the table element being sought.</param>
            <returns>The table element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Table(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table element being sought.</param>
            <returns>The table element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Table(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table element being sought.</param>
            <returns>The table element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableBody(System.String)">
            <summary>
            Finds a table body using the specified Id.
            </summary>
            <param name="id">The id of the table body element being sought.</param>
            <returns>The table body element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableBody(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table body element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table body element being sought.</param>
            <returns>The table body element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableBody(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table body element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table body element being sought.</param>
            <returns>The table body element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableRow(System.String)">
            <summary>
            Finds a table row using the specified Id.
            </summary>
            <param name="id">The id of the table row element being sought.</param>
            <returns>The table row element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableRow(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table row element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table row element being sought.</param>
            <returns>The table row element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableRow(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table row element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table row element being sought.</param>
            <returns>The table row element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableCell(System.String)">
            <summary>
            Finds a table cell using the specified Id.
            </summary>
            <param name="id">The id of the table cell element being sought.</param>
            <returns>The table cell element for the corresponding id, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableCell(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a table cell element using the specified regular expression to match the element id.
            </summary>
            <param name="id">The regular expression that matches the element id of the table cell element being sought.</param>
            <returns>The table cell element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TableCell(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a table cell element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the table cell element being sought.</param>
            <returns>The table cell element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TextField(System.String)">
            <summary>
            Finds a text field using the Id.
            </summary>
            <param name="id">The id.</param>
            <returns>A text field for the specified id</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TextField(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds a text field element using the specified regular expression.
            </summary>
            <param name="regex">The regular expression for the id of the text field element being sought.</param>
            <returns>The text field element which id matches the regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.TextField(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds a text field element using the specified <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="constraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> for the text field element being sought.</param>
            <returns>The text field element for the matches the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Element(System.String)">
            <summary>
            Finds an element matching the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Element(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element using the specified regular expression to match the elements's id.
            </summary>
            <param name="id">The regular expression that matches the element id of the element being sought.</param>
            <returns>The element for the corresponding regular expression, or null if none is found</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementsContainer.Element(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds an element using the specified attribute constraint.
            </summary>
            <param name="findBy">The attibute contraint used to match an attribute of the element being sought.</param>
            <returns>The element for the corresponding attribute constraint, or null if none is found</returns>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Buttons">
            <summary>
            Returns all the button elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.CheckBoxes">
            <summary>
            Returns all the checkbox elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Divs">
            <summary>
            Returns all the div elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Forms">
            <summary>
            Returns all the form elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Frames">
            <summary>
            Returns all the frame elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Labels">
            <summary>
            Returns all the label elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Links">
            <summary>
            Returns all the label elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Images">
            <summary>
            Returns all the image elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Paras">
            <summary>
            Returns all the paragraph elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.RadioButtons">
            <summary>
            Returns all the radio button elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.SelectLists">
            <summary>
            Returns all the select list elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Spans">
            <summary>
            Returns all the span elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.Tables">
            <summary>
            Returns all the table elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.TableBodies">
            <summary>
            Returns all the table body elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.TableRows">
            <summary>
            Returns all the table row elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.TableCells">
            <summary>
            Returns all the table cell elements for the current document
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ElementsContainer.TextFields">
            <summary>
            Returns all the text fields elements for the current document
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Document.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Document"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.Document.Eval(System.String)">
            <summary>
            Evaluates the specified JavaScript code within the scope of this
            document. Returns the value computed by the last expression in the
            code block after implicit conversion to a string.
            </summary>
            <example>
            The following example shows an alert dialog then returns the string "4".
            <code>
            Eval("window.alert('Hello world!'); 2 + 2");
            </code>
            </example>
            <param name="javaScriptCode">The JavaScript code</param>
            <returns>The result converted to a string</returns>
            <exception cref="T:WatiN.Core.Exceptions.JavaScriptException">Thrown when the JavaScript code cannot be evaluated
            or throws an exception during evaluation</exception>
        </member>
        <member name="M:WatiN.Core.Mozilla.Document.GetElementByProperty(System.String)">
            <summary>
            Gets the element by property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns the element that is returned by the specified property</returns>
        </member>
        <member name="P:WatiN.Core.Mozilla.Document.ActiveElement">
            <summary>
            Gets the active element in this webpage.
            </summary>
            <value>The active element or <c>null</c> if no element has the focus.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Document.Html">
            <summary>
            Gets the HTML of the Body part of the webpage.
            </summary>
            <value>The HTML of the Body part of the webpage.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Document.Text">
            <summary>
            Gets the inner text of the Body part of the webpage.
            </summary>
            <value>The inner text.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Document.Title">
            <summary>
            Gets the title of the webpage.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Document.Uri">
            <summary>
            Returns a System.Uri instance of the url displayed in the address bar of the browser,
            of the currently displayed web page.
            </summary>
            <value></value>
            <example>
            The following example creates a new Internet Explorer instances, navigates to
            the WatiN Project website on SourceForge and writes the Uri of the
            currently displayed webpage to the debug window.
            <code>
            using WatiN.Core;
            using System.Diagnostics;
            namespace NewIEExample
            {
            public class WatiNWebsite
            {
            public WatiNWebsite()
            {
            IE ie = new IE("http://watin.sourceforge.net");
            Debug.WriteLine(ie.Uri.ToString());
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="P:WatiN.Core.Mozilla.Document.Url">
             <summary>
             Returns the url, as displayed in the address bar of the browser, of the currently
             displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Url of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Url);
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="T:WatiN.Core.Mozilla.Area">
            <summary>
            Represents an area of an image map.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.IArea">
            <summary>
            Represents an area of an image map.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IArea.Alt">
            <summary>
            Gets the alt-text of the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IArea.Url">
            <summary>
            Gets the target url of the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IArea.Coords">
            <summary>
            Gets the coordinates the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IArea.Shape">
            <summary>
            Gets the shape of the area element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Area.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Area"/> class.
            </summary>
            <param name="elementVariable">The elementVariable.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="P:WatiN.Core.Mozilla.Area.Alt">
            <summary>
            Gets the alt-text of the area element.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Area.Url">
            <summary>
            Gets the target url of the area element.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Area.Coords">
            <summary>
            Gets the coordinates the area element.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Area.Shape">
            <summary>
            Gets the shape of the area element.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.LinkCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Link"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ILinkCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ILink"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.LinkCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.LinkCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.LinkCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.LinkCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.LinkCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Link"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IParaCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Para"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Find">
            <summary>
            This class provides factory methods for de most commonly used attributes
            to find an element on a web page.
            </summary>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(System.String)">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="alt">The alt text to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Image(Find.ByAlt("alt text")).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="regex">The regular expression for the alt text to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Image(Find.ByAlt(new Regex("pattern goes here")))).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(WatiN.Core.Interfaces.ICompare)">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="compare">The compare.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Image img = ie.Image(Find.ByAlt(new StringContainsAndCaseInsensitiveComparer("alt text")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByAlt(System.Predicate{System.String})">
            <summary>
            Finds an element by its alt text.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Image img = ie.Image(Find.ByAlt(MyOwnCompareMethod));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.String)">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="classname">The class name to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Div(Find.ByClass("HighlightedHeader")).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="regex">The regular expression for the class name to find.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>ie.Div(Find.ByClass(new Regex("HighlightedHeader")))).Name</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(WatiN.Core.Interfaces.ICompare)">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="compare">The comparer.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Div div = ie.Div(Find.ByClass(new StringContainsAndCaseInsensitiveComparer("Highlighted")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByClass(System.Predicate{System.String})">
            <summary>
            Finds an element by its (CSS) class name text.
            </summary>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            	<code>Div div = ie.Div(Find.ByClass(MyOwnCompareMethod));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(System.String)">
            <summary>
            Find a Label element by the id of the element it's linked with.
            </summary>
            <param name="forId">Id of the element the label is linked with.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Label(Find.ByFor("optionbuttonid")).Text</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(System.Text.RegularExpressions.Regex)">
            <param name="regex">Regular expression to find the matching Id of the element
             the label is linked with.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Label(Find.ByFor(new Regex("pattern goes here")).Text</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(WatiN.Core.Element)">
            <param name="element">The element to which the Label element is attached. This element must an Id value.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>
            CheckBox checkbox = ie.CheckBox("checkboxid");
            ie.Label(Find.ByFor(checkbox).Text</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(WatiN.Core.Interfaces.ICompare)">
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>
            Label label = ie.Label(Find.ByFor(new StringContainsAndCaseInsensitiveComparer("optionbuttonid")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByFor(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Label label = ie.Label(Find.ByFor(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(System.String)">
            <summary>
            Find an element by its id.
            </summary>
            <param name="id">Element id to find.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ById("testlinkid")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(System.Text.RegularExpressions.Regex)">
            <param name="regex">Regular expression to find a matching Id.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ById(new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(WatiN.Core.Interfaces.ICompare)">
            <param name="compare">The compare.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.ById(new StringContainsAndCaseInsensitiveComparer("linkId1")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ById(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ById(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByIndex(System.Int32)">
            <summary>
            Find an element by its index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Find.ByName(System.String)">
            <summary>
            Find an element by its name.
            </summary>
            <param name="name">Name to find.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByName("testlinkname")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(System.Text.RegularExpressions.Regex)">
            <param regex="regex">Regular expression to find a matching Name.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByName(new Regex("pattern goes here")))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(WatiN.Core.Interfaces.ICompare)">
            <summary>
            Bies the name.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Link(Find.ByName(new StringContainsAndCaseInsensitiveComparer("linkname")))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByName(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByName(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(System.String)">
            <summary>
            Find an element by its (inner) text
            </summary>
            <param name="text">Element text</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByText("my link")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(System.Text.RegularExpressions.Regex)">
            <param name="regex">Regular expression to find a matching Text.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByText(new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(WatiN.Core.Interfaces.ICompare)">
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.ByText(new StringContainsAndCaseInsensitiveComparer("my li"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByText(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByText(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.String)">
            <summary>
            Find an element, frame, IE instance or HTMLDialog by its Url.
            </summary>
            <param name="url">The well-formed url to find.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl("http://watin.sourceforge.net")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.String,System.Boolean)">
            <param name="url">The well-formed url to find.</param>
            <param name="ignoreQuery">Set to true to ignore querystring when matching.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl("http://watin.sourceforge.net", true)).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Uri)">
            <param name="uri">The uri to find.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl(new Uri("watin.sourceforge.net"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Uri,System.Boolean)">
            <param name="uri">The uri to find.</param>
            <param name="ignoreQuery">Set to true to ignore querystring when matching.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl(new Uri("watin.sourceforge.net", true))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Text.RegularExpressions.Regex)">
            <param name="regex">Regular expression to find a matching Url.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.ByUrl(new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(WatiN.Core.Interfaces.ICompare)">
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Link(Find.ByUrl(new UriComparer(uri, ignoreQuery))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByUrl(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByUrl(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(System.String)">
            <summary>
            Find an element, frame, IE instance or HTMLDialog by its Title.
            </summary>
            <param name="title">The title to match partially.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>IE ie = IE.AttachToIE(Find.ByTitle("WatiN Home Page"))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(System.Text.RegularExpressions.Regex)">
            <param name="regex">Regular expression to find a matching Title.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>IE ie = IE.AttachToIE(Find.ByTitle(new Regex("pattern goes here")))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(WatiN.Core.Interfaces.ICompare)">
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>IE ie = IE.AttachToIE(Find.ByTitle(new StringContainsAndCaseInsensitiveComparer("part of the title")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByTitle(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            IE ie = IE.AttachToIE(Find.ByTitle(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(System.String)">
            <summary>
            Find an element by its value attribute.
            </summary>
            <param name="value">The value to find.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue("My Button"))
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(System.Text.RegularExpressions.Regex)">
            <param name="regex">Regular expression to find a matching Value.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue(new Regex("pattern goes here")))
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(WatiN.Core.Interfaces.ICompare)">
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue(new StringContainsAndCaseInsensitiveComparer("pattern goes here")));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByValue(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Button button = ie.Button(Find.ByValue(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(System.String)">
            <summary>
            Find an <see cref="T:WatiN.Core.Image"/> by its source (src) attribute.
            </summary>
            <param name="src">Src to find.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Image(Find.BySrc("image.gif"))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(System.Text.RegularExpressions.Regex)">
            <param regex="regex">Regular expression to find a matching Src.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Image(Find.BySrc(new Regex("pattern goes here"))))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(WatiN.Core.Interfaces.ICompare)">
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>Image image = ie.Image(Find.BySrc(new StringContainsAndCaseInsensitiveComparer("watin/sourceforge")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.BySrc(System.Predicate{System.String})">
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Image image = ie.Image(Find.BySrc(MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,System.String)">
            <summary>
            Find an element by an attribute.
            </summary>
            <param name="attributeName">The attribute name to compare the value with.</param>
            <param name="value">The exact matching value of the attribute.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.By("id", "testlinkid")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,System.Text.RegularExpressions.Regex)">
            <param name="attributeName">The attribute name to compare the value with.</param>
            <param name="regex">Regular expression to find a matching value of the given attribute.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            <code>ie.Link(Find.By("id", new Regex("pattern goes here"))).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,WatiN.Core.Interfaces.ICompare)">
            <param name="attributeName">The attribute to compare the value with.</param>
            <param name="comparer">The comparer to be used.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.By("innertext", new StringContainsAndCaseInsensitiveComparer("pattern goes here")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.By(System.String,System.Predicate{System.String})">
            <param name="attributeName">The attribute to compare the value with.</param>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.By("innertext", MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,System.String)">
            <summary>
            Find an element by a style attribute.
            </summary>
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="value">The exact matching value of the attribute.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Span(Find.ByStyle("background-color", "red"))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,System.Text.RegularExpressions.Regex)">
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="value">Regular expression to find a matching value of the given style attribute.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>ie.Link(Find.ByStyle("font-family", new Regex("pattern goes here")))</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,WatiN.Core.Interfaces.ICompare)">
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="comparer">The comparer.</param>
            <returns><see cref="T:WatiN.Core.AttributeConstraint"/></returns>
            <example>
            	<code>Link link = ie.Link(Find.ByStyle("font-family", new StringContainsAndCaseInsensitiveComparer("aria")));</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByStyle(System.String,System.Predicate{System.String})">
            <param name="styleAttributeName">Name of the style attribute.</param>
            <param name="predicate">The predicate method to call to make the comparison.</param>
            <returns>The AttributeConstraint</returns>
            <example>
            <code>
            Link link = ie.Link(Find.ByStyle("font-family", MyOwnCompareMethod));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Find.ByElement(WatiN.Core.Interfaces.ICompareElement)">
            <summary>
            Find an Element by using a specialized Element comparer
            </summary>
            <param name="comparer">The comparer</param>
            <returns>An ElementConstraint instance</returns>
        </member>
        <member name="M:WatiN.Core.Find.ByElement(System.Predicate{WatiN.Core.Element})">
            <summary>
            Find an Element by calling the predicate for each element that
            needs to be evaluated.
            </summary>
            <param name="predicate">The predicate</param>
            <returns>An ElementConstraint instance</returns>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.PrintDialogHandler">
             <summary>
             This class handles the print dialog clicking the Print, 
             Cancel or Apply button.
             </summary>
             <example>
             The following code shows the use of this dialog handler
             <code>
             IE ie = new IE();
            
             ie.DialogWatcher.Add(new PrintDialogHandler(PrintDialogHandler.ButtonsEnum.Cancel));
            
             ie.GoTo("http://www.someprintdialog.com");
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.PrintDialogHandler.IsPrintDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a print dialog.
            </summary>
            <param name="window">The window.</param>
            <returns>
            <c>true</c> if the specified window is a print dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.SpanCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Span"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISpanCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Span"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.SpanCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SpanCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.SpanCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SpanCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.SpanCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Span"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Logging.Logger">
            <summary>
            This class provides some basic means to write actions to a logger class.
            WatiN uses this class to log which actions are done while driving Internet
            Explorer.
            </summary>
        </member>
        <member name="M:WatiN.Core.Logging.Logger.#ctor">
            <summary>
            Prevent creating an instance of this class (contains only static members)
            </summary>
        </member>
        <member name="M:WatiN.Core.Logging.Logger.LogAction(System.String,System.Object[])">
            <summary>
            Logs the action. It replaces the format item(s) in the 
            <paramref name="message"/> with the text equivalent  of the value
            of a corresponding Object instance in the <paramref name="args"/>
            array.
            </summary>
            <param name="message">A message containing zero or more format items.</param>
            <param name="args">An object array containing zero or more objects to format</param>
            <example>
            Call this function from your code like this:
            <code>
            Logger.LogAction("Some message");
            </code>
            or
            <code>
            Logger.LogAction("Some message with an {0} to {1}, "item", "format");
            </code>
            
            </example>
        </member>
        <member name="P:WatiN.Core.Logging.Logger.LogWriter">
            <summary>
            Gets or sets the log writer.
            </summary>
            <value>The log writer.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IRadioButtonCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.IRadioButton"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Interfaces.IBrowser">
            <summary>
            
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.Back">
            <summary>
            Navigates the browser back to the previously displayed Url (like the back
            button in Internet Explorer). 
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.BringToFront">
            <summary>
            Brings the current browser to the front (makes it the top window)
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.ContainsText(System.String)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Interfaces.IDocument.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.ContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="regex"/>.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Interfaces.IDocument.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.Eval(System.String)">
            <summary>
            Evaluates the specified JavaScript code within the scope of this
            document. Returns the value computed by the last expression in the
            code block after implicit conversion to a string.
            </summary>
            <example>
            The following example shows an alert dialog then returns the string "4".
            <code>
            Eval("window.alert('Hello world!'); 2 + 2");
            </code>
            </example>
            <param name="javaScriptCode">The JavaScript code</param>
            <returns>The result converted to a string</returns>
            <exception cref="T:WatiN.Core.Exceptions.JavaScriptException">Thrown when the JavaScript code cannot be evaluated
            or throws an exception during evaluation</exception>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.FindText(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the text inside the HTML Body element that matches the regular expression.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>The matching text, or null if none.</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.Forward">
            <summary>
            Navigates the browser forward to the next displayed Url (like the forward
            button in Internet Explorer). 
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.GetWindowStyle">
            <summary>
            Gets the window style.
            </summary>
            <returns>The style currently applied to the ie window.</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.GoTo(System.String)">
            <summary>
            Navigates to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.GoTo(System.Uri)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL specified as a wel formed Uri.</param>
            <example>
            The following example creates an Uri and Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            using System;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   Uri URL = new Uri("http://watin.sourceforge.net");
                   IE ie = new IE();
                   ie.GoTo(URL);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.PressTab">
            <summary>
            Sends a Tab key to the current browser window to simulate tabbing through
            the elements (and address bar).
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.Refresh">
            <summary>
            Reloads the currently displayed webpage.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.Reopen">
            <summary>
            Closes then reopens the browser navigating to a blank page.
            </summary>
            <remarks>
            Useful when clearing the cookie cache and continuing execution to a test.
            </remarks>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.RunScript(System.String)">
            <summary>
            Runs the javascript code in the current browser.
            </summary>
            <param name="javaScriptCode">The javascript code.</param>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.ShowWindow(WatiN.Core.NativeMethods.WindowShowStyle)">
            <summary>
            Make the current browser window full screen, minimized, maximized and more.
            </summary>
            <param name="showStyle">The style to apply.</param>
        </member>
        <member name="M:WatiN.Core.Interfaces.IBrowser.WaitForComplete">
            <summary>
            Waits until the document is fully loaded
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IBrowser.BrowserType">
            <summary>
            Gets the type of the browser.
            </summary>
            <value>The type of the browser.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IBrowser.ProcessID">
            <summary>
            Gets the process ID the current browser is running in.
            </summary>
            <value>The process ID the current browser is running in.</value>
        </member>
        <member name="T:WatiN.Core.Exceptions.WatiNException">
            <summary>
            Base class for Exceptions thrown by WatiN.
            </summary>
        </member>
        <member name="T:WatiN.Core.Exceptions.HtmlDialogNotFoundException">
            <summary>
            Thrown if the searched for HtmlDialog can't be found.
            </summary>
        </member>
        <member name="T:WatiN.Core.Exceptions.ElementReadOnlyException">
            <summary>
            Thrown if an element is readonly and the current action (like TextField.TypeText) a
            is not allowed.
            </summary>
        </member>
        <member name="T:WatiN.Core.Constraints.IndexConstraint">
            <summary>
            Class to find an element by the n-th index.
            Index counting is zero based.
            </summary>  
            <example>
            This example will get the second link of the collection of links
            which have "linkname" as their name value. 
            <code>ie.Link(new IndexConstraint(1) &amp;&amp; Find.ByName("linkname"))</code>
            You could also consider filtering the Links collection and getting
            the second item in the collection, like this:
            <code>ie.Links.Filter(Find.ByName("linkname"))[1]</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.Compare(WatiN.Core.Interfaces.IAttributeBag)">
             <summary>
             This methode implements an exact match comparison. If you want
             different behaviour, inherit this class or one of its subclasses and 
             override Compare with a specific implementation. 
             <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.LockCompare"/>
             <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.UnLockCompare"/>
             </summary>
             <param name="attributeBag">Value to compare with</param>
             <returns><c>true</c> if the searched for value equals the given value</returns>
             <example>
             The following example shows the use of the LockCompare and UnlockCompare methods.
             <code>
               public override bool Compare(IAttributeBag attributeBag)
                {
                  bool result = false;
             
                  // Call LockCompare if you don't call base.compare.
                  base.LockCompare();
            
                  try
                  {
                     // Your compare code goes here.
             
                     // Don't call base.compare here because that will throw
                     // a ReEntryException since you already locked the compare
                     // method for recursive calls.
                  }
                  finally
                  {
                  // Call UnLockCompare if you called LockCompare.
                    base.UnLockCompare();
                  }      
            
                  return result;
                }
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.DoCompare(WatiN.Core.Interfaces.IAttributeBag)">
            <summary>
            Does the compare without calling <see cref="M:WatiN.Core.Constraints.BaseConstraint.LockCompare"/> and <see cref="M:WatiN.Core.Constraints.BaseConstraint.UnLockCompare"/>.
            </summary>
            <param name="attributeBag">The attribute bag.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.EvaluateAndOrAttributes(WatiN.Core.Interfaces.IAttributeBag,System.Boolean)">
            <summary>
            Evaluates the and or attributes.
            </summary>
            <param name="attributeBag">The attribute bag.</param>
            <param name="initialReturnValue">if set to <c>false</c> it will skip the And evaluation.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.UnLockCompare">
            <summary>
            Call this method to unlock the compare method. Typically done at the
            end of your compare method. 
            <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.LockCompare"/>
            <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.Compare(WatiN.Core.Interfaces.IAttributeBag)"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.LockCompare">
             <summary>
             Call this method if you override the Compare method and don't call base.compare.
             You should typically call this method as the first line of code in your
             compare method. Calling this will prevent unnoticed reentry problems, resulting
             in a StackOverflowException when your constaint class is recursively used in a multiple
             findby scenario.
             <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.Compare(WatiN.Core.Interfaces.IAttributeBag)"/>
             <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.UnLockCompare"/>
             </summary>
             <example>
             The following example shows the use of the LockCompare and UnlockCompare methods.
             <code>
               public override bool Compare(IAttributeBag attributeBag)
                {
                  bool result = false;
             
                  base.LockCompare();
            
                  try
                  {
                     // Your compare code goes here.
                     // Don't call base.compare here because that will throw
                     // a ReEntryException since you already locked the compare
                     // method for recursive calls.
                  }
                  finally
                  {
                    base.UnLockCompare();
                  }      
            
                  return result;
                }
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.And(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Adds the specified constraint to the And BaseConstraint chain of a multiple <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>
            element search. When calling And or using the operators, WatiN will always use
            ConditionAnd (&amp;&amp;) during the evaluation.
            <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.Or(WatiN.Core.Constraints.BaseConstraint)"/>
            </summary>
            <param name="baseConstraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> instance.</param>
            <returns>This <see cref="T:WatiN.Core.Constraints.BaseConstraint"/></returns>
            <example>
            If you want to find a Button by it's name and value this example shows you how to use
            the And method to do this:
            <code> 
            IE ie = new IE("www.yourwebsite.com/yourpage.htm");
            
            Button myButton = ie.Button(Find.ByName("buttonname").And(Find.ByValue("Button value")));
            </code>
            
            You can also use the &amp; or &amp;&amp; operators, resulting in a bit more readable code.
            <code> 
            IE ie = new IE("www.yourwebsite.com/yourpage.htm");
            
            Button myButton = ie.Button(Find.ByName("buttonname") &amp; Find.ByValue("Button value"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Constraints.BaseConstraint.Or(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Adds the specified constaint to the Or constraint chain of a multiple <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>
            element search. When calling Or or using the | or || operators, WatiN will always use
            ConditionOr (||) during the evaluation.
            <seealso cref="M:WatiN.Core.Constraints.BaseConstraint.And(WatiN.Core.Constraints.BaseConstraint)"/>
            </summary>
            <param name="baseConstraint">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> instance.</param>
            <returns>This <see cref="T:WatiN.Core.Constraints.BaseConstraint"/></returns>
            <example>
            If you want to find a Button by it's English or Dutch value this example shows you how to use
            the Or method to do this:
            <code> 
            IE ie = new IE("www.yourwebsite.com/yourpage.htm");
            
            Button myButton = ie.Button(Find.ByValue("Cancel").Or(Find.ByValue("Annuleren")));
            </code>
            
            You can also use the | or || operators, resulting in a bit more readable code.
            <code> 
            IE ie = new IE("www.yourwebsite.com/yourpage.htm");
            
            Button myButton = ie.Button(Find.ByValue("Cancel") || Find.ByValue("Annuleren"));
            </code>
            </example>
        </member>
        <member name="T:WatiN.Core.Constraints.AlwaysTrueConstraint">
            <summary>
            This class is only used in the ElementsSupport Class to 
            create a collection of all elements.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.StringContainsAndCaseInsensitiveComparer">
            <summary>
            Class that supports a simple matching of two strings.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.StringComparer">
            <summary>
            Class that supports an exact comparison of two string values.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.ICompare">
            <summary>
            This interface is used by <see cref="!:BaseConstraint"/> to compare a searched attribute
            with a given BaseConstraint.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.AreEqual(System.String,System.String)">
            <summary>
            Compare the two values with <seealso cref="T:System.Globalization.CultureInfo"/> set to InvariantCulture.
            </summary>
            <param name="lhs">The left hand side value.</param>
            <param name="rhs">The right hand side value.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.Comparers.StringComparer.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compare the two values with <seealso cref="T:System.Globalization.CultureInfo"/> set to InvariantCulture.
            </summary>
            <param name="lhs">The left hand side value.</param>
            <param name="rhs">The right hand side value.</param>
            <param name="ignoreCase">if set to <c>true</c> it compares case insensitive.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:WatiN.Core.CreateElementInstance">
            <summary>
            This delegate is mainly used by <see cref="T:WatiN.Core.BaseElementCollection"/> to 
            delegate the creation of a specialized element type. 
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.FormsCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IFormsCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IFormsCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Form"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.FormsCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Form"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.IIE.GoTo(System.Uri)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL specified as a wel formed Uri.</param>
            <example>
            The following example creates an Uri and Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            using System;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   Uri URL = new Uri("http://watin.sourceforge.net");
                   IE ie = new IE();
                   ie.GoTo(URL);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IIE.GoTo(System.String)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IIE.Back">
            <summary>
            Navigates the browser back to the previously displayed Url (like the back
            button in Internet Explorer). 
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.Forward">
            <summary>
            Navigates the browser forward to the next displayed Url (like the forward
            button in Internet Explorer). 
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.Refresh">
            <summary>
            Reloads the currently displayed webpage (like the Refresh button in 
            Internet Explorer).
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.PressTab">
            <summary>
            Sends a Tab key to the IE window to simulate tabbing through
            the elements (and adres bar).
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.BringToFront">
            <summary>
            Brings the referenced Internet Explorer to the front (makes it the top window)
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.ShowWindow(WatiN.Core.NativeMethods.WindowShowStyle)">
            <summary>
            Make the referenced Internet Explorer full screen, minimized, maximized and more.
            </summary>
            <param name="showStyle">The style to apply.</param>
        </member>
        <member name="M:WatiN.Core.IIE.GetWindowStyle">
            <summary>
            Gets the window style.
            </summary>
            <returns>The style currently applied to the ie window.</returns>
        </member>
        <member name="M:WatiN.Core.IIE.Close">
            <summary>
            Closes the referenced Internet Explorer. Almost
            all other functionality in this class and the element classes will give
            exceptions when used after closing the browser.
            </summary>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge. 
            <code>
            using WatiN.Core;
            using System.Diagnostics;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                   Debug.WriteLine(ie.Html);
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IIE.Reopen">
            <summary>
            Closes then reopens Internet Explorer with a blank page.
            </summary>
            <remarks>
            You could also use one of the overloaded methods.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                   ie.Reopen();
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IIE.Reopen(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Closes then reopens Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded methods.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                   ie.Reopen();
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IIE.ForceClose">
            <summary>
            Closes <i>all</i> running instances of Internet Explorer by killing the
            process these instances run in. 
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.ClearCookies">
            <summary>
            Clears all browser cookies.
            </summary>
            <remarks>
            Internet Explorer maintains an internal cookie cache that does not immediately
            expire when cookies are cleared.  This is the case even when the cookies are
            cleared using the Internet Options dialog.  If cookies have been used by
            the current browser session it may be necessary to <see cref="M:WatiN.Core.IIE.Reopen"/> the
            browser to ensure the internal cookie cache is flushed.  Therefore it is
            recommended to clear cookies at the beginning of the test before navigating
            to any pages (other than "about:blank") to avoid having to reopen the browser.
            </remarks>
            <example>
            <code>
            // Clear cookies first.
            IE ie = new IE();
            ie.ClearCookies();
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.IIE.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IIE.ClearCookies(System.String)">
            <summary>
            Clears the browser cookies associated with a particular site and to
            any of the site's subdomains.
            </summary>
            <remarks>
            Internet Explorer maintains an internal cookie cache that does not immediately
            expire when cookies are cleared.  This is the case even when the cookies are
            cleared using the Internet Options dialog.  If cookies have been used by
            the current browser session it may be necessary to <see cref="M:WatiN.Core.IIE.Reopen"/> the
            browser to ensure the internal cookie cache is flushed.  Therefore it is
            recommended to clear cookies at the beginning of the test before navigating
            to any pages (other than "about:blank") to avoid having to reopen the browser.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <example>
            <code>
            // Clear cookies first.
            IE ie = new IE();
            ie.ClearCookies("http://www.example.com/");
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.IIE.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IIE.ClearCache">
            <summary>
            Clears the browser cache but leaves cookies alone.
            </summary>
            <example>
            <code>
            // Clear the cache and cookies.
            IE ie = new IE();
            ie.ClearCache();
            ie.ClearCookies();
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.IIE.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IIE.GetCookie(System.String,System.String)">
            <summary>
            Gets the value of a cookie.
            </summary>
            <remarks>
            This method cannot retrieve the value of cookies protected by the <c>httponly</c> security option.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <param name="cookieName">The cookie name.</param>
            <returns>The cookie data of the form:
            &lt;name&gt;=&lt;value&gt;[; &lt;name&gt;=&lt;value&gt;]...
            [; expires=&lt;date:DAY, DD-MMM-YYYY HH:MM:SS GMT&gt;][; domain=&lt;domain_name&gt;]
            [; path=&lt;some_path&gt;][; secure][; httponly].  Returns null if there are no associated cookies.</returns>
            <seealso cref="M:WatiN.Core.IIE.ClearCookies"/>
            <seealso cref="M:WatiN.Core.IIE.SetCookie(System.String,System.String)"/>
        </member>
        <member name="M:WatiN.Core.IIE.SetCookie(System.String,System.String)">
            <summary>
            Sets the value of a cookie.
            </summary>
            <remarks>
            If no expiration date is specified, the cookie expires when the session ends.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <param name="cookieData">The cookie data of the form:
            &lt;name&gt;=&lt;value&gt;[; &lt;name&gt;=&lt;value&gt;]...
            [; expires=&lt;date:DAY, DD-MMM-YYYY HH:MM:SS GMT&gt;][; domain=&lt;domain_name&gt;]
            [; path=&lt;some_path&gt;][; secure][; httponly].</param>
            <seealso cref="M:WatiN.Core.IIE.ClearCookies"/>
            <seealso cref="M:WatiN.Core.IIE.GetCookie(System.String,System.String)"/>
        </member>
        <member name="M:WatiN.Core.IIE.HtmlDialog(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Find a HtmlDialog by an attribute. Currently 
            Find.ByUrl and Find.ByTitle are supported.
            </summary>
            <param name="findBy">The url of the html page shown in the dialog</param>
        </member>
        <member name="M:WatiN.Core.IIE.HtmlDialog(WatiN.Core.Constraints.BaseConstraint,System.Int32)">
            <summary>
            Find a HtmlDialog by an attribute within the given <paramref name="timeout" /> period.
            Currently Find.ByUrl and Find.ByTitle are supported.
            </summary>
            <param name="findBy">The url of the html page shown in the dialog</param>
            <param name="timeout">Number of seconds before the search times out.</param>
        </member>
        <member name="M:WatiN.Core.IIE.AddDialogHandler(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Adds the dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
        </member>
        <member name="M:WatiN.Core.IIE.RemoveDialogHandler(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Removes the dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
        </member>
        <member name="M:WatiN.Core.IIE.WaitForComplete">
            <summary>
            Waits for the page to be completely loaded
            </summary>
        </member>
        <member name="M:WatiN.Core.IIE.WaitForComplete(WatiN.Core.Interfaces.IWait)">
            <summary>
            Waits for the page to be completely loaded
            </summary>
            <param name="waitForComplete">The wait for complete.</param>
        </member>
        <member name="M:WatiN.Core.IIE.CaptureWebPageToFile(System.String)">
            <summary>
            Captures the web page to file. The file extension is used to 
            determine the image format. The following image formats are
            supported (if the encoder is available on the machine):
            jpg, tif, gif, png, bmp.
            If you want more controle over the output, use <seealso cref="M:WatiN.Core.CaptureWebPage.CaptureWebPageToFile(System.String,System.Boolean,System.Boolean,System.Int32,System.Int32)"/>
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:WatiN.Core.IIE.ContainsText(System.String)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.IIE.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.IIE.ContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="regex"/>.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.IIE.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.IIE.WaitUntilContainsText(System.String)">
            <summary>
            Waits until the text is inside the HTML Body element contains the given <paramref name="text" />.
            Will time out after <see name="IE.Settings.WaitUntilExistsTimeOut" />
            </summary>
            <param name="text">The text.</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.IIE.WaitUntilContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Waits until the <paramref name="regex" /> matches some text inside the HTML Body element contains the given <paramref name="text" />.
            Will time out after <see name="IE.Settings.WaitUntilExistsTimeOut" />
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.IIE.FindText(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the text inside the HTML Body element that matches the regular expression.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>The matching text, or null if none.</returns>
        </member>
        <member name="M:WatiN.Core.IIE.Frame(System.String)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.IIE.Frame(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The regular expression to match with the id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.IIE.Frame(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Gets the specified frame by its name.
            </summary>
            <param name="findBy">The name of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given name isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.IIE.RunScript(System.String)">
            <summary>
            Runs the javascript code in IE.
            </summary>
            <param name="javaScriptCode">The javascript code.</param>
        </member>
        <member name="M:WatiN.Core.IIE.RunScript(System.String,System.String)">
            <summary>
            Runs the script code in IE.
            </summary>
            <param name="scriptCode">The script code.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:WatiN.Core.IIE.FireEvent(mshtml.DispHTMLBaseElement,System.String)">
            <summary>
            Fires the given event on the given element.
            </summary>
            <param name="element">Element to fire the event on</param>
            <param name="eventName">Name of the event to fire</param>
        </member>
        <member name="M:WatiN.Core.IIE.Eval(System.String)">
            <summary>
            Evaluates the specified JavaScript code within the scope of this
            document. Returns the value computed by the last expression in the
            code block after implicit conversion to a string.
            </summary>
            <example>
            The following example shows an alert dialog then returns the string "4".
            <code>
            Eval("window.alert('Hello world!'); 2 + 2");
            </code>
            </example>
            <param name="javaScriptCode">The JavaScript code</param>
            <returns>The result converted to a string</returns>
            <exception cref="T:WatiN.Core.Exceptions.JavaScriptException">Thrown when the JavaScript code cannot be evaluated
            or throws an exception during evaluation</exception>
        </member>
        <member name="P:WatiN.Core.IIE.InternetExplorer">
            <summary>
            Use this method to gain access to the full Internet Explorer object.
            Do this by referencing the Interop.SHDocVw assembly (supplied in the WatiN distribution)
            and cast the return value of this method to type SHDocVw.InternetExplorer.
            </summary>
        </member>
        <member name="P:WatiN.Core.IIE.AutoClose">
            <summary>
            Gets or sets a value indicating whether to auto close IE after destroying
            a reference to the corresponding IE instance.
            </summary>
            <value><c>true</c> when to auto close IE (this is the default); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.IIE.HtmlDialogs">
            <summary>
            Returns a collection of open HTML dialogs (modal as well as modeless).
            </summary>
            <value>The HTML dialogs.</value>
        </member>
        <member name="P:WatiN.Core.IIE.HtmlDialogsNoWait">
            <summary>
            Returns a collection of open HTML dialogs (modal as well as modeless).
            When itterating through this collection WaitForComplete will not be
            called on a HTML dialog before returning it from the collection.
            </summary>
            <value>The HTML dialogs.</value>
        </member>
        <member name="P:WatiN.Core.IIE.ProcessID">
            <summary>
            Gets the process ID the Internet Explorer or HTMLDialog is running in.
            </summary>
            <value>The process ID.</value>
        </member>
        <member name="P:WatiN.Core.IIE.HtmlDocument">
            <summary>
            Returns the 'raw' html document for the internet explorer DOM.
            </summary>
        </member>
        <member name="P:WatiN.Core.IIE.DialogWatcher">
            <summary>
            Gets the dialog watcher.
            </summary>
            <value>The dialog watcher.</value>
        </member>
        <member name="P:WatiN.Core.IIE.Html">
            <summary>
            Gets the HTML of the Body part of the webpage.
            </summary>
            <value>The HTML.</value>
        </member>
        <member name="P:WatiN.Core.IIE.Text">
            <summary>
            Gets the inner text of the Body part of the webpage.
            </summary>
            <value>The inner text.</value>
        </member>
        <member name="P:WatiN.Core.IIE.Uri">
             <summary>
             Returns a System.Uri instance of the url displayed in the address bar of the browser, 
             of the currently displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Uri of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Uri.ToString());
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.IIE.Url">
             <summary>
             Returns the url, as displayed in the address bar of the browser, of the currently
             displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Url of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Url);
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.IIE.Title">
            <summary>
            Gets the title of the webpage.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.IIE.ActiveElement">
            <summary>
            Gets the active element in this webpage.
            </summary>
            <value>The active element or <c>null</c> if no element has the focus.</value>
        </member>
        <member name="P:WatiN.Core.IIE.Frames">
            <summary>
            Gets a typed collection of <see cref="T:WatiN.Core.Frame"/> opend within this <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.DialogWatcher">
            <summary>
            This class handles alert/popup dialogs. Every second it checks if a dialog
            is shown. If so, it stores it's message in the alertQueue and closses the dialog
            by clicking the close button in the title bar.  
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.GetDialogWatcherForProcess(System.Int32)">
            <summary>
            Gets the dialog watcher for the specified process. It creates
            a new instance if no dialog watcher for the specified process 
            exists.
            </summary>
            <param name="ieProcessId">The ie process id.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.DialogWatcher"/> class.
            You are encouraged to use the Factory method DialogWatcher.GetDialogWatcherForProcess
            instead.
            </summary>
            <param name="ieProcessId">The ie process id.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.IncreaseReferenceCount">
            <summary>
            Increases the reference count of this DialogWatcher instance with 1.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.DecreaseReferenceCount">
            <summary>
            Decreases the reference count of this DialogWatcher instance with 1.
            When reference count becomes zero, the Dispose method will be 
            automatically called. This method will throw an <see cref="T:WatiN.Core.Exceptions.ReferenceCountException"/>
            if the reference count is zero.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Add(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Adds the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Remove(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Removes the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.RemoveAll(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Removes all instances that match <paramref name="handler"/>.
            This method determines equality by calling Object.Equals.
            </summary>
            <param name="handler">The object implementing IDialogHandler.</param>
            <example>
            If you want to use RemoveAll with your custom dialog handler to
            remove all instances of your dialog handler from a DialogWatcher instance,
            you should override the Equals method in your custom dialog handler class 
            like this:
            <code>
            public override bool Equals(object obj)
            {
              if (obj == null) return false;
              
              return (obj is YourDialogHandlerClassNameGoesHere);
            }                               
            </code>
            You could also inherit from <see cref="T:WatiN.Core.DialogHandlers.BaseDialogHandler"/> instead of implementing
            <see cref="T:WatiN.Core.DialogHandlers.IDialogHandler"/> in your custom dialog handler. <see cref="T:WatiN.Core.DialogHandlers.BaseDialogHandler"/> provides
            overrides for Equals and GetHashCode that work with RemoveAll.
            </example>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Clear">
            <summary>
            Removes all registered dialog handlers.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Contains(System.Object)">
            <summary>
            Determines whether this <see cref="T:WatiN.Core.DialogHandlers.DialogWatcher"/> contains the specified dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
            <returns>
            	<c>true</c> if [contains] [the specified handler]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Start">
            <summary>
            Called by the constructor to start watching popups
            on a separate thread.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.HandleWindow(WatiN.Core.DialogHandlers.Window)">
            <summary>
            If the window is a dialog and visible, it will be passed to
            the registered dialog handlers. I none if these can handle
            it, it will be closed if <see cref="P:WatiN.Core.DialogHandlers.DialogWatcher.CloseUnhandledDialogs"/>
            is <c>true</c>.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.DialogWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.Count">
            <summary>
            Gets the count of registered dialog handlers.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.CloseUnhandledDialogs">
            <summary>
            Gets or sets a value indicating whether unhandled dialogs should be closed automaticaly.
            The initial value is set to the value of <paramref name="IE.Settings.AutoCloseDialogs" />.
            </summary>
            <value>
            	<c>true</c> if unhandled dialogs should be closed automaticaly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.ProcessId">
            <summary>
            Gets the process id this dialog watcher watches.
            </summary>
            <value>The process id.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.ProcessExists">
            <summary>
            Gets a value indicating whether the process this dialog watcher
            watches (still) exists.
            </summary>
            <value><c>true</c> if process exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.DialogWatcher.LastException">
            <summary>
            Get the last stored exception thrown by a dialog handler while 
            calling the <see cref="M:WatiN.Core.DialogHandlers.IDialogHandler.HandleDialog(WatiN.Core.DialogHandlers.Window)"/> method of the
            dialog handler.
            </summary>
            <value>The last exception.</value>
        </member>
        <member name="M:WatiN.Core.Constraints.NotConstraint.DoCompare(WatiN.Core.Interfaces.IAttributeBag)">
            <summary>
            Does the compare without calling <see cref="M:WatiN.Core.Constraints.BaseConstraint.LockCompare"/> and <see cref="M:WatiN.Core.Constraints.BaseConstraint.UnLockCompare"/>.
            </summary>
            <param name="attributeBag">The attribute bag.</param>
        </member>
        <member name="T:WatiN.Core.UnitTests.CrossBrowserTest">
            <summary>
            Base class providing helper methods and infrastructure for executing cross browser unit tests.
            </summary>
        </member>
        <member name="M:WatiN.Core.UnitTests.CrossBrowserTest.ExecuteTest(WatiN.Core.UnitTests.CrossBrowserTest.BrowserTest)">
            <summary>
            Executes the test using both FireFox and Internet Explorer.
            </summary>
            <param name="testMethod">The test method.</param>
        </member>
        <member name="M:WatiN.Core.UnitTests.CrossBrowserTest.GetErrorMessage(System.String,WatiN.Core.Interfaces.IBrowser)">
            <summary>
            Gets the error message.
            </summary>
            <param name="message">The message.</param>
            <param name="browser">The browser.</param>
            <returns>The error message with the browser type appended to the end.</returns>
        </member>
        <member name="M:WatiN.Core.UnitTests.CrossBrowserTest.GetBrowserInstance(WatiN.Core.Interfaces.IBrowser,WatiN.Core.BrowserType,System.Boolean)">
            <summary>
            Creates a new instance or returns an existing instance of a browser
            </summary>
            <param name="browser">The cached browser instance or null</param>
            <param name="browserType">The browser type</param>
            <param name="newBrowserInstance">If true, returns a new browser instance, otherwise the cached browser is returned</param>
            <returns>A browser instance</returns>
        </member>
        <member name="M:WatiN.Core.UnitTests.CrossBrowserTest.GoTo(System.Uri,WatiN.Core.Interfaces.IBrowser)">
            <summary>
            Navigates to the specified <paramref name="url"/> if the <paramref name="browser"/> is not currently
            on that url.
            </summary>
            <param name="url">Url to navigate to.</param>
            <param name="browser">browser to navigate with.</param>
        </member>
        <member name="M:WatiN.Core.UnitTests.CrossBrowserTest.GoTo(System.String,WatiN.Core.Interfaces.IBrowser)">
            <summary>
            Navigates to the specified <paramref name="url"/> if the <paramref name="browser"/> is not currently
            on that url.
            </summary>
            <param name="url">Url to navigate to.</param>
            <param name="browser">browser to navigate with.</param>
        </member>
        <member name="T:WatiN.Core.UnitTests.CrossBrowserTest.BrowserTest">
            <summary>
            The test method to execute.
            </summary>
        </member>
        <member name="T:WatiN.Core.TableCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Table"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ITable"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.TableCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TableCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.TableCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Table"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.ParaCollection">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.IParaCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ParaCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.IPara"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.BrowserVariableName">
            <summary>
            Name of the javascript variable that references the XUL:browser object.
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.DocumentVariableName">
            <summary>
            Name of the javascript variable that references the DOM:document object.
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.WindowVariableName">
            <summary>
            Name of the javascript variable that references the DOM:window object.
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.elementCounter">
            <summary>
            Used by CreateElementVariableName
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.telnetSocket">
            <summary>
            Underlying socket used to create a <see cref="T:System.Net.Sockets.NetworkStream"/>.
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.lastResponse">
            <summary>
            The last reponse recieved from the jssh server
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.response">
            <summary>
            The entire response from the jssh server so far.
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFoxClientPort.disposed">
            <summary>
            <c>true</c> if the <see cref="M:WatiN.Core.Mozilla.FireFoxClientPort.Dispose"/> method has been called to release resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:WatiN.Core.Mozilla.FireFox"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.CreateVariableName">
            <summary>
            Creates a unique variable name
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.InitializeDocument">
            <summary>
            Reloads the javascript variables that are scoped at the document level.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.CleanTelnetResponse(System.String)">
            <summary>
            Cleans the response.
            </summary>
            <param name="response">The response.</param>
            <returns>Response from FireFox with out any of the telnet UI characters</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.DefineDefaultJSVariables">
            <summary>
            Defines the default JS variables used to automate FireFox.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.WaitForConnectionEstablished">
            <summary>
            Writes a line to the jssh server.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.SendAndRead(System.String,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Writes the specified data to the jssh server.
            </summary>
            <param name="data">The data.</param>
            <param name="resultExpected"></param>
            <param name="checkForErrors"></param>
            <param name="args"></param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.Write(System.String,System.Object[])">
            <summary>
            Writes the specified data to the jssh server.
            </summary>
            <param name="data">The data.</param>
            <param name="args">Arguments to be passed to <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFoxClientPort.ReadResponse(System.Boolean,System.Boolean)">
            <summary>
            Reads the response from the jssh server.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFoxClientPort.Connected">
            <summary>
            <c>true</c> if we have successfully connected to FireFox
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFoxClientPort.LastResponse">
            <summary>
            The last reponse recieved from the jssh server
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFoxClientPort.Response">
            <summary>
            The entire response from the jssh server so far.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFoxClientPort.LastResponseIsNull">
            <summary>
            Gets a value indicating whether last response is null.
            </summary>
            <value><c>true</c> if last response is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFoxClientPort.LastResponseAsBool">
            <summary>
            Retruns the last reponse as a Boolen, default to false if converting <see cref="P:WatiN.Core.Mozilla.FireFoxClientPort.LastResponse"/> fails.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFoxClientPort.IsMainWindowVisible">
            <summary>
            Gets a value indicating if the main FireFox window is visible, it's possible that the
            main FireFox window is not visible if a previous shutdown didn't complete correctly
            in which case the restore / resume previous session dialog may be visible.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IWatiNElementCollection.Filter(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns a new <see cref="T:WatiN.Core.Interfaces.IWatiNElementCollection"/> filtered by the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="findBy">The attribute to filter by.</param>
            <returns>The filtered collection.</returns>
        </member>
        <member name="P:WatiN.Core.Interfaces.IWatiNElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Element"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Frame">
            <summary>
            This class provides specialized functionality for a Frame or IFrame.
            </summary>
        </member>
        <member name="T:WatiN.Core.Document">
            <summary>
            This class gives access to all contained elements of the webpage or the
            frames within this webpage.
            </summary>
                /// <example>
            This example opens a webpage, types some text and submits it by clicking
            the submit button.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
            
                   ie.TextField(Find.ById("textFieldComment")).TypeText("This is a comment to submit");
                   ie.Button(Find.ByText("Submit")).Click;
            
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="T:WatiN.Core.Interfaces.IElementsContainer">
            <summary>
            This interface is used by all classes which provide access to (sub)elements.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainer.Area(System.String)">
            <summary>
            Finds an image map area by its id.
            </summary>
            <param name="elementId">The area id</param>
            <returns>The area</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainer.Area(System.Text.RegularExpressions.Regex)">
            <summary>
            Finds an image map area by its id using a regular expression.
            </summary>
            <param name="elementId">The area id regular expression</param>
            <returns>The area</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainer.Area(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Finds an image map area by an BaseConstraint.
            </summary>
            <param name="findBy">The BaseConstraint</param>
            <returns>The area</returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainer.Button(System.String)">
            <summary>
            Gets the specified Button by its id.
            </summary>
            <param name="elementId">The id of the element.</param>
            <exception cref="T:WatiN.Core.Exceptions.ElementNotFoundException">Thrown if the given <paramref name="elementId"/> isn't found.</exception>
            <example>
            This example opens a webpage, types some text and submits it by clicking
            the submit button.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
                   ie.TextField(Find.ById("textFieldComment")).TypeText("This is a comment to submit");
                   ie.Button("buttonSubmit").Click;
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainer.Button(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Gets the specified Button by using the given <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> to find the Button.
            <seealso cref="T:WatiN.Core.Find"/>
            </summary>
            <param name="findBy">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> class or one of it's subclasses to find an element by. The <see cref="T:WatiN.Core.Find"/> class provides factory methodes to create specialized instances.</param>
            <exception cref="T:WatiN.Core.Exceptions.ElementNotFoundException">Thrown if the given <paramref name="findBy"/> doesn't match an element in the webpage.</exception>
            <example>
            This example opens a webpage, types some text and submits it by clicking
            the submit button.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
                   Id textFieldId = new Id("textFieldComment");
                   ie.TextField(textFieldId).TypeText("This is a comment to submit");
                   ie.Button(Find.ByText("Submit")).Click;
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Interfaces.IElementsContainer.TableCell(System.String,System.Int32)">
            <summary>
            Finds a TableCell by the n-th index of an id. 
            index counting is zero based.
            </summary>  
            <example>
            This example will get Text of the third(!) index on the page of a
            TableCell element with "tablecellid" as it's id value. 
            <code>ie.TableCell("tablecellid", 2).Text</code>
            </example>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainer.Areas">
            <summary>
            Gets the collection of areas.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IElementsContainer.Buttons">
            <summary>
            Gets a typed collection of <see cref="T:WatiN.Core.Button"/> instances within this <see cref="T:WatiN.Core.Document"/>.
            </summary>
                /// <example>
            This example opens a webpage and writes out the text of each button to the
            debug window.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://www.example.net");
                  
                   ButtonCollection buttons = ie.Buttons;
            
                   foreach (Button button in buttons)
                   {
                     System.Diagnostics.Debug.Writeline(button.Text);
                   }
            
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Document"/> class.
            Mainly used by WatiN internally. You should override HtmlDocument
            and set DomContainer before accessing any method or property of 
            this class.
            </summary>
        </member>
        <member name="M:WatiN.Core.Document.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLDocument2)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Document"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="htmlDocument">The HTML document.</param>
        </member>
        <member name="M:WatiN.Core.Document.ContainsText(System.String)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Document.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.ContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="regex"/>.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Document.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.String)">
            <summary>
            Waits until the text is inside the HTML Body element contains the given <paramref name="text" />.
            Will time out after <see name="IE.Settings.WaitUntilExistsTimeOut" />
            </summary>
            <param name="text">The text.</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.String,System.Int32)">
            <summary>
            Waits until the text is inside the HTML Body element contains the given <paramref name="text" />.
            </summary>
            <param name="text">The text.</param>
            <param name="timeOut">The number of seconds to wait</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Waits until the <paramref name="regex" /> matches some text inside the HTML Body element contains the given <paramref name="text" />.
            Will time out after <see name="IE.Settings.WaitUntilExistsTimeOut" />
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.WaitUntilContainsText(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Waits until the <paramref name="regex" /> matches some text inside the HTML Body element contains the given <paramref name="text" />.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <param name="timeOut">The number of seconds to wait</param>
            <returns>
                <see name="TimeoutException"/> if the specified text is not found within the time out period.
            </returns>
        </member>
        <member name="M:WatiN.Core.Document.FindText(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the text inside the HTML Body element that matches the regular expression.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>The matching text, or null if none.</returns>
        </member>
        <member name="M:WatiN.Core.Document.Frame(System.String)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.Document.Frame(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The regular expression to match with the id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.Document.Frame(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Gets the specified frame by its name.
            </summary>
            <param name="findBy">The name of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given name isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.Document.RunScript(System.String)">
            <summary>
            Runs the javascript code in IE.
            </summary>
            <param name="javaScriptCode">The javascript code.</param>
        </member>
        <member name="M:WatiN.Core.Document.RunScript(System.String,System.String)">
            <summary>
            Runs the script code in IE.
            </summary>
            <param name="scriptCode">The script code.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:WatiN.Core.Document.FireEvent(mshtml.DispHTMLBaseElement,System.String)">
            <summary>
            Fires the given event on the given element.
            </summary>
            <param name="element">Element to fire the event on</param>
            <param name="eventName">Name of the event to fire</param>
        </member>
        <member name="M:WatiN.Core.Document.Eval(System.String)">
            <summary>
            Evaluates the specified JavaScript code within the scope of this
            document. Returns the value computed by the last expression in the
            code block after implicit conversion to a string.
            </summary>
            <example>
            The following example shows an alert dialog then returns the string "4".
            <code>
            Eval("window.alert('Hello world!'); 2 + 2");
            </code>
            </example>
            <param name="javaScriptCode">The JavaScript code</param>
            <returns>The result converted to a string</returns>
            <exception cref="T:WatiN.Core.Exceptions.JavaScriptException">Thrown when the JavaScript code cannot be evaluated
            or throws an exception during evaluation</exception>
        </member>
        <member name="P:WatiN.Core.Document.HtmlDocument">
            <summary>
            Gives access to the wrapped IHTMLDocument2 interface. This makes it
            possible to get even more control of the webpage by using the MSHTML
            Dom objectmodel.
            </summary>
            <value>The HTML document.</value>
        </member>
        <member name="P:WatiN.Core.Document.Html">
            <summary>
            Gets the HTML of the Body part of the webpage.
            </summary>
            <value>The HTML.</value>
        </member>
        <member name="P:WatiN.Core.Document.Text">
            <summary>
            Gets the inner text of the Body part of the webpage.
            </summary>
            <value>The inner text.</value>
        </member>
        <member name="P:WatiN.Core.Document.Uri">
             <summary>
             Returns a System.Uri instance of the url displayed in the address bar of the browser, 
             of the currently displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Uri of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Uri.ToString());
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.Document.Url">
             <summary>
             Returns the url, as displayed in the address bar of the browser, of the currently
             displayed web page.
             </summary>
             <example>
             The following example creates a new Internet Explorer instances, navigates to
             the WatiN Project website on SourceForge and writes the Url of the
             currently displayed webpage to the debug window.
             <code>
             using WatiN.Core;
             using System.Diagnostics;
            
             namespace NewIEExample
             {
                public class WatiNWebsite
                {
                  public WatiNWebsite()
                  {
                    IE ie = new IE("http://watin.sourceforge.net");
                    Debug.WriteLine(ie.Url);
                  }
                }
              }
             </code>
             </example>
        </member>
        <member name="P:WatiN.Core.Document.Title">
            <summary>
            Gets the title of the webpage.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:WatiN.Core.Document.ActiveElement">
            <summary>
            Gets the active element in this webpage.
            </summary>
            <value>The active element or <c>null</c> if no element has the focus.</value>
        </member>
        <member name="P:WatiN.Core.Document.Frames">
            <summary>
            Gets a typed collection of <see cref="T:WatiN.Core.Frame"/> opend within this <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.Frame.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLDocument2,mshtml.IHTMLDocument3,System.String)">
            <summary>
            This constructor will mainly be used by the constructor of FrameCollection
            to create an instance of a Frame.
            </summary>
            <param name="ie">The ie.</param>
            <param name="htmlDocument">The HTML document.</param>
            <param name="frameSetParent">The frame set parent.</param>
            <param name="frameElementUniqueId">The frame element unique id.</param>
        </member>
        <member name="M:WatiN.Core.Frame.Find(WatiN.Core.FrameCollection,WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            This constructor will mainly be used by Document.Frame to find
            a Frame. A FrameNotFoundException will be thrown if the Frame isn't found.
            </summary>
            <param name="frames">Collection of frames to find the frame in</param>
            <param name="findBy">The <see cref="T:WatiN.Core.AttributeConstraint"/> of the Frame to find (Find.ByUrl, Find.ByName and Find.ById are supported)</param>
        </member>
        <member name="T:WatiN.Core.ElementTag">
            <summary>
            This class is mainly used by WatiN internally and defines 
            the supported html tags for inheritors of <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.ElementCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Element"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ElementCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ElementCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ElementCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.ElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Element"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Constraints.AttributeConstraint">
            <summary>
            This is the base class for finding elements by a specified attribute. Use
            this class or one of it's subclasses to implement your own comparison logic.
            </summary>
            <example>
            <code>ie.Link(new Attribute("id", "testlinkid")).Url</code>
            or use 
            <code>ie.Link(Find.By("id", "testlinkid")).Url</code>
            </example>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.AttributeConstraint"/> class.
            </summary>
            <param name="attributeName">Name of the attribute as recognised by Internet Explorer.</param>
            <param name="value">The value to look for.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.AttributeConstraint"/> class.
            </summary>
            <param name="attributeName">Name of the AttributeConstraint as recognised by Internet Explorer.</param>
            <param name="regex">The regular expression to use.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.#ctor(System.String,WatiN.Core.Interfaces.ICompare)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.AttributeConstraint"/> class.
            </summary>
            <param name="attributeName">Name of the attribute as recognised by Internet Explorer.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.DoCompare(WatiN.Core.Interfaces.IAttributeBag)">
            <summary>
            Does the compare without calling <see cref="M:WatiN.Core.Constraints.BaseConstraint.LockCompare"/> and <see cref="M:WatiN.Core.Constraints.BaseConstraint.UnLockCompare"/>.
            </summary>
            <param name="attributeBag">The attribute bag.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.AttributeConstraint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            The Value of this <see cref="T:WatiN.Core.Constraints.AttributeConstraint"/>
            </returns>
        </member>
        <member name="P:WatiN.Core.Constraints.AttributeConstraint.Comparer">
            <summary>
            Gets the comparer used to match the expected attribute value with 
            the attribute value of an html element on a webpage.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:WatiN.Core.Constraints.AttributeConstraint.AttributeName">
            <summary>
            Gets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:WatiN.Core.Constraints.AttributeConstraint.Value">
            <summary>
            Gets the value to look for or the regex pattern that will be used.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:WatiN.Core.BrowserFactory">
            <summary>
            Represents a Browser used for running tests, it can run tests using <see cref="T:WatiN.Core.IE"/>, or <see cref="T:WatiN.Core.Mozilla.FireFox"/>. 
            </summary>
        </member>
        <member name="M:WatiN.Core.BrowserFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.BrowserFactory"/> class.
            </summary>
        </member>
        <member name="M:WatiN.Core.BrowserFactory.Create">
            <summary>
            Creates a new instance of a <see cref="T:WatiN.Core.Interfaces.IBrowser"/> either <see cref="T:WatiN.Core.IE"/> or <see cref="T:WatiN.Core.Mozilla.FireFox"/> based on the value of <see cref="T:WatiN.Core.BrowserType"/>.
            The default value if <see cref="F:WatiN.Core.BrowserType.InternetExplorer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.BrowserFactory.Create(WatiN.Core.BrowserType)">
            <summary>
            Creates a new instance of a <see cref="T:WatiN.Core.Interfaces.IBrowser"/> for the specified browser type.
            </summary>
            <param name="browserType">Type of browser.</param>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.BrowserFactory.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.RadioButton">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IRadioButton"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableCell.ParentTableRow">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.TableRow"/> of this <see cref="T:WatiN.Core.TableCell"/>.
            </summary>
            <value>The parent table row.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableCell.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableCell"/> in the <see cref="T:WatiN.Core.TableCellCollection"/> of the parent <see cref="T:WatiN.Core.TableRow"/>.
            </summary>
            <value>The index of the cell.</value>
        </member>
        <member name="T:WatiN.Core.Exceptions.RunScriptException">
            <summary>
            Thrown if a (java) script failed to run. The innerexception returns the actual exception.
            </summary>
        </member>
        <member name="T:WatiN.Core.Constraints.TableRowAttributeConstraint">
            <summary>
            Use this class to find a row which contains a particular value
            in a table cell contained in a table column.
            </summary>
        </member>
        <member name="M:WatiN.Core.Constraints.TableRowAttributeConstraint.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.TableRowAttributeConstraint"/> class.
            </summary>
            <param name="findText">The text to find (exact match but case insensitive).</param>
            <param name="inColumn">The column index in which to look for the value.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.TableRowAttributeConstraint.#ctor(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.TableRowAttributeConstraint"/> class.
            </summary>
            <param name="findTextRegex">The regular expression to match with.</param>
            <param name="inColumn">The column index in which to look for the value.</param>
        </member>
        <member name="M:WatiN.Core.Constraints.TableRowAttributeConstraint.#ctor(WatiN.Core.Interfaces.ICompare,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Constraints.TableRowAttributeConstraint"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="inColumn">The column index in which to look for the value.</param>
        </member>
        <member name="T:WatiN.Core.Comparers.UriComparer">
            <summary>
            Class that supports comparing a <see cref="T:System.Uri"/> instance with a string value.
            </summary>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.#ctor(System.Uri)">
            <summary>
            Constructor, querystring will not be ignored in comparisons.
            </summary>
            <param name="uri">Uri for comparison.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.#ctor(System.Uri,System.Boolean)">
            <summary>
            Constructor, querystring can be ignored or not ignored in comparisons.
            </summary>
            <param name="uri">Uri for comparison.</param>
            <param name="ignoreQuery">Set to true to ignore querystrings in comparison.</param>
        </member>
        <member name="M:WatiN.Core.Comparers.UriComparer.Compare(System.Uri)">
            <summary>
            Compares the specified Uri.
            </summary>
            <param name="url">The Uri.</param>
            <returns><c>true</c> when equal; otherwise <c>false</c></returns>
        </member>
        <member name="T:WatiN.Core.Comparers.RegexComparer">
            <summary>
            Class that supports matching a regular expression with a string value.
            </summary>
        </member>
        <member name="T:WatiN.Core.CheckBoxCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.CheckBox"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ICheckBoxCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.CheckBox"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.CheckBoxCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBoxCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.CheckBoxCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBoxCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.CheckBoxCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.CheckBox"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.TableBodyCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TableBody"/> instances within a Document or Element. 
            </summary>
        </member>
        <member name="T:WatiN.Core.Settings">
            <summary>
            This class is used to define the default settings used by WatiN. 
            Use <c>IE.Settings</c> to access or change these settings.
            </summary>
            <example>
            The following example shows you how to change the default time out which is used
            by the AttachtToIE(findBy) method to attach to an already existing Internet Explorer window 
            or to an Internet Explorer window that will show up within 60 seconds after calling
            the AttachToIE(findBy) method.
            <code>
            public void AttachToIEExample()
            {
              // Change de default time out from 30 to 60 seconds.
              IE.Settings.AttachToIETimeOut = 60;
            
              // Start Internet Explorer manually and type 
              // http://watin.sourceforge.net in the navigation bar.
            
              // Now Attach to an existing Internet Explorer window
              IE ie = IE.AttachToIE(Find.ByTitle("WatiN");
            
              System.Diagnostics.Debug.WriteLine(ie.Url);
            }
            </code>
            When you frequently want to change these settings you could also create
            two or more instances of the Settings class, set the desired defaults 
            and set the settings class to IE.Settings.
            <code>
            public void ChangeSettings()
            {
              IE.Settings = LongTimeOut();
              
              // Do something here that requires more time then the defaults
            
              IE.Settings = ShortTimeOut();
            
              // Do something here if you want a short time out to get
              // the exception quickly incase the item isn't found.  
            }
            
            public Settings LongTimeOut()
            {
              Settings settings = new Settings();
            
              settings.AttachToIETimeOut = 60;
              settings.WaitUntilExistsTimeOut = 60;
              settings.WaitForCompleteTimeOut = 60;
            
              return settings;
            }
            
            public Settings ShortTimeOut()
            {
              Settings settings = new Settings();
            
              settings.AttachToIETimeOut = 5;
              settings.WaitUntilExistsTimeOut = 5;
              settings.WaitForCompleteTimeOut = 5;
            
              return settings;
            }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Settings.Reset">
            <summary>
            Resets this instance to the initial defaults.
            </summary>
        </member>
        <member name="M:WatiN.Core.Settings.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.Settings.BrowserType">
            <summary>
            Gets or sets the type of the browser to be used during automation.
            </summary>
            <value>The type of the browser.</value>
        </member>
        <member name="P:WatiN.Core.Settings.AttachToIETimeOut">
            <summary>
            Get or set the default time out used when calling IE ie = IE.AttachToIE(findBy).
            The initial value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.WaitUntilExistsTimeOut">
            <summary>
            Get or set the default time out used when calling Element.WaitUntilExists().
            The initial value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.WaitForCompleteTimeOut">
            <summary>
            Get or set the default time out used when calling ie.WaitForComplete().
            The initial value is 30 seconds. Setting the time out to a negative value will
            throw a <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.HighLightElement">
            <summary>
            Turn highlighting of elements by WatiN on (<c>true</c>) or off (<c>false</c>).
            Highlighting of an element is done when WatiN fires an event on an
            element or executes a methode (like TypeText).
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.HighLightColor">
            <summary>
            Set or get the color to highlight elements. Will be used if
            HighLightElement is set to <c>true</c>.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.AutoCloseDialogs">
            <summary>
            Turn auto closing of dialogs on (<c>true</c>) or off (<c>false</c>).
            You need to set this value before creating or attaching to any 
            Internet Explorer to have effect.
            </summary>
        </member>
        <member name="P:WatiN.Core.Settings.AutoStartDialogWatcher">
            <summary>
            Gets or sets a value indicating whether to auto start the dialog watcher at all.
            This value is evaluated everytime a new IE instance is created
            </summary>
            <value>
            	<c>true</c> if dialog watcher should be started when a new IE instance is created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Settings.AutoMoveMousePointerToTopLeft">
            <summary>
            Gets or sets a value indicating whether to move the cursor to the top left
            of the screen everytime a new IE instance is created.
            </summary>
            <value>
            	<c>true</c> when mouse should be moved to top left; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Settings.MakeNewIeInstanceVisible">
            <summary>
            Gets or sets a value indicating whether to make a new <see cref="T:WatiN.Core.IE"/> instance visible.
            </summary>
            <value>
            	<c>true</c> if you want to make a new <see cref="T:WatiN.Core.IE"/> instance visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.Settings.CloseExistingBrowserInstances">
            <summary>
            Gets or sets a value indicating whether to close existing browser instances before running an automation test.
            </summary>
            <value>
            	<c>true</c> closes existing browser instances before running a test; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WatiN.Core.SelectListCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.SelectList"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectListCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.SelectList"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.SelectListCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SelectListCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.SelectListCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.SelectListCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.SelectListCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.SelectList"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.RadioButtonCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.RadioButton"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.RadioButtonCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.RadioButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.RadioButtonCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.RadioButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.RadioButtonCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.RadioButton"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.ParaCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Para"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ParaCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ParaCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ParaCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ParaCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.ParaCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Para"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Para">
            <summary>
            This class provides specialized functionality for a HTML para element.
            </summary>
        </member>
        <member name="T:WatiN.Core.ElementsContainer">
            <summary>
            Summary description for ElementsContainer.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementsContainer.Frame(System.String)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.ElementsContainer.Frame(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the specified frame by its id.
            </summary>
            <param name="id">The regular expression to match with the id of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given <paramref name="id"/> isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.ElementsContainer.Frame(WatiN.Core.AttributeConstraint)">
            <summary>
            Gets the specified frame by its name.
            </summary>
            <param name="findBy">The name of the frame.</param>
            <exception cref="T:WatiN.Core.Exceptions.FrameNotFoundException">Thrown if the given name isn't found.</exception>
        </member>
        <member name="M:WatiN.Core.ElementsContainer.TableCell(System.String,System.Int32)">
            <summary>
            Finds a TableCell by the n-th index of an id. 
            index counting is zero based.
            </summary>  
            <example>
            This example will get the Text of the third(!) tablecell 
            with "tablecellid" as it's id value. 
            <code>ie.TableCell("tablecellid", 2).Text</code>
            </example>
        </member>
        <member name="P:WatiN.Core.ElementsContainer.Frames">
            <summary>
            Gets a typed collection of <see cref="T:WatiN.Core.Frame"/> opend within this <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.IPara">
            <summary>
            Represents the behavior and attributes of an HTML paragraph element
            </summary>
        </member>
        <member name="M:WatiN.Core.Para.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Para"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.Interfaces.ITextField">
            <summary>
            Represents the behaviour and properties of an HTML text field.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.TextField.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.TextField"/> class.
            </summary>
            <param name="elementVariable">The elementVariable.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="T:WatiN.Core.Mozilla.Frame">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IFrame"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.Button">
            <summary>
            The FireFox implementation of an HTML button
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.IButton">
            <summary>
            Defines behaviour specific to an HTML button
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IButton.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:WatiN.Core.Interfaces.IButton.Value">
            <summary>
            The text displayed at the button.
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IButton.Text">
            <summary>
            The text displayed at the button (alias for the Value property).
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="M:WatiN.Core.Mozilla.Button.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Button"/> class.
            </summary>
            <param name="elementVariable">The javascript variable name referencing this element.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="T:WatiN.Core.Logging.ConsoleLogWriter">
            <summary>
            This logger class writes it's output to the console.
            </summary>
            <example>
            The following code attaches the ConsoleLogWriter to WatiN and writes a
            LogAction.
            <code>
            Logger.LogWriter = new ConsoleLogWriter;
            Logger.LogAction("Attached ConsoleLogWriter");
            </code>
            </example>
        </member>
        <member name="T:WatiN.Core.Interfaces.ILogWriter">
            <summary>
            Implement this interface if you create your own Logger class.
            For example <c>Logger.LogWriter = new MyLogWriter</c>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Form">
            <summary>
            This class provides specialized functionality for a HTML Form element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Form.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Form"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.Exceptions.ElementNotFoundException">
            <summary>
            Thrown if the searched for element can't be found.
            </summary>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.LogonDialogHandler">
             <summary>
             This class handles the logon dialog by passing in the username and password
             and clicking the OK button.
             </summary>
             <example>
             The following code shows the use of this dialog handler
             <code>
             IE ie = new IE();
            
             ie.DialogWatcher.Add(new LogonDialogHandler(@"domain\username", "password"));
            
             ie.GoTo("https://www.somesecuresite.com");
             </code>
             </example>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.LogonDialogHandler.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class.
            </summary>
            <param name="userName">Name of the user. Is required.</param>
            <param name="password">The password. If no password is required, it can be left blank (<c>null</c> or <c>String.Empty</c>). </param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.LogonDialogHandler.IsLogonDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a logon dialog.
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a logon dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.CheckBox">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            checkbox.
            </summary>
        </member>
        <member name="M:WatiN.Core.CheckBox.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLInputElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBox"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The domContainer.</param>
            <param name="inputElement">The input element.</param>
        </member>
        <member name="M:WatiN.Core.CheckBox.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.CheckBox"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The domContainer.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.CheckBox.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.CheckBox"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.UtilityClass">
            <summary>
            Class with some utility methods to explore the HTML of a <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClass.#ctor">
            <summary>
            Prevent creating an instance of this class (contains only static members)
            </summary>
        </member>
        <member name="M:WatiN.Core.UtilityClass.DumpElements(WatiN.Core.Document)">
            <summary>
            Dumps all element ids to <see cref="T:WatiN.Core.Logging.DebugLogWriter"/>
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.DumpElements(WatiN.Core.Document,WatiN.Core.Interfaces.ILogWriter)">
            <summary>
            Dumps the element ids.
            </summary>
            <param name="document">The document.</param>
            <param name="logWriter">The log writer.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.DumpElementsWithHtmlSource(WatiN.Core.Document)">
            <summary>
            Dumps the elements with HTML source to <see cref="T:WatiN.Core.Logging.DebugLogWriter"/>
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.DumpElementsWithHtmlSource(WatiN.Core.Document,WatiN.Core.Interfaces.ILogWriter)">
            <summary>
            Dumps the elements with HTML source.
            </summary>
            <param name="document">The document.</param>
            <param name="logWriter">The log writer.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.DumpFrames(WatiN.Core.Document)">
            <summary>
            Dumps frame info to <see cref="T:WatiN.Core.Logging.DebugLogWriter"/>
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.DumpFrames(WatiN.Core.Document,WatiN.Core.Interfaces.ILogWriter)">
            <summary>
            Dumps frame info.
            </summary>
            <param name="document">The document.</param>
            <param name="logWriter">The log writer.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified <paramref name="value" /> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.UtilityClass.IsNotNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified <paramref name="value" /> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.UtilityClass.ToString(System.Object)">
            <summary>
            Returns the sring value of the <paramref name="theObject" />
            and returns an empty string if <paramref name="theObject" /> is <c>null</c>
            </summary>
            <param name="theObject">The object.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.UtilityClass.CompareClassNames(System.IntPtr,System.String)">
            <summary>
            Compares the class names.
            </summary>
            <param name="hWnd">The hWND of the window if which the class name should be retrieved.</param>
            <param name="expectedClassName">Expected name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.UtilityClass.IHtmlElementCollectionToArrayList(mshtml.IHTMLElementCollection)">
            <summary>
            Converts the HTML element collection to an array list.
            </summary>
            <param name="elementCollection">The element collection.</param>
            <returns>an array list with all the elements found in the element collection</returns>
        </member>
        <member name="M:WatiN.Core.UtilityClass.RunScript(System.String,mshtml.IHTMLWindow2)">
            <summary>
            Runs the javascript code in IE.
            </summary>
            <param name="scriptCode">The javascript code.</param>
            <param name="window">The parent window of the document.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.RunScript(System.String,System.String,mshtml.IHTMLWindow2)">
            <summary>
            Runs the script code in IE.
            </summary>
            <param name="scriptCode">The script code.</param>
            <param name="language">The language.</param>
            <param name="window">The parent window of the document.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.FireEvent(mshtml.DispHTMLBaseElement,System.String)">
            <summary>
            Fires the given event on the given element.
            </summary>
            <param name="element">Element to fire the event on</param>
            <param name="eventName">Name of the event to fire</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.FireEvent(mshtml.DispHTMLBaseElement,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Fires the given event on the given element.
            </summary>
            <param name="element">Element to fire the event on</param>
            <param name="eventName">Name of the event to fire</param>
            <param name="eventObjectProperties">The event object properties.</param>
        </member>
        <member name="M:WatiN.Core.UtilityClass.StringFormat(System.String,System.Object[])">
            <summary>
            Formats the string in the same sense as string.Format but checks 
            if args is null before calling string.Format to prevent FormatException
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:WatiN.Core.TableCell">
            <summary>
            This class provides specialized functionality for a HTML td element.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableCell.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.TableCell"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:WatiN.Core.TableCell.ParentTableRow">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.TableRow"/> of this <see cref="T:WatiN.Core.TableCell"/>.
            </summary>
            <value>The parent table row.</value>
        </member>
        <member name="P:WatiN.Core.TableCell.WatiN#Core#Interfaces#ITableCell#ParentTableRow">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.TableRow"/> of this <see cref="T:WatiN.Core.TableCell"/>.
            </summary>
            <value>The parent table row.</value>
        </member>
        <member name="P:WatiN.Core.TableCell.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableCell"/> in the <see cref="T:WatiN.Core.TableCellCollection"/> of the parent <see cref="T:WatiN.Core.TableRow"/>.
            </summary>
            <value>The index of the cell.</value>
        </member>
        <member name="T:WatiN.Core.Table">
            <summary>
            This class provides specialized functionality for a HTML table element.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.ITable">
            <summary>
            This class provides specialized functionality for a HTML table element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITable.TableRows">
            <summary>
            Returns all rows in the first TBODY section of a table. If no
            explicit sections are defined in the table (like THEAD, TBODY 
            and/or TFOOT sections), it will return all the rows in the table.
            This method also returns rows from nested tables.
            </summary>
            <value>The table rows.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITable.TableBodies">
            <summary>
            Returns the table body sections belonging to this table (not including table body sections 
            from tables nested in this table).
            </summary>
            <value>The table bodies.</value>
        </member>
        <member name="M:WatiN.Core.Table.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Table"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:WatiN.Core.Table.TableBody(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns the table body section belonging to this table (not including table body sections 
            from tables nested in this table).
            </summary>
            <param name="findBy">The find by.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(System.String,System.Int32)">
            <summary>
            Finds te first row that matches findText in inColumn defined as a TD html element.
            If no match is found, null is returned.
            </summary>
            <param name="findText">The text to find.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:WatiN.Core.Table.FindRow(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Finds te first row that matches findTextRegex in inColumn defined as a TD html element.
            If no match is found, null is returned.
            </summary>
            <param name="findTextRegex">The regular expression the cell text must match.</param>
            <param name="inColumn">Index of the column to find the text in.</param>
            <returns>The searched for <see cref="T:WatiN.Core.TableRow"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:WatiN.Core.Table.WatiN#Core#Interfaces#ITable#TableRows">
            <summary>
            Returns all rows in the first TBODY section of a table. If no
            explicit sections are defined in the table (like THEAD, TBODY 
            and/or TFOOT sections), it will return all the rows in the table.
            This method also returns rows from nested tables.
            </summary>
            <value>The table rows.</value>
        </member>
        <member name="P:WatiN.Core.Table.TableBodies">
            <summary>
            Returns the table body sections belonging to this table (not including table body sections 
            from tables nested in this table).
            </summary>
            <value>The table bodies.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ITableCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ITable"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.CheckBox">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.ICheckBox"/> interface.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableBody.TableRows">
            <summary>
            Returns the table rows belonging to this table body (not including table rows 
            from tables nested in this table body).
            </summary>
            <value>The table rows.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableCellCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.TableCell"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Image">
            <summary>
            This class provides specialized functionality for a HTML img element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Image.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Image"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.HtmlDialogCollection">
            <summary>
            A typed collection of open <see cref="T:WatiN.Core.HtmlDialog"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.HtmlDialogCollection.GetEnumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.HtmlDialogCollection.Enumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.FrameCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Frame"/> instances within a <see cref="T:WatiN.Core.Document"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.FrameCollection.GetEnumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.FrameCollection.Enumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.Exceptions.TimeoutException">
            <summary>
            Thrown if waiting for a webpage or element times out.
            </summary>
        </member>
        <member name="T:WatiN.Core.Exceptions.MissingAlertException">
            <summary>
            Thrown if no more alerts are available when calling PopUpWatcher.PopAlert.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.ICompareElement">
            <summary>
            Summary description for ICompareElement.
            </summary>
        </member>
        <member name="T:WatiN.Core.BrowserType">
            <summary>
            Represents the types of browsers that can be used to run tests.
            </summary>
        </member>
        <member name="F:WatiN.Core.BrowserType.InternetExplorer">
            <summary>
            The installed version of Internet explorer
            </summary>
        </member>
        <member name="F:WatiN.Core.BrowserType.FireFox">
            <summary>
            The installed version of FireFox
            </summary>
        </member>
        <member name="T:WatiN.Core.TableRow">
            <summary>
            This class provides specialized functionality for a HTML tr element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableRow.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableRow"/> in the <see cref="T:WatiN.Core.TableRowCollection"/> of the parent <see cref="T:WatiN.Core.Table"/>.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="M:WatiN.Core.TableRow.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.TableRow"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:WatiN.Core.TableRow.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableRow"/> in the <see cref="T:WatiN.Core.TableRowCollection"/> of the parent <see cref="T:WatiN.Core.Table"/>.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="T:WatiN.Core.Style">
            <summary>
            Represent the CSS style rule.
            </summary>
        </member>
        <member name="M:WatiN.Core.Style.#ctor(mshtml.IHTMLStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Style"/> class.
            </summary>
            <param name="style">The underlying <see cref="T:mshtml.IHTMLStyle"/>.</param>
        </member>
        <member name="M:WatiN.Core.Style.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            The value of <see cref="P:WatiN.Core.Style.CssText"/>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Style.GetAttributeValue(System.String)">
            <summary>
            This methode can be used if the attribute isn't available as a property of
            of this <see cref="T:WatiN.Core.Style"/> class.
            </summary>
            <param name="attributeName">The attribute name. This could be different then named in
            the HTML. It should be the name of the property exposed by IE on it's style object.</param>
            <returns>The value of the attribute if available; otherwise <c>null</c> is returned.</returns>
        </member>
        <member name="P:WatiN.Core.Style.Color">
            <summary>
            Retrieves the color of the text of the element.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:WatiN.Core.Style.BackgroundColor">
            <summary>
            Retrieves the color behind the content of the element.
            Visit http://msdn.microsoft.com/workshop/author/dhtml/reference/colors/colors_name.asp
            for a full list of supported RGB colors and their names.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:WatiN.Core.Style.FontFamily">
            <summary>
            Retrieves the name of the font used for text in the element.
            </summary>
            <value>The font family.</value>
        </member>
        <member name="P:WatiN.Core.Style.FontSize">
            <summary>
            Retrieves a value that indicates the font size used for text in the element. 
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:WatiN.Core.Style.FontStyle">
            <summary>
            Retrieves the font style of the element as italic, normal, or oblique.
            </summary>
            <value>The fount style.</value>
        </member>
        <member name="P:WatiN.Core.Style.Height">
            <summary>
            Retrieves the height of the element.
            </summary>
            <value>The height of the element.</value>
        </member>
        <member name="P:WatiN.Core.Style.Display">
            <summary>
            Retrieves wheter the object is rendered.
            </summary>
            <remarks>For a complete list of the values visit 
            http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/display.asp .</remarks>
            <value>The display mode.</value>
        </member>
        <member name="P:WatiN.Core.Style.CssText">
            <summary>
            Retrieves the CSS text.
            </summary>
            <value>The CSS text.</value>
        </member>
        <member name="T:WatiN.Core.SelectList">
            <summary>
            This class provides specialized functionality for a HTML select element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.ClearList">
            <summary>
            This method clears the selected items in the select box and waits for the 
            onchange event to complete after the list is cleared
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.Select(System.String)">
            <summary>
            This method selects an item by text.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.Select(System.Text.RegularExpressions.Regex)">
            <summary>
            This method selects an item by text using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.SelectByValue(System.String)">
            <summary>
            Selects an item in a select box, by value.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.SelectByValue(System.Text.RegularExpressions.Regex)">
            <summary>
            Selects an item in a select box by value using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.Option(System.String)">
            <summary>
            Returns the <see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.Option(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the <see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.Interfaces.ISelectList.Option(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns the <see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/> which matches the specified <paramref name="findBy"/>.
            </summary>
            <param name="findBy">The find by to use.</param>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.Multiple">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.SelectList"/> allows multiple select.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.AllContents">
            <summary>
            Returns all the items in the select list as an array.
            An empty array is returned if the select box has no contents.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.Options">
            <summary>
            Returns all the <see cref="T:WatiN.Core.Option"/> elements in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.SelectedOptions">
            <summary>
            Returns the selected option(s) in an array list.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.SelectedItems">
            <summary>
            Returns the selected item(s) in a <see cref="T:System.Collections.Specialized.StringCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.SelectedItem">
            <summary>
            Returns the first selected item in the selectlist. Other items may be selected.
            Use SelectedItems to get a StringCollection of all selected items.
            When there's no item selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.SelectedOption">
            <summary>
            Returns the first selected option in the selectlist. Other options may be selected.
            Use SelectedOptions to get an ArrayList of all selected options.
            When there's no option selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ISelectList.HasSelectedItems">
            <summary>
            Gets a value indicating whether this instance has selected items.
            </summary>
            <value>
            	<c>true</c> if this instance has selected items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WatiN.Core.SelectList.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLElement)">
            <summary>
            Returns an initialized instance of a SelectList object.
            Mainly used by the collectionclass SelectLists.
            </summary>
            <param name="ie">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="htmlSelectElement">The HTML select element.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Returns an instance of a SelectList object.
            Mainly used internally.
            </summary>
            <param name="ie">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="finder">The element finder to use.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.SelectList"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.ClearList">
            <summary>
            This method clears the selected items in the select box and waits for the 
            onchange event to complete after the list is cleared
            </summary>
        </member>
        <member name="M:WatiN.Core.SelectList.Select(System.String)">
            <summary>
            This method selects an item by text.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.Select(System.Text.RegularExpressions.Regex)">
            <summary>
            This method selects an item by text using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.SelectByValue(System.String)">
            <summary>
            Selects an item in a select box, by value.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.SelectByValue(System.Text.RegularExpressions.Regex)">
            <summary>
            Selects an item in a select box by value using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(System.String)">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.SelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.SelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.SelectList.Option(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns the <see cref="P:WatiN.Core.SelectList.Options"/> which matches the specified <paramref name="findBy"/>.
            </summary>
            <param name="findBy">The find by to use.</param>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.SelectList.ElementTags">
            <summary>
            Gets the element tags supported by this element
            </summary>
            <value>Arraylist with ElementTag instances.</value>
        </member>
        <member name="P:WatiN.Core.SelectList.Multiple">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.SelectList"/> allows multiple select.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.SelectList.AllContents">
            <summary>
            Returns all the items in the select list as an array.
            An empty array is returned if the select box has no contents.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.Options">
            <summary>
            Returns all the <see cref="T:WatiN.Core.Option"/> elements in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedOptions">
            <summary>
            Returns the selected option(s) in an array list.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedItems">
            <summary>
            Returns the selected item(s) in a <see cref="T:System.Collections.Specialized.StringCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedItem">
            <summary>
            Returns the first selected item in the selectlist. Other items may be selected.
            Use SelectedItems to get a StringCollection of all selected items.
            When there's no item selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.SelectedOption">
            <summary>
            Returns the first selected option in the selectlist. Other options may be selected.
            Use SelectedOptions to get an ArrayList of all selected options.
            When there's no option selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.SelectList.HasSelectedItems">
            <summary>
            Gets a value indicating whether this instance has selected items.
            </summary>
            <value>
            	<c>true</c> if this instance has selected items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableRowCollection">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.ITableRowCollection"/>
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ITableRowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ITableRow"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableRowCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Mozilla.TableRow"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.SelectListCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ISelectListCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectListCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ISelectList"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Para">
            <summary>
            Represents the behavior and attributes of an HTML paragraph element implemented for the FireFox browser
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Para.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Para"/> class.
            </summary>
            <param name="outerHtml">The outer HTML that defines the element.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="T:WatiN.Core.IECollection">
            <summary>
            A typed collection of open <see cref="T:WatiN.Core.IE"/> instances.
            </summary>
        </member>
        <member name="M:WatiN.Core.IECollection.GetEnumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.IECollection.Enumerator">
            <exclude />
        </member>
        <member name="T:WatiN.Core.FormCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Form"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.FormCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FormCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.FormCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FormCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.FormCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Form"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.ElementAttributeBag">
            <summary>
            Wrapper around the <see cref="T:mshtml.IHTMLElement"/> object. Used by <see cref="M:WatiN.Core.Constraints.BaseConstraint.Compare(WatiN.Core.Interfaces.IAttributeBag)"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementAttributeBag.GetValue(System.String)">
            <summary>
            Gets the value for the given <paramref name="attributename" />
            </summary>
            <param name="attributename">The attributename.</param>
            <returns>The value of the attribute</returns>
        </member>
        <member name="P:WatiN.Core.ElementAttributeBag.IHTMLElement">
            <summary>
            Gets or sets the IHTMLelement from which the attribute values are read.
            </summary>
            <value>The IHTMLelement.</value>
        </member>
        <member name="P:WatiN.Core.ElementAttributeBag.Element">
            <summary>
            Returns a typed Element instance that can be casted to an ElementsContainer.
            </summary>
            <value>The element.</value>
        </member>
        <member name="P:WatiN.Core.ElementAttributeBag.ElementTyped">
            <summary>
            Returns a typed Element instance that can be casted to the specific WatiN type.
            </summary>
            <value>The element typed.</value>
        </member>
        <member name="T:WatiN.Core.DivCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Div"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IDivCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Div"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.DivCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DivCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.DivCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DivCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.DivCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Div"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.TableBody">
            <summary>
            This class provides specialized functionality for a HTML tbody element. 
            </summary>
        </member>
        <member name="M:WatiN.Core.TableBody.TableRow(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns the table row belonging to this table body (not including table rows 
            from tables nested in this table body).
            </summary>
            <param name="findBy">The find by.</param>
            <returns></returns>
        </member>
        <member name="P:WatiN.Core.TableBody.TableRows">
            <summary>
            Returns the table rows belonging to this table body (not including table rows 
            from tables nested in this table body).
            </summary>
            <value>The table rows.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableRow">
            <summary>
            Represents the FireFox implementation of table row
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableRow.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableRow"/> in the <see cref="T:WatiN.Core.TableRowCollection"/> of the parent <see cref="T:WatiN.Core.Table"/>.
            </summary>
            <value>The index of the row.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Table">
            <summary>
            This class provides specialized functionality for a HTML table element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.Table.TableRows">
            <summary>
            Returns all rows in the first TBODY section of a table. If no
            explicit sections are defined in the table (like THEAD, TBODY 
            and/or TFOOT sections), it will return all the rows in the table.
            This method also returns rows from nested tables.
            </summary>
            <value>The table rows.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Table.TableBodies">
            <summary>
            Returns the table body sections belonging to this table (not including table body sections 
            from tables nested in this table).
            </summary>
            <value>The table bodies.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Form">
            <summary>
            The FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IForm"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IAreaCollection.Filter(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns a new <see cref="T:WatiN.Core.AreaCollection"/> filtered by the <see cref="T:WatiN.Core.AttributeConstraint"/>.
            </summary>
            <param name="findBy">The attribute to filter by.</param>
            <returns>The filtered collection.</returns>
        </member>
        <member name="P:WatiN.Core.Interfaces.IAreaCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Area"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The area.</returns>
        </member>
        <member name="T:WatiN.Core.HtmlDialog">
            <summary>
            This is the main class to access a webpage within a modal or modeles
            HTML dialog.
            </summary>
        </member>
        <member name="T:WatiN.Core.DomContainer">
            <summary>
            This class hosts functionality for classes which are an entry point
            to a document and its elements and/or frames. Currently implemented
            by IE and HTMLDialog.
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.OnGetHtmlDocument">
            <summary>
            This method must be overriden by all sub classes
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.StartDialogWatcher">
            <summary>
            Call this function (from a subclass) as soon as the process is started.
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.AddDialogHandler(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Adds the dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.RemoveDialogHandler(WatiN.Core.DialogHandlers.IDialogHandler)">
            <summary>
            Removes the dialog handler.
            </summary>
            <param name="handler">The dialog handler.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.Dispose(System.Boolean)">
            <summary>
            This method must be called by its inheritor to dispose references
            to internal resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.WaitForComplete">
            <summary>
            Waits for the page to be completely loaded using the IE.Settings.WaitForCompleteTimeOut setting
            </summary>
        </member>
        <member name="M:WatiN.Core.DomContainer.WaitForComplete(System.Int32)">
            <summary>
            Waits for the page to be completely loaded.
            </summary>
            <param name="waitForCompleteTimeOut">The number of seconds to wait before timing out</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.WaitForComplete(WatiN.Core.Interfaces.IWait)">
            <summary>
            Waits for the page to be completely loaded
            </summary>
            <param name="waitForComplete">The wait for complete.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.CaptureWebPageToFile(System.String)">
            <summary>
            Captures the web page to file. The file extension is used to 
            determine the image format. The following image formats are
            supported (if the encoder is available on the machine):
            jpg, tif, gif, png, bmp.
            If you want more controle over the output, use <seealso cref="M:WatiN.Core.CaptureWebPage.CaptureWebPageToFile(System.String,System.Boolean,System.Boolean,System.Int32,System.Int32)"/>
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:WatiN.Core.DomContainer.Recycle">
            <summary>
            Recycles the DomContainer to its initially created state so that it can be reused.
            </summary>
        </member>
        <member name="P:WatiN.Core.DomContainer.ProcessID">
            <summary>
            Gets the process ID the Internet Explorer or HTMLDialog is running in.
            </summary>
            <value>The process ID.</value>
        </member>
        <member name="P:WatiN.Core.DomContainer.HtmlDocument">
            <summary>
            Returns the 'raw' html document for the internet explorer DOM.
            </summary>
        </member>
        <member name="P:WatiN.Core.DomContainer.DialogWatcher">
            <summary>
            Gets the dialog watcher.
            </summary>
            <value>The dialog watcher.</value>
        </member>
        <member name="T:WatiN.Core.Exceptions.FrameNotFoundException">
            <summary>
            Thrown if the searched for frame can't be found.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.#ctor(WatiN.Core.DialogHandlers.FileDownloadOptionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.FileDownloadHandler"/> class.
            Use this constructor if you want to Run, Open or Cancel the download.
            </summary>
            <param name="option">The option to choose on the File Download dialog.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.FileDownloadHandler"/> class.
            Use this contructor if you want to download and save a file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.HandleDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Handles the dialogs to download (and save) a file
            Mainly used internally by WatiN.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.IsFileDownloadDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a file download dialog by
            checking the style property of the window. It should match
            <c>window.StyleInHex == "94C80AC4"</c>
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a file download dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.IsDownloadProgressDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a download progress dialog by
            checking the style property of the window. It should match
            <c>(window.StyleInHex == "9CCA0BC4") || (window.StyleInHex == "94CA0BC4")</c>
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a download progress dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.IsFileSaveDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a file save as dialog by
            checking the style property of the window. It should match
            <c>(window.StyleInHex == "96CC20C4") || (window.StyleInHex == "96CC02C4")</c>
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a file save as dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.Exists(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines if a dialog still exists by checking the the existance of the 
            window.Hwnd and checking if the window is visible.
            </summary>
            <param name="dialog">The dialog.</param>
            <returns><c>true</c> if exists and visible, otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.ExistsOrNull(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Checks if window is null or <see cref="M:WatiN.Core.DialogHandlers.FileDownloadHandler.Exists(WatiN.Core.DialogHandlers.Window)"/>.
            </summary>
            <param name="dialog">The dialog.</param>
            <returns><c>true</c> if null or exists, otherwise <c>false</c></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.WaitUntilFileDownloadDialogIsHandled(System.Int32)">
            <summary>
            Wait until the save/open/run dialog opens.
            This exists because some web servers are slower to start a file than others.
            </summary>
            <param name="waitDurationInSeconds">duration in seconds to wait</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.FileDownloadHandler.WaitUntilDownloadCompleted(System.Int32)">
            <summary>
            Wait until the download progress window does not exist any more
            </summary>
            <param name="waitDurationInSeconds">duration in seconds to wait</param>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.FileDownloadHandler.HasHandledFileDownloadDialog">
            <summary>
            Gets a value indicating whether this instance has handled a file download dialog.
            </summary>
            <value>
            	<c>true</c> if this instance has handled a file download dialog; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.FileDownloadHandler.SaveAsFilename">
            <summary>
            Gets the full save as filename used when the downloaded file will be saved to disk.
            </summary>
            <value>The save as filename.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.XULBrowser">
            <summary>
            Wrapper around the XUL:browser class, see: http://developer.mozilla.org/en/docs/XUL:browser
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.#ctor(WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.XULBrowser"/> class.
            </summary>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.Back">
            <summary>
            Navigates to the previous page in the browser history.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.Forward">
            <summary>
            Navigates to the next back in the browser history.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.LoadUri(System.Uri)">
            <summary>
            Load a URL into the document. see: http://developer.mozilla.org/en/docs/XUL:browser#m-loadURI
            </summary>
            <param name="url">The URL to laod.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.WaitForComplete">
            <summary>
            Waits until the document is loaded
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.XULBrowser.WaitForComplete(WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Waits until the document, associated with the <param name="clientPort" /> is loaded.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.XULBrowser.ClientPort">
            <summary>
            Gets the client port used to communicate with the instance of FireFox.
            </summary>
            <value>The client port.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.RadioButtonCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IRadioButtonCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.RadioButtonCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.IRadioButton"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Option">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.IOption"/> interface.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IOption.Clear">
            <summary>
            De-selects this option in the selectlist (if selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Interfaces.IOption.Select">
            <summary>
            Selects this option in the selectlist (if not selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IOption.Value">
            <summary>
            Returns the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IOption.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IOption.Index">
            <summary>
            Returns the index of this <see cref="T:WatiN.Core.Option"/> in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IOption.DefaultSelected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected by default.
            </summary>
            <value><c>true</c> if selected by default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Interfaces.IOption.ParentSelectList">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The parent <see cref="T:WatiN.Core.SelectList"/>.</value>
        </member>
        <member name="M:WatiN.Core.Mozilla.Option.Clear">
            <summary>
            De-selects this option in the selectlist (if selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Option.Select">
            <summary>
            Selects this option in the selectlist (if not selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.Option.Value">
            <summary>
            Returns the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Option.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Option.Index">
            <summary>
            Returns the index of this <see cref="T:WatiN.Core.Option"/> in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Option.DefaultSelected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected by default.
            </summary>
            <value><c>true</c> if selected by default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.Option.ParentSelectList">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The parent <see cref="T:WatiN.Core.SelectList"/>.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.FrameCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IFrameCollection"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.DivCollection">
            <summary>
            Firefox implementation of <see cref="T:WatiN.Core.Interfaces.IDivCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.DivCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.IDiv"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Exceptions.ElementDisabledException">
            <summary>
            Thrown if an element is disabled and the current action (like clicking a
            disabled link) is not allowed.
            </summary>
        </member>
        <member name="T:WatiN.Core.LabelCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Label"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ILabelCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ILabel"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.LabelCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.LabelCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.LabelCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.LabelCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.LabelCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Label"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.ImageCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Image"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IImageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.IImage"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.ImageCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ImageCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ImageCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ImageCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.ImageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Image"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Exceptions.IENotFoundException">
            <summary>
            Thrown if the searched for internet explorer (IE) can't be found.
            </summary>
        </member>
        <member name="T:WatiN.Core.Comparers.StringEqualsAndCaseInsensitiveComparer">
            <summary>
            Class that supports a simple matching of two strings.
            </summary>
        </member>
        <member name="T:WatiN.Core.WinInet">
            <summary>
            Provides low-level support for manipulating cookies, clearing caches and
            setting internet options.
            </summary>
            <remarks author="jeff.brown">
            This cookie clearing code is based on the sample code from the following MS KB article:
            http://support.microsoft.com/default.aspx?scid=kb;EN-US;326201
            Beware, the code presented in that article is somewhat buggy so it has been
            completely rewritten here.
            </remarks>
        </member>
        <member name="T:WatiN.Core.WinInet.ClearCookiesCommand">
            <summary>
            Holds state for the duration of the clear cookies operation because we
            don't have anonymous delegates in .Net 1.1.
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableCellCollection">
            <summary>
            The FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ITableCellCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableCellCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Mozilla.TableCell"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.AreaCollection">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.IAreaCollection"/> interface.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.AreaCollection.Filter(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns a new <see cref="T:WatiN.Core.AreaCollection"/> filtered by the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="findBy">The attribute to filter by.</param>
            <returns>The filtered collection.</returns>
        </member>
        <member name="P:WatiN.Core.Mozilla.AreaCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Area"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The area.</returns>
        </member>
        <member name="T:WatiN.Core.Label">
            <summary>
            This class provides specialized functionality for a HTML label element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Label.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Label"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.FileUpload">
            <summary>
            This class provides specialized functionality for a HTML input element 
            of type file. 
            </summary>
        </member>
        <member name="M:WatiN.Core.FileUpload.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.FileUpload"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.Exceptions.SelectListItemNotFoundException">
            <summary>
            Thrown if the searched for selectlist item (option) can't be found.
            </summary>
        </member>
        <member name="T:WatiN.Core.ElementsSupport">
            <summary>
            Summary description for SubElements.
            </summary>
        </member>
        <member name="M:WatiN.Core.ElementsSupport.#ctor">
            <summary>
            Prevent creating an instance of this class (contains only static members)
            </summary>
        </member>
        <member name="T:WatiN.Core.TableRowCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TableRow"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableRowCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableRowCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TableRowCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableRowCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.TableRowCollection.WatiN#Core#Interfaces#ITableRowCollection#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.TableRow"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.TextFieldCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ITextFieldCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.TextFieldCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ITextField"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableCell">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ITableCell"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableCell.ParentTableRow">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.TableRow"/> of this <see cref="T:WatiN.Core.TableCell"/>.
            </summary>
            <value>The parent table row.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableCell.Index">
            <summary>
            Gets the index of the <see cref="T:WatiN.Core.TableCell"/> in the <see cref="T:WatiN.Core.TableCellCollection"/> of the parent <see cref="T:WatiN.Core.TableRow"/>.
            </summary>
            <value>The index of the cell.</value>
        </member>
        <member name="T:WatiN.Core.Button">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            button, submit, image and reset.
            </summary>
        </member>
        <member name="M:WatiN.Core.Button.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLElement)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Button"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="element">The input button or button element.</param>
        </member>
        <member name="M:WatiN.Core.Button.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Button"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="finder">The input button or button element.</param>
        </member>
        <member name="M:WatiN.Core.Button.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Button"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:WatiN.Core.Button.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:WatiN.Core.Button.Value">
            <summary>
            The text displayed at the button.
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="P:WatiN.Core.Button.Text">
            <summary>
            The text displayed at the button (alias for the Value property).
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.#ctor(WatiN.Core.DomContainer)">
            <summary>
            Waits until the given <paramref name="domContainer"/> is ready loading the webpage. It will timeout after
            <seealso cref="!:IE.Settings.WaitForCompleteTimeOut"/> seconds.
            </summary>
            <param name="domContainer">The page to wait for in this domcontainer</param>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.#ctor(WatiN.Core.DomContainer,System.Int32)">
            Waits until the given <paramref name="domContainer"/> is ready loading the webpage. It will timeout after
            <paramref name="waitForCompleteTimeOut"> seconds.</paramref>
            <param name="domContainer">The page to wait for in this domcontainer</param>
            <param name="waitForCompleteTimeOut">Time to wait in seconds</param>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.DoWait">
            <summary>
            This method calls InitTimeOut and waits till IE is ready
            processing or the timeout period has expired.
            </summary>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.WaitForCompleteOrTimeout">
            <summary>
            This method waits till IE is ready processing 
            or the timeout period has expired. You should
            call InitTimeout prior to calling this method.
            </summary>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.InitTimeout">
            <summary>
            This method is called to initialise the start time for
            determining a time out. It's set to the current time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.IsTimedOut">
            <summary>
            This method evaluates the time between the last call to InitTimeOut
            and the current time. If the timespan is more than 30 seconds, the
            return value will be true.
            </summary>
            <returns>If the timespan is more than 30 seconds, the
            return value will be true</returns>
        </member>
        <member name="M:WatiN.Core.WaitForComplete.ThrowExceptionWhenTimeout(System.String)">
            <summary>
            This method checks the return value of IsTimedOut. When true, it will
            throw a TimeoutException with the timeoutMessage param as message.
            </summary>
            <param name="timeoutMessage">The message to present when the TimeoutException is thrown</param>
        </member>
        <member name="T:WatiN.Core.Span">
            <summary>
            This class provides specialized functionality for a HTML span element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Span.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Span"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.Mozilla.LabelCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ILabelCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.LabelCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ILabel"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Label">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ILabel"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.ImageCollection">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.IImageCollection"/> interface.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.ImageCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.IImage"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFox.disposed">
            <summary>
            <c>true</c> if the <see cref="M:WatiN.Core.Mozilla.FireFox.Dispose"/> method has been called to release resources.
            </summary>
        </member>
        <member name="F:WatiN.Core.Mozilla.FireFox.xulBrowser">
            <summary>
            Wrapper for the XUL:Browser object see: http://developer.mozilla.org/en/docs/XUL:browser
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.FireFox"/> class.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.FireFox"/> class.
            </summary>
            <param name="url">The url to go to</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.FireFox"/> class.
            </summary>
            <param name="uri">The url to go to</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:WatiN.Core.Mozilla.FireFox"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.ContainsText(System.String)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Interfaces.IDocument.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.ContainsText(System.Text.RegularExpressions.Regex)">
            <summary>
            Determines whether the text inside the HTML Body element contains the given <paramref name="regex"/>.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>
                <c>true</c> if the specified text is contained in <see cref="P:WatiN.Core.Interfaces.IDocument.Html"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.FindText(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the text inside the HTML Body element that matches the regular expression.
            </summary>
            <param name="regex">The regular expression to match with.</param>
            <returns>The matching text, or null if none.</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Back">
            <summary>
            Navigates the browser back to the previously displayed Url (like the back
            button in Internet Explorer).
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.BringToFront">
            <summary>
            Brings the current browser to the front (makes it the top window)
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Forward">
            <summary>
            Navigates the browser forward to the next displayed Url (like the forward
            button in Internet Explorer).
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.GetWindowStyle">
            <summary>
            Gets the window style.
            </summary>
            <returns>The style currently applied to the ie window.</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.GoTo(System.String)">
            <summary>
            Navigates to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   FireFox ff = new FireFox();
                   ff.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.GoTo(System.Uri)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL specified as a wel formed Uri.</param>
            <example>
            The following example creates an Uri and Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            using System;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   Uri URL = new Uri("http://watin.sourceforge.net");
                   IE ie = new IE();
                   ie.GoTo(URL);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.PressTab">
            <summary>
            Sends a Tab key to the current browser window to simulate tabbing through
            the elements (and address bar).
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.GetExecutablePath">
            <summary>
            Initalizes the executable path.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.GetExecutablePathUsingRegistry(Microsoft.Win32.RegistryKey)">
            <summary>
            Initializes the executable path to FireFox using the registry.
            </summary>
            <param name="mozillaKey">The mozilla key.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Refresh">
            <summary>
            Reloads the currently displayed webpage.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Reopen">
            <summary>
            Closes then reopens the browser navigating to a blank page.
            </summary>
            <remarks>
            Useful when clearing the cookie cache and continuing execution to a test.
            </remarks>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.RunScript(System.String)">
            <summary>
            Runs the javascript code in the current browser.
            </summary>
            <param name="javaScriptCode">The javascript code.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.ShowWindow(WatiN.Core.NativeMethods.WindowShowStyle)">
            <summary>
            Make the referenced Internet Explorer full screen, minimized, maximized and more.
            </summary>
            <param name="showStyle">The style to apply.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.WaitForComplete">
            <summary>
            Waits until the page is completely loaded
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.FireFox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFox.ProcessID">
            <summary>
            Gets the process ID the current browser is running in.
            </summary>
            <value>The process ID the current browser is running in.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFox.CurrentProcessCount">
            <summary>
            Gets the number of running FireFox processes.
            </summary>
            <value>The number of running FireFox processes.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFox.CurrentProcess">
            <summary>
            Gets the current FireFox process.
            </summary>
            <value>The current FireFox process or null if none is found.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.FireFox.PathToExe">
            <summary>
            Gets the path to FireFox executable.
            </summary>
            <value>The path to exe.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Div">
            <summary>
            Represents the behavior and attributes of an HTML div element implemented for the FireFox browser.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.IDiv">
            <summary>
            Represents the behavior and attributes of an HTML div element
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Div.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Div"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="T:WatiN.Core.ElementFinder">
            <summary>
            This class is mainly used internally by WatiN to find elements in
            an <see cref="T:mshtml.IHTMLElementCollection"/> or <see cref="T:System.Collections.ArrayList"/> matching
            the given <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.DialogHandlers.SecurityAlertDialogHandler">
            <summary>
            This class handles the Security Warning dialog and does press
            the OK button when the dialog shows up.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.SecurityAlertDialogHandler.HandleDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Handles the dialog if the <paramref name="window" /> is a
            security alert dialog.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.SecurityAlertDialogHandler.IsSecurityAlertDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a security alert dialog.
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a security alert dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Pop">
            <summary>
            Pops the most recent message from a que of displayed alert and confirm windows.
            Use this method to get the displayed message.
            </summary>
            <returns>The displayed message.</returns>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Clear">
            <summary>
            Clears all the messages from the que of displayed alert and confirm windows.
            </summary>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Count">
            <summary>
            Gets the count of the messages in the que of displayed alert and confirm windows.
            </summary>
            <value>The count of the alert and confirm messages in the que.</value>
        </member>
        <member name="P:WatiN.Core.DialogHandlers.AlertAndConfirmDialogHandler.Alerts">
            <summary>
            Gets the alert and confirm messages in the que of displayed alert and confirm windows.
            </summary>
            <value>The alert and confirm messages in the que.</value>
        </member>
        <member name="T:WatiN.Core.NativeMethods">
            <summary>
            Class that contains native win32 API support.
            </summary>
        </member>
        <member name="M:WatiN.Core.NativeMethods.#ctor">
            <summary>
            Prevent creating an instance of this class (contains only static members)
            </summary>
        </member>
        <member name="M:WatiN.Core.NativeMethods.GetForegroundWindow">
            <summary>
            The GetForegroundWindow function returns a handle to the foreground window.
            </summary>
        </member>
        <member name="M:WatiN.Core.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
             <summary>Shows a Window</summary>
             <remarks>
             <para>To perform certain special effects when showing or hiding a 
             window, use AnimateWindow.</para>
            <para>The first time an application calls ShowWindow, it should use 
            the WinMain function's nCmdShow parameter as its nCmdShow parameter. 
            Subsequent calls to ShowWindow must use one of the values in the 
            given list, instead of the one specified by the WinMain function's 
            nCmdShow parameter.</para>
            <para>As noted in the discussion of the nCmdShow parameter, the 
            nCmdShow value is ignored in the first call to ShowWindow if the 
            program that launched the application specifies startup information 
            in the structure. In this case, ShowWindow uses the information 
            specified in the STARTUPINFO structure to show the window. On 
            subsequent calls, the application must call ShowWindow with nCmdShow 
            set to SW_SHOWDEFAULT to use the startup information provided by the 
            program that launched the application. This behavior is designed for 
            the following situations: </para>
            <list type="">
                <item>Applications create their main window by calling CreateWindow 
                with the WS_VISIBLE flag set. </item>
                <item>Applications create their main window by calling CreateWindow 
                with the WS_VISIBLE flag cleared, and later call ShowWindow with the 
                SW_SHOW flag set to make it visible.</item>
            </list></remarks>
             <param name="hWnd">Handle to the window.</param>
             <param name="nCmdShow">Specifies how the window is to be shown. 
             This parameter is ignored the first time an application calls 
             ShowWindow, if the program that launched the application provides a 
             STARTUPINFO structure. Otherwise, the first time ShowWindow is called, 
             the value should be the value obtained by the WinMain function in its 
             nCmdShow parameter. In subsequent calls, this parameter can be one of 
             the WindowShowStyle members.</param>
             <returns>
             If the window was previously visible, the return value is nonzero. 
             If the window was previously hidden, the return value is zero.
             </returns>
        </member>
        <member name="M:WatiN.Core.NativeMethods.GetWindowText(System.IntPtr)">
            <summary>
            This method incapsulates all the details of getting
            the full length text in a StringBuffer and returns
            the StringBuffer contents as a string.
            </summary>
            <param name="hwnd">The handle to the window</param>
            <returns>Text of the window</returns>
        </member>
        <member name="M:WatiN.Core.NativeMethods.GetClassName(System.IntPtr)">
            <summary>
            This method incapsulates all the details of getting
            the full length classname in a StringBuffer and returns
            the StringBuffer contents as a string.
            </summary>
            <param name="hwnd">The handle to the window</param>
            <returns>Text of the window</returns>
        </member>
        <member name="T:WatiN.Core.NativeMethods.WindowShowStyle">
            <summary>
            Enumeration of the different ways of showing a window using 
            ShowWindow
            </summary>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.Hide">
            <summary>Hides the window and activates another window.</summary>
            <remarks>See SW_HIDE</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowNormal">
            <summary>Activates and displays a window. If the window is minimized 
            or maximized, the system restores it to its original size and 
            position. An application should specify this flag when displaying 
            the window for the first time.</summary>
            <remarks>See SW_SHOWNORMAL</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowMinimized">
            <summary>Activates the window and displays it as a minimized window.</summary>
            <remarks>See SW_SHOWMINIMIZED</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowMaximized">
            <summary>Activates the window and displays it as a maximized window.</summary>
            <remarks>See SW_SHOWMAXIMIZED</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.Maximize">
            <summary>Maximizes the specified window.</summary>
            <remarks>See SW_MAXIMIZE</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowNormalNoActivate">
            <summary>Displays a window in its most recent size and position. 
            This value is similar to "ShowNormal", except the window is not 
            actived.</summary>
            <remarks>See SW_SHOWNOACTIVATE</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.Show">
            <summary>Activates the window and displays it in its current size 
            and position.</summary>
            <remarks>See SW_SHOW</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.Minimize">
            <summary>Minimizes the specified window and activates the next 
            top-level window in the Z order.</summary>
            <remarks>See SW_MINIMIZE</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowMinNoActivate">
            <summary>Displays the window as a minimized window. This value is 
            similar to "ShowMinimized", except the window is not activated.</summary>
            <remarks>See SW_SHOWMINNOACTIVE</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowNoActivate">
            <summary>Displays the window in its current size and position. This 
            value is similar to "Show", except the window is not activated.</summary>
            <remarks>See SW_SHOWNA</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.Restore">
            <summary>Activates and displays the window. If the window is 
            minimized or maximized, the system restores it to its original size 
            and position. An application should specify this flag when restoring 
            a minimized window.</summary>
            <remarks>See SW_RESTORE</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ShowDefault">
            <summary>Sets the show state based on the SW_ value specified in the 
            STARTUPINFO structure passed to the CreateProcess function by the 
            program that started the application.</summary>
            <remarks>See SW_SHOWDEFAULT</remarks>
        </member>
        <member name="F:WatiN.Core.NativeMethods.WindowShowStyle.ForceMinimized">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread 
            that owns the window is hung. This flag should only be used when 
            minimizing windows from a different thread.</summary>
            <remarks>See SW_FORCEMINIMIZE</remarks>
        </member>
        <member name="T:WatiN.Core.CaptureWebPage">
            <summary>
            This class contains functionality to capture an image from a web page and save it to a file.
            The code was written by Doug Weems at http://www.codeproject.com/cs/media/IECapture.asp/>
            </summary>
        </member>
        <member name="T:WatiN.Core.OptionCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Option"/> elements within a <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IOptionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Span"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:WatiN.Core.OptionCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.OptionCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.OptionCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.OptionCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:WatiN.Core.OptionCollection.Filter(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Filters this collection with the specified find by.
            </summary>
            <param name="findBy">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> to filter this collection.</param>
            <returns>A filtered <see cref="T:WatiN.Core.OptionCollection"/></returns>
        </member>
        <member name="P:WatiN.Core.OptionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Span"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.TableBody">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ITableBody"/>
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.TableBody.TableRows">
            <summary>
            Returns the table rows belonging to this table body (not including table rows 
            from tables nested in this table body).
            </summary>
            <value>The table rows.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.OptionCollection">
            <summary>
            The FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IOptionCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.OptionCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Mozilla.Span"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.LinkCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ILinkCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.LinkCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ILink"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Image">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IImage"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementFinder.#ctor(WatiN.Core.Mozilla.Element,System.String,WatiN.Core.Constraints.BaseConstraint,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Creates a new instance of the <see cref="T:WatiN.Core.Mozilla.ElementFinder"/> class.
            </summary>
            <param name="parentElement">The element to start searching from.</param>
            <param name="tagname">the tagname of the element to be found</param>
            <param name="constraint">The constraint which should be met</param>
            <param name="clientPort"></param>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementFinder.#ctor(WatiN.Core.Mozilla.Element,System.String,System.String,WatiN.Core.Constraints.BaseConstraint,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Creates a new instance of the <see cref="T:WatiN.Core.Mozilla.ElementFinder"/> class.
            </summary>
            <param name="parentElement">The element to start searching from.</param>
            <param name="tagname">The tagname of the element to be found</param>
            <param name="type">The type(s) the input element should match with</param>
            <param name="constraint">The constraint which should be met</param>
            <param name="clientPort"></param>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementFinder.#ctor(WatiN.Core.Mozilla.Element,System.Collections.Generic.List{WatiN.Core.ElementTag},WatiN.Core.Constraints.BaseConstraint,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Creates a new instance of the <see cref="T:WatiN.Core.Mozilla.ElementFinder"/> class.
            </summary>
            <param name="parentElement">The element to start searching from.</param>
            <param name="tagnames">A list of the tagnames of the element to be found</param>
            <param name="constraint">The constraint which should be met</param>
            <param name="clientPort"></param>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementFinder.FindFirst">
            <summary>
            Finds the first element that matches the given constaints
            </summary>
            <returns>A javascript variable name with a reference to the matching element, or null of no match is found.</returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.ElementFinder.FindAll">
            <summary>
            Finds all the elements that match the given constraint
            </summary>
            <returns>A list of element references that match the given constraint</returns>
        </member>
        <member name="T:WatiN.Core.Mozilla.ButtonCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.IButtonCollection"/> interface.
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.IButtonCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Button"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:WatiN.Core.Mozilla.ButtonCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Button"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Link">
            <summary>
            This class provides specialized functionality for a HTML link element.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.ILink">
            <summary>
            Represents the behavior and attributes of an HTML link element
            </summary>
        </member>
        <member name="P:WatiN.Core.Interfaces.ILink.Url">
            <summary>
            Gets the URL of this link element.
            </summary>
            <value>The URL of this link element.</value>
        </member>
        <member name="M:WatiN.Core.Link.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Link"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.IEAttributeBag">
            <summary>
            Wrapper around the <see cref="T:SHDocVw.InternetExplorer"/> object. Used by <see cref="M:WatiN.Core.Constraints.BaseConstraint.Compare(WatiN.Core.Interfaces.IAttributeBag)"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.IE">
            <summary>
            This is the main class to access a webpage in Internet Explorer to 
            get to all the elements and (i)frames on the page.
            
            </summary>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                   ie.Link(Find.ByText("RSS Feeds")).Click;
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.AttachToIE(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Attach to an existing Internet Explorer. 
            The first instance that matches the given <paramref name="findBy"/> will be returned.
            The attached Internet Explorer will be closed after destroying the IE instance.
            </summary>
            <param name="findBy">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> of the IE window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns>An <see cref="T:WatiN.Core.IE"/> instance.</returns>
            <exception cref="T:WatiN.Core.Exceptions.IENotFoundException">
            IENotFoundException will be thrown if an Internet Explorer window with the given <paramref name="findBy"/> isn't found within 30 seconds.
            To change this default, set <see cref="P:WatiN.Core.IE.Settings.AttachToIETimeOut"/>
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            IE ieExample = IE.AttachToIE(Find.ByTitle("Example"));
            </code>
            A partial match should also work
            <code>
            IE ieExample = IE.AttachToIE(Find.ByTitle("Exa"));
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.AttachToIE(WatiN.Core.Constraints.BaseConstraint,System.Int32)">
            <summary>
            Attach to an existing Internet Explorer. 
            The first instance that matches the given <paramref name="findBy"/> will be returned.
            The attached Internet Explorer will be closed after destroying the IE instance.
            </summary>
            <param name="findBy">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> of the IE window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <param name="timeout">The number of seconds to wait before timing out</param>
            <returns>An <see cref="T:WatiN.Core.IE"/> instance.</returns>
            <exception cref="T:WatiN.Core.Exceptions.IENotFoundException">
            IENotFoundException will be thrown if an Internet Explorer window with the given 
            <paramref name="findBy"/> isn't found within <paramref name="timeout"/> seconds.
            </exception>
            <example>
            The following example searches for an Internet Exlorer instance with "Example"
            in it's titlebar (showing up as "Example - Microsoft Internet Explorer").
            It will try to find an Internet Exlorer instance for 60 seconds maxs.
            When found, ieExample will hold a pointer to this Internet Explorer instance and
            can be used to test the Example page.
            <code>
            IE ieExample = IE.AttachToIE(Find.ByTitle("Example"), 60);
            </code>
            A partial match should also work
            <code>
            IE ieExample = IE.AttachToIE(Find.ByTitle("Exa"), 60);
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.Exists(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Does the specified Internet Explorer exist.
            </summary>
            <param name="findBy">The <see cref="T:WatiN.Core.Constraints.BaseConstraint"/> of the IE window to find. 
            <c>Find.ByUrl()</c>, <c>Find.ByUri()</c>, <c>Find.ByTitle()</c> and <c>Find.By("hwnd", windowHandle)</c> are supported.</param>
            <returns><c>true</c> if an Internet Explorer instance matches the given <paramref name="findBy"/> <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>. Otherwise it returns <c>false</c>. </returns>
        </member>
        <member name="M:WatiN.Core.IE.InternetExplorers">
            <summary>
            Creates a collection of new IE instances associated with open Internet Explorer windows.
            </summary>
            <returns>An IE instance which is complete loaded.</returns>
            <example>
            This code snippet illustrates the use of this method to found out the number of open
            Internet Explorer windows.
            <code>int IECount = IE.InternetExplorers.Length;</code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.InternetExplorersNoWait">
            <summary>
            Creates a collection of new IE instances associated with open Internet Explorer windows. Use this
            method if you don't want WatiN to wait until a document is fully loaded before returning it.
            This might be handy in situations where you encounter Internet Explorer instances which are always
            busy loading and that way blocks itteration through the collection.
            </summary>
            <returns>An IE instance which might not have been complete loaded yet.</returns>
            <example>
            This code snippet illustrates the use of this method to itterate through all internet explorer instances.
            <code>
            foreach (IE ie in IE.InternetExplorersNoWait)
            {
            // do something but be aware that the page might not be completely loaded yet.
            }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor">
            <summary>
            Opens a new Internet Explorer with a blank page. 
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Boolean)">
            <summary>
            Opens a new Internet Explorer with a blank page. 
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="url">The URL te open</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="url">The URL te open</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="uri">The Uri te open</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using System;
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"));
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            <note>
            When the <see cref="T:WatiN.Core.IE"/>
            instance is destroyed the created Internet Explorer window will also be closed.
            </note>
            </summary>
            <param name="uri">The Uri te open</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using System;
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public OpenWatiNWebsite()
                 {
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"));
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String,WatiN.Core.DialogHandlers.LogonDialogHandler)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            </summary>
            <param name="url">The Url te open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE("http://watin.sourceforge.net", logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.String,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="url"/>.
            </summary>
            <param name="url">The Url te open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE("http://watin.sourceforge.net", logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri te open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Opens a new Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri te open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded constructors.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.#ctor(System.Object)">
            <summary>
            Use existing InternetExplorer object. The param is of type
            object because otherwise all projects using WatiN should also
            reference the Interop.SHDocVw assembly.
            </summary>
            <param name="shDocVwInternetExplorer">The Interop.SHDocVw.InternetExplorer object to use</param>
        </member>
        <member name="M:WatiN.Core.IE.GoTo(System.Uri)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL specified as a wel formed Uri.</param>
            <example>
            The following example creates an Uri and Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            using System;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   Uri URL = new Uri("http://watin.sourceforge.net");
                   IE ie = new IE();
                   ie.GoTo(URL);
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.GoTo(System.String)">
            <summary>
            Navigates Internet Explorer to the given <paramref name="url" />.
            </summary>
            <param name="url">The URL to GoTo.</param>
            <example>
            The following example creates a new Internet Explorer instance and navigates to
            the WatiN Project website on SourceForge.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE();
                   ie.GoTo("http://watin.sourceforge.net");
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.Back">
            <summary>
            Navigates the browser back to the previously displayed Url (like the back
            button in Internet Explorer). 
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.Forward">
            <summary>
            Navigates the browser forward to the next displayed Url (like the forward
            button in Internet Explorer). 
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.Refresh">
            <summary>
            Reloads the currently displayed webpage (like the Refresh button in 
            Internet Explorer).
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.PressTab">
            <summary>
            Sends a Tab key to the IE window to simulate tabbing through
            the elements (and adres bar).
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.BringToFront">
            <summary>
            Brings the referenced Internet Explorer to the front (makes it the top window)
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.ShowWindow(WatiN.Core.NativeMethods.WindowShowStyle)">
            <summary>
            Make the referenced Internet Explorer full screen, minimized, maximized and more.
            </summary>
            <param name="showStyle">The style to apply.</param>
        </member>
        <member name="M:WatiN.Core.IE.GetWindowStyle">
            <summary>
            Gets the window style.
            </summary>
            <returns>The style currently applied to the ie window.</returns>
        </member>
        <member name="M:WatiN.Core.IE.Close">
            <summary>
            Closes the referenced Internet Explorer. Almost
            all other functionality in this class and the element classes will give
            exceptions when used after closing the browser.
            </summary>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge. 
            <code>
            using WatiN.Core;
            using System.Diagnostics;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   IE ie = new IE("http://watin.sourceforge.net");
                   Debug.WriteLine(ie.Html);
                   ie.Close;
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.Reopen">
            <summary>
            Closes then reopens Internet Explorer with a blank page.
            </summary>
            <remarks>
            You could also use one of the overloaded methods.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                   ie.Reopen();
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.Reopen(System.Uri,WatiN.Core.DialogHandlers.LogonDialogHandler,System.Boolean)">
            <summary>
            Closes then reopens Internet Explorer and navigates to the given <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri to open</param>
            <param name="logonDialogHandler">A <see cref="T:WatiN.Core.DialogHandlers.LogonDialogHandler"/> class instanciated with the logon credentials.</param>
            <param name="createInNewProcess">if set to <c>true</c> the IE instance is created in a new process.</param>
            <remarks>
            You could also use one of the overloaded methods.
            </remarks>
            <example>
            The following example creates a new Internet Explorer instances and navigates to
            the WatiN Project website on SourceForge leaving the created Internet Explorer open.
            <code>
            using WatiN.Core;
            
            namespace NewIEExample
            {
               public class WatiNWebsite
               {
                 public WatiNWebsite()
                 {
                   LogonDialogHandler logon = new LogonDialogHandler("username", "password");
                   IE ie = new IE(new Uri("http://watin.sourceforge.net"), logon);
                   ie.Reopen();
                 }
               }
             }
            </code>
            </example>
        </member>
        <member name="M:WatiN.Core.IE.ForceClose">
            <summary>
            Closes <i>all</i> running instances of Internet Explorer by killing the
            process these instances run in. 
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.ClearCookies">
            <summary>
            Clears all browser cookies.
            </summary>
            <remarks>
            Internet Explorer maintains an internal cookie cache that does not immediately
            expire when cookies are cleared.  This is the case even when the cookies are
            cleared using the Internet Options dialog.  If cookies have been used by
            the current browser session it may be necessary to <see cref="M:WatiN.Core.IE.Reopen"/> the
            browser to ensure the internal cookie cache is flushed.  Therefore it is
            recommended to clear cookies at the beginning of the test before navigating
            to any pages (other than "about:blank") to avoid having to reopen the browser.
            </remarks>
            <example>
            <code>
            // Clear cookies first.
            IE ie = new IE();
            ie.ClearCookies();
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.IE.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IE.ClearCookies(System.String)">
            <summary>
            Clears the browser cookies associated with a particular site and to
            any of the site's subdomains.
            </summary>
            <remarks>
            Internet Explorer maintains an internal cookie cache that does not immediately
            expire when cookies are cleared.  This is the case even when the cookies are
            cleared using the Internet Options dialog.  If cookies have been used by
            the current browser session it may be necessary to <see cref="M:WatiN.Core.IE.Reopen"/> the
            browser to ensure the internal cookie cache is flushed.  Therefore it is
            recommended to clear cookies at the beginning of the test before navigating
            to any pages (other than "about:blank") to avoid having to reopen the browser.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <example>
            <code>
            // Clear cookies first.
            IE ie = new IE();
            ie.ClearCookies("http://www.example.com/");
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.IE.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IE.ClearCache">
            <summary>
            Clears the browser cache but leaves cookies alone.
            </summary>
            <example>
            <code>
            // Clear the cache and cookies.
            IE ie = new IE();
            ie.ClearCache();
            ie.ClearCookies();
            
            // Then go to the site and sign in.
            ie.GoTo("http://www.example.com/");
            ie.Link(Find.ByText("Sign In")).Click();
            </code>
            </example>
            <seealso cref="M:WatiN.Core.IE.Reopen"/>
        </member>
        <member name="M:WatiN.Core.IE.GetCookie(System.String,System.String)">
            <summary>
            Gets the value of a cookie.
            </summary>
            <remarks>
            This method cannot retrieve the value of cookies protected by the <c>httponly</c> security option.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <param name="cookieName">The cookie name.</param>
            <returns>The cookie data of the form:
            &lt;name&gt;=&lt;value&gt;[; &lt;name&gt;=&lt;value&gt;]...
            [; expires=&lt;date:DAY, DD-MMM-YYYY HH:MM:SS GMT&gt;][; domain=&lt;domain_name&gt;]
            [; path=&lt;some_path&gt;][; secure][; httponly].  Returns null if there are no associated cookies.</returns>
            <seealso cref="M:WatiN.Core.IE.ClearCookies"/>
            <seealso cref="M:WatiN.Core.IE.SetCookie(System.String,System.String)"/>
        </member>
        <member name="M:WatiN.Core.IE.SetCookie(System.String,System.String)">
            <summary>
            Sets the value of a cookie.
            </summary>
            <remarks>
            If no expiration date is specified, the cookie expires when the session ends.
            </remarks>
            <param name="url">The site url associated with the cookie.</param>
            <param name="cookieData">The cookie data of the form:
            &lt;name&gt;=&lt;value&gt;[; &lt;name&gt;=&lt;value&gt;]...
            [; expires=&lt;date:DAY, DD-MMM-YYYY HH:MM:SS GMT&gt;][; domain=&lt;domain_name&gt;]
            [; path=&lt;some_path&gt;][; secure][; httponly].</param>
            <seealso cref="M:WatiN.Core.IE.ClearCookies"/>
            <seealso cref="M:WatiN.Core.IE.GetCookie(System.String,System.String)"/>
        </member>
        <member name="M:WatiN.Core.IE.WaitForComplete">
            <summary>
            Waits till the webpage, it's frames and all it's elements are loaded. This
            function is called by WatiN after each action (like clicking a link) so you
            should have to use this function on rare occasions.
            To change the default time out, set <see cref="P:WatiN.Core.IE.Settings.WaitForCompleteTimeOut"/>
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.WaitForComplete(System.Int32)">
            <summary>
            Waits till the webpage, it's frames and all it's elements are loaded. This
            function is called by WatiN after each action (like clicking a link) so you
            should have to use this function on rare occasions.
            </summary>
            <param name="waitForCompleteTimeOut">The number of seconds to wait before timing out</param>
        </member>
        <member name="M:WatiN.Core.IE.Dispose(System.Boolean)">
            <summary>
            This method must be called by its inheritor to dispose references
            to internal resources.
            </summary>
        </member>
        <member name="M:WatiN.Core.IE.HtmlDialog(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Find a HtmlDialog by an attribute. Currently 
            Find.ByUrl and Find.ByTitle are supported.
            </summary>
            <param name="findBy">The url of the html page shown in the dialog</param>
        </member>
        <member name="M:WatiN.Core.IE.HtmlDialog(WatiN.Core.Constraints.BaseConstraint,System.Int32)">
            <summary>
            Find a HtmlDialog by an attribute within the given <paramref name="timeout" /> period.
            Currently Find.ByUrl and Find.ByTitle are supported.
            </summary>
            <param name="findBy">The url of the html page shown in the dialog</param>
            <param name="timeout">Number of seconds before the search times out.</param>
        </member>
        <member name="P:WatiN.Core.IE.InternetExplorer">
            <summary>
            Use this method to gain access to the full Internet Explorer object.
            Do this by referencing the Interop.SHDocVw assembly (supplied in the WatiN distribution)
            and cast the return value of this method to type SHDocVw.InternetExplorer.
            </summary>
        </member>
        <member name="P:WatiN.Core.IE.BrowserType">
            <summary>
            Gets the type of the browser.
            </summary>
            <value>The type of the browser.</value>
        </member>
        <member name="P:WatiN.Core.IE.AutoClose">
            <summary>
            Gets or sets a value indicating whether to auto close IE after destroying
            a reference to the corresponding IE instance.
            </summary>
            <value><c>true</c> when to auto close IE (this is the default); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.IE.HtmlDialogs">
            <summary>
            Returns a collection of open HTML dialogs (modal as well as modeless).
            </summary>
            <value>The HTML dialogs.</value>
        </member>
        <member name="P:WatiN.Core.IE.HtmlDialogsNoWait">
            <summary>
            Returns a collection of open HTML dialogs (modal as well as modeless).
            When itterating through this collection WaitForComplete will not be
            called on a HTML dialog before returning it from the collection.
            </summary>
            <value>The HTML dialogs.</value>
        </member>
        <member name="T:WatiN.Core.Exceptions.InvalidAttributException">
            <summary>
            Thrown if the specified attribute isn't a valid attribute of the element. 
            For example doing <c>TextField.GetAttribute("src")</c> will throw 
            this exception.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CertificateWarningHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.CertificateWarningHandler"/> class.
            This handler will click the "Yes" button at the certificate warning dialog.
            </summary>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CertificateWarningHandler.#ctor(WatiN.Core.DialogHandlers.CertificateWarningHandler.ButtonsEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.DialogHandlers.CertificateWarningHandler"/> class.
            </summary>
            <param name="buttonToPush">The button to push.</param>
        </member>
        <member name="M:WatiN.Core.DialogHandlers.CertificateWarningHandler.IsCertificateDialog(WatiN.Core.DialogHandlers.Window)">
            <summary>
            Determines whether the specified window is a certificate dialog.
            </summary>
            <param name="window">The window.</param>
            <returns>
            	<c>true</c> if the specified window is a certificate dialog; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WatiN.Core.ButtonCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Button"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.ButtonCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.ButtonCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.ButtonCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.ButtonCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Button"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.AreaCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.Area"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.AreaCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.AreaCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:WatiN.Core.AreaCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.AreaCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.AreaCollection.Filter(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns a new <see cref="T:WatiN.Core.AreaCollection"/> filtered by the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="findBy">The attribute to filter by.</param>
            <returns>The filtered collection.</returns>
        </member>
        <member name="P:WatiN.Core.AreaCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Area"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The area.</returns>
        </member>
        <member name="T:WatiN.Core.Option">
            <summary>
            This class provides specialized functionality for a HTML option element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLOptionElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Option"/> class.
            </summary>
            <param name="ie">The ie.</param>
            <param name="optionElement">The option element.</param>
        </member>
        <member name="M:WatiN.Core.Option.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Option"/> class.
            </summary>
            <param name="ie">The ie.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.Option.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Option"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:WatiN.Core.Option.Clear">
            <summary>
            De-selects this option in the selectlist (if selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.ClearNoWait">
            <summary>
            De-selects this option in the selectlist (if selected),
            fires the "onchange" event on the selectlist and does not wait for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.Select">
            <summary>
            Selects this option in the selectlist (if not selected),
            fires the "onchange" event on the selectlist and waits for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.SelectNoWait">
            <summary>
            Selects this option in the selectlist (if not selected),
            fires the "onchange" event on the selectlist and does not wait for it
            to complete.
            </summary>
        </member>
        <member name="M:WatiN.Core.Option.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:WatiN.Core.Option.ElementTags">
            <summary>
            Gets the element tags supported by this element
            </summary>
            <value>The element tags.</value>
        </member>
        <member name="P:WatiN.Core.Option.Value">
            <summary>
            Returns the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:WatiN.Core.Option.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Option.Index">
            <summary>
            Returns the index of this <see cref="T:WatiN.Core.Option"/> in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:WatiN.Core.Option.DefaultSelected">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.Option"/> is selected by default.
            </summary>
            <value><c>true</c> if selected by default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Option.ParentSelectList">
            <summary>
            Gets the parent <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
            <value>The parent <see cref="T:WatiN.Core.SelectList"/>.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.SpanCollection">
            <summary>
            FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ISpanCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SpanCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ISpan"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Span">
            <summary>
            The FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ISpan"/>.
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.SelectList">
            <summary>
            FireFox implementation of the <see cref="T:WatiN.Core.Interfaces.ISelectList"/> interface.
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.ClearList">
            <summary>
            This method clears the selected items in the select box and waits for the 
            onchange event to complete after the list is cleared
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.Option(System.String)">
            <summary>
            Returns the <see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.Option(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns the <see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/> which matches the specified <paramref name="text"/>.
            </summary>
            <param name="text">The text.</param>
            <returns><see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.Option(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns the <see cref="P:WatiN.Core.Interfaces.ISelectList.Options"/> which matches the specified <paramref name="findBy"/>.
            </summary>
            <param name="findBy">The find by to use.</param>
            <returns></returns>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.Select(System.String)">
            <summary>
            This method selects an item by text.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.Select(System.Text.RegularExpressions.Regex)">
            <summary>
            This method selects an item by text using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.SelectByValue(System.String)">
            <summary>
            Selects an item in a select box, by value.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.SelectByValue(System.Text.RegularExpressions.Regex)">
            <summary>
            Selects an item in a select box by value using the supplied regular expression.
            Raises NoValueFoundException if the specified value is not found.
            </summary>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:WatiN.Core.Mozilla.SelectList.FindOption(WatiN.Core.AttributeConstraint)">
            <summary>
            Finds an option using the specified <paramref name="constraint"/>.
            If the option can not be found using the constraint throws a <see cref="T:WatiN.Core.Exceptions.SelectListItemNotFoundException"/>.
            </summary>
            <param name="constraint">Constraint used to locate the option.</param>
            <returns>Option that matches the specified <paramref name="constraint"/>.</returns>
            <exception cref="T:WatiN.Core.Exceptions.SelectListItemNotFoundException">if the option can not be located using the specified <paramref name="constraint"/>.</exception>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.AllContents">
            <summary>
            Returns all the items in the select list as an array.
            An empty array is returned if the select box has no contents.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.Multiple">
            <summary>
            Gets a value indicating whether this <see cref="T:WatiN.Core.SelectList"/> allows multiple select.
            </summary>
            <value><c>true</c> if multiple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.Options">
            <summary>
            Returns all the <see cref="T:WatiN.Core.Option"/> elements in the <see cref="T:WatiN.Core.SelectList"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.SelectedOptions">
            <summary>
            Returns the selected option(s) in an array list.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.SelectedItems">
            <summary>
            Returns the selected item(s) in a <see cref="T:System.Collections.Specialized.StringCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.SelectedItem">
            <summary>
            Returns the first selected item in the selectlist. Other items may be selected.
            Use SelectedItems to get a StringCollection of all selected items.
            When there's no item selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.SelectedOption">
            <summary>
            Returns the first selected option in the selectlist. Other options may be selected.
            Use SelectedOptions to get an ArrayList of all selected options.
            When there's no option selected, the return value will be null.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.SelectList.HasSelectedItems">
            <summary>
            Gets a value indicating whether this instance has selected items.
            </summary>
            <value>
            	<c>true</c> if this instance has selected items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WatiN.Core.Logging.DebugLogWriter">
            <summary>
            This logger class writes it's output to the debug window.
            </summary>
            <example>
            The following code attaches the DebugLogWriter to WatiN and writes a
            LogAction. Open de output window in your debugger to see the result.
            <code>
            Logger.LogWriter = new DebugLogWriter;
            Logger.LogAction("Attached DebugLogWriter");
            </code>
            </example>
        </member>
        <member name="T:WatiN.Core.FileUploadCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.FileUpload"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.FileUploadCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FileUploadCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.FileUploadCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.FileUploadCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.FileUploadCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.FileUpload"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Div">
            <summary>
            This class provides specialized functionality for a HTML div element.
            </summary>
        </member>
        <member name="M:WatiN.Core.Div.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLDivElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Div"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="htmlDivElement">The HTML div element.</param>
        </member>
        <member name="M:WatiN.Core.Div.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Div"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The HTML div element.</param>
        </member>
        <member name="M:WatiN.Core.Div.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.Div"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:WatiN.Core.Area">
            <summary>
            Represents an area of an image map.
            </summary>
        </member>
        <member name="M:WatiN.Core.Area.#ctor(WatiN.Core.DomContainer,mshtml.IHTMLAreaElement)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Area"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:WatiN.Core.Area.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Area"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The <see cref="T:WatiN.Core.DomContainer"/> the element is in.</param>
            <param name="elementFinder">The element finder.</param>
        </member>
        <member name="M:WatiN.Core.Area.#ctor(WatiN.Core.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Area"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:WatiN.Core.Area.Alt">
            <summary>
            Gets the alt-text of the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Area.Url">
            <summary>
            Gets the target url of the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Area.Coords">
            <summary>
            Gets the coordinates the area element.
            </summary>
        </member>
        <member name="P:WatiN.Core.Area.Shape">
            <summary>
            Gets the shape of the area element.
            </summary>
        </member>
        <member name="T:WatiN.Core.TextField">
            <summary>
            This class provides specialized functionality for a HTML input element of type 
            text password textarea hidden and for a HTML textarea element.
            </summary>
        </member>
        <member name="M:WatiN.Core.TextField.#ctor(WatiN.Core.Element)">
            <summary>
            Initialises a new instance of the <see cref="T:WatiN.Core.TextField"/> class based on <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:WatiN.Core.TextField.Text">
            <summary>
            Returns the same as the Value property
            </summary>
        </member>
        <member name="T:WatiN.Core.TextField.TextAreaElement">
            <summary>
            Summary description for TextFieldElement.
            </summary>
        </member>
        <member name="T:WatiN.Core.Interfaces.ITextElement">
            <summary>
            This interface is used by <see cref="T:WatiN.Core.TextField"/> to support both
            HTML input element of type text password textarea hidden and 
            for a HTML textarea element.
            </summary>
        </member>
        <member name="T:WatiN.Core.TableCellCollection">
            <summary>
            A typed collection of <see cref="T:WatiN.Core.TableCell"/> instances within a <see cref="T:WatiN.Core.Document"/> or <see cref="T:WatiN.Core.Element"/>.
            </summary>
        </member>
        <member name="M:WatiN.Core.TableCellCollection.#ctor(WatiN.Core.DomContainer,WatiN.Core.ElementFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableCellCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="finder">The finder.</param>
        </member>
        <member name="M:WatiN.Core.TableCellCollection.#ctor(WatiN.Core.DomContainer,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.TableCellCollection"/> class.
            Mainly used by WatiN internally.
            </summary>
            <param name="domContainer">The DOM container.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="P:WatiN.Core.TableCellCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.TableCell"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.NodeType">
            <summary>
            Represents the different  node types
            </summary>
        </member>
        <member name="T:WatiN.Core.Mozilla.WatiNElementCollection">
            <summary>
            Represents a collection of WatiN elements
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.WatiNElementCollection.Filter(WatiN.Core.Constraints.BaseConstraint)">
            <summary>
            Returns a new <see cref="T:WatiN.Core.Interfaces.IWatiNElementCollection"/> filtered by the <see cref="T:WatiN.Core.Constraints.BaseConstraint"/>.
            </summary>
            <param name="findBy">The attribute to filter by.</param>
            <returns>The filtered collection.</returns>
        </member>
        <member name="P:WatiN.Core.Mozilla.WatiNElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Element"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Mozilla.Link">
            <summary>
            Represents the behavior and attributes of an HTML link element implemented for the FireFox browser
            </summary>
        </member>
        <member name="M:WatiN.Core.Mozilla.Link.#ctor(System.String,WatiN.Core.Mozilla.FireFoxClientPort)">
            <summary>
            Initializes a new instance of the <see cref="T:WatiN.Core.Mozilla.Link"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="clientPort">The client port.</param>
        </member>
        <member name="P:WatiN.Core.Mozilla.Link.Url">
            <summary>
            Gets the URL of this link element.
            </summary>
            <value>The URL of this link element.</value>
        </member>
        <member name="T:WatiN.Core.Mozilla.CheckBoxCollection">
            <summary>
            The FireFox implementation of <see cref="T:WatiN.Core.Interfaces.ICheckBoxCollection"/>.
            </summary>
        </member>
        <member name="P:WatiN.Core.Mozilla.CheckBoxCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:WatiN.Core.Interfaces.ICheckBox"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:WatiN.Core.Comparers.BoolComparer">
            <summary>
            Class that supports comparing a <see cref="T:System.Boolean"/> instance with a string value.
            </summary>
        </member>
    </members>
</doc>
