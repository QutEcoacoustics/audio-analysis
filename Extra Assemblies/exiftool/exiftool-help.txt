NAME
    exiftool - Read and write meta information in files

RUNNING IN WINDOWS
    Drag and drop files or folders onto the exiftool executable to display
    meta information, or rename to "exiftool.exe" and run from the command
    line to access all exiftool features.

    This stand-alone Windows version allows simple command-line options to
    be added to the name of the executable (in brackets and separated by
    spaces at the end of the name), providing a mechanism to use options
    when launched via the mouse. For example, changing the executable name
    to "exiftool(-a -u -g1 -w txt).exe" gives a drag-and-drop utility which
    generates sidecar ".txt" files with detailed meta information. As
    shipped, the -k option is added to cause exiftool to pause before
    terminating (to keep the command window open). Options may also be added
    to the "Target" property of a Windows shortcut to the executable.

SYNOPSIS
    exiftool [*OPTIONS*] [-*TAG*...] [--*TAG*...] *FILE*...
    exiftool [*OPTIONS*] -*TAG*[+-<]=[*VALUE*]... *FILE*...
    exiftool [*OPTIONS*] -tagsFromFile *SRCFILE* [-*SRCTAG*[>*DSTTAG*]...]
    *FILE*...
    exiftool [ -ver | -list[w|f|wf|g[*NUM*]|d|x] ]

    For specific examples, see the EXAMPLES sections below.

DESCRIPTION
    A command-line interface to Image::ExifTool, used for reading and
    writing meta information in image, audio and video files. *FILE* is one
    or more source file names, directory names, or "-" for the standard
    input. Information is read from the source files and output in readable
    form to the console (or written to output text files with -w).

    To write, copy or delete information in each *FILE*, specify new tag
    values with the -*TAG*=[*VALUE*] syntax or the -tagsFromFile or -geotag
    options. By default the original files are preserved with "_original"
    appended to their names -- be sure to verify that the new files are OK
    before erasing the originals. Once in write mode, exiftool will ignore
    any read-specific options.

    Note: If *FILE* is a directory name then only supported file types in
    the directory are processed (in write mode only writable types are
    processed). However, files may be specified by name, or the -ext option
    may be used to force processing of files with any extension.

    Below is a list of file types and meta information formats currently
    supported by ExifTool (r = read, w = write, c = create):

      File Types
      ------------+-------------+-------------+-------------+------------
      3FR   r     | DVB   r     | M4A/V r     | PBM   r/w   | RWL   r/w
      3G2   r     | DYLIB r     | MEF   r/w   | PDF   r/w   | RWZ   r
      3GP   r     | EIP   r     | MIE   r/w/c | PEF   r/w   | RM    r
      ACR   r     | EPS   r/w   | MIFF  r     | PFA   r     | SO    r
      AFM   r     | ERF   r/w   | MKA   r     | PFB   r     | SR2   r/w
      AI    r/w   | EXE   r     | MKS   r     | PFM   r     | SRF   r
      AIFF  r     | EXIF  r/w/c | MKV   r     | PGF   r     | SRW   r/w
      APE   r     | F4A/V r     | MNG   r/w   | PGM   r/w   | SVG   r
      ARW   r/w   | FLA   r     | MOS   r/w   | PICT  r     | SWF   r
      ASF   r     | FLAC  r     | MOV   r     | PMP   r     | THM   r/w
      AVI   r     | FLV   r     | MP3   r     | PNG   r/w   | TIFF  r/w
      BMP   r     | FPX   r     | MP4   r     | PPM   r/w   | TTC   r
      BTF   r     | GIF   r/w   | MPC   r     | PPT   r     | TTF   r
      COS   r     | GZ    r     | MPG   r     | PPTX  r     | VRD   r/w/c
      CR2   r/w   | HDP   r/w   | MPO   r/w   | PS    r/w   | VSD   r
      CRW   r/w   | HTML  r     | MQV   r     | PSB   r/w   | WAV   r
      CS1   r/w   | ICC   r/w/c | MRW   r/w   | PSD   r/w   | WDP   r/w
      DCM   r     | IIQ   r/w   | MXF   r     | PSP   r     | WEBP  r
      DCP   r/w   | IND   r/w   | NEF   r/w   | QTIF  r     | WEBM  r
      DCR   r     | ITC   r     | NRW   r/w   | RA    r     | WMA   r
      DFONT r     | JNG   r/w   | NUMBERS r   | RAF   r/w   | WMV   r
      DIVX  r     | JP2   r/w   | ODP   r     | RAM   r     | X3F   r/w
      DJVU  r     | JPEG  r/w   | ODS   r     | RAR   r     | XCF   r
      DLL   r     | K25   r     | ODT   r     | RAW   r/w   | XLS   r
      DNG   r/w   | KDC   r     | OGG   r     | RIFF  r     | XLSX  r
      DOC   r     | KEY   r     | ORF   r/w   | RSRC  r     | XMP   r/w/c
      DOCX  r     | LNK   r     | OTF   r     | RTF   r     | ZIP   r
      DV    r     | M2TS  r     | PAGES r     | RW2   r/w   |

      Meta Information
      ----------------------+----------------------+---------------------
      EXIF           r/w/c  |  CIFF           r/w  |  Ricoh RMETA    r
      GPS            r/w/c  |  AFCP           r/w  |  Picture Info   r
      IPTC           r/w/c  |  Kodak Meta     r/w  |  Adobe APP14    r
      XMP            r/w/c  |  FotoStation    r/w  |  MPF            r
      MakerNotes     r/w/c  |  PhotoMechanic  r/w  |  Stim           r
      Photoshop IRB  r/w/c  |  JPEG 2000      r    |  APE            r
      ICC Profile    r/w/c  |  DICOM          r    |  Vorbis         r
      MIE            r/w/c  |  Flash          r    |  SPIFF          r
      JFIF           r/w/c  |  FlashPix       r    |  DjVu           r
      Ducky APP12    r/w/c  |  QuickTime      r    |  M2TS           r
      PDF            r/w/c  |  Matroska       r    |  PE/COFF        r
      PNG            r/w/c  |  GeoTIFF        r    |  AVCHD          r
      Canon VRD      r/w/c  |  PrintIM        r    |  ZIP            r
      Nikon Capture  r/w/c  |  ID3            r    |  (and more)

OPTIONS
    Case is not significant for any command-line option (including tag and
    group names), except for single-character options when the corresponding
    upper-case option exists. Many single-character options have equivalent
    long-name versions (shown in brackets), and some options have inverses
    which are invoked with a leading double-dash. Note that multiple
    single-character options may NOT be combined into one argument because
    this would be interpreted as a tag name.

  Option Summary
    Tag operations

      -TAG or --TAG                    Extract or exclude specified tag
      -TAG[+-]=[VALUE]                 Write new value for tag
      -TAG[+-]<=DATFILE                Write tag value from contents of file
      -TAG[+-]<SRCTAG                  Copy tag value (see -tagsFromFile)

      -tagsFromFile SRCFILE            Copy tag values from file
      -x TAG      (-exclude)           Exclude specified tag

    Input-output text formatting

      -args       (-argFormat)         Output data as exiftool arguments
      -b          (-binary)            Output data in binary format
      -c FMT      (-coordFormat)       Set format for GPS coordinates
      -charset [[TYPE=]CHARSET]        Specify encoding for special characters
      -csv[=CSVFILE]                   Export/import tags in CSV format
      -d FMT      (-dateFormat)        Set format for date/time values
      -D          (-decimal)           Show tag ID numbers in decimal
      -E, -ex     (-escape(HTML|XML))  Escape values for HTML (-E) or XML (-ex)
      -f          (-forcePrint)        Force printing of all specified tags
      -g[NUM...]  (-groupHeadings)     Organize output by tag group
      -G[NUM...]  (-groupNames)        Print group name for each tag
      -h          (-htmlFormat)        Use HMTL formatting for output
      -H          (-hex)               Show tag ID number in hexadecimal
      -htmlDump[OFFSET]                Generate HTML-format binary dump
      -j[=JSONFILE] (-json)            Export/import tags in JSON format
      -l          (-long)              Use long 2-line output format
      -L          (-latin)             Use Windows Latin1 encoding
      -lang [LANG]                     Set current language
      -n          (--printConv)        Disable print conversion
      -p FMTFILE  (-printFormat)       Print output in specified format
      -s[NUM]     (-short)             Short output format
      -S          (-veryShort)         Very short output format
      -sep STR    (-separator)         Set separator string for list items
      -struct                          Enable output of structured information
      -t          (-tab)               Output in tab-delimited list format
      -T          (-table)             Output in tabular format
      -v[NUM]     (-verbose)           Print verbose messages
      -w[!] EXT   (-textOut)           Write output text files
      -X          (-xmlFormat)         Use RDF/XML output format

    Processing control

      -a          (-duplicates)        Allow duplicate tags to be extracted
      -e          (--composite)        Do not calculate composite tags
      -ee         (-extractEmbedded)   Extract information from embedded files
      -ext EXT    (-extension)         Process files with specified extension
      -F[OFFSET]  (-fixBase)           Fix the base for maker notes offsets
      -fast[NUM]                       Increase speed for slow devices
      -fileOrder [-]TAG                Set file processing order
      -i DIR      (-ignore)            Ignore specified directory name
      -if EXPR                         Conditionally process files
      -m          (-ignoreMinorErrors) Ignore minor errors and warnings
      -o OUTFILE  (-out)               Set output file or directory name
      -overwrite_original              Overwrite original by renaming tmp file
      -overwrite_original_in_place     Overwrite original by copying tmp file
      -P          (-preserve)          Preserve date/time of original file
      -password PASSWD                 Password for processing protected files
      -q          (-quiet)             Quiet processing
      -r          (-recurse)           Recursively process subdirectories
      -scanForXMP                      Brute force XMP scan
      -u          (-unknown)           Extract unknown tags
      -U          (-unknown2)          Extract unknown binary tags too
      -z          (-zip)               Read/write compressed information

    Special features

      -geotag TRKFILE                  Geotag images from specified GPS log
      -use MODULE                      Add features from plug-in module

    Utilities

      -delete_original[!]              Delete "_original" backups
      -restore_original                Restore from "_original" backups

    Other options

      -@ ARGFILE                       Read command-line arguments from file
      -k          (-pause)             Pause before terminating
      -list[w|f|wf|g[NUM]|d|x]         List various exiftool attributes
      -ver                             Print exiftool version number

    Advanced options

      -common_args                     Define common arguments
      -config CFGFILE                  Specify configuration file name
      -execute                         Execute multiple commands on one line
      -srcfile FMT                     Set different source file name
      -stay_open FLAG                  Keep reading -@ argfile even after EOF

  Option Details
   Tag operations
    -*TAG*
         Extract information for specified tag (ie. "-CreateDate"). A tag
         name is the handle by which a piece of information is referenced.
         See Image::ExifTool::TagNames for documentation on available tag
         names. A tag name may include leading group names separated by
         colons (ie. "-EXIF:CreateDate", or "-Doc1:XMP:Creator"), and each
         group name may be prefixed by a digit to specify family number (ie.
         "-1IPTC:City"). Use the -listg option to list available group names
         by family.

         A special tag name of "All" may be used to indicate all meta
         information. This is particularly useful when a group name is
         specified to extract all information in a group (but beware that
         unless the -a option is also used, some tags in the group may be
         suppressed by same-named tags in other groups). The wildcard
         characters "?" and "*" may be used in a tag name to match any
         single character and zero or more characters respectively. These
         may not be used in a group name, with the exception that a group
         name of "*" (or "All") may be used to extract all instances of a
         tag (as if -a was used). Note that arguments containing wildcards
         must be quoted on the command line to prevent shell globbing, and
         wildcards may not be used when writing/deleting tags.

         A "#" may be appended to the tag name to disable the print
         conversion on a per-tag basis (see the -n option). This may also be
         used when writing or copying tags.

         If no tags are specified, all available information is extracted
         (as if "-All" had been specified).

         Note: Descriptions, not tag names, are shown by default when
         extracting information. Use the -s option to see the tag names
         instead.

    --*TAG*
         Exclude specified tag from extracted information. Same as the -x
         option. May also be used following a -tagsFromFile option to
         exclude tags from being copied, or to exclude groups from being
         deleted when deleting all information (ie. "-all= --exif:all"
         deletes all but EXIF information). But note that this will not
         exclude individual tags from a group delete. Instead, the tags must
         be recovered using the -tagsFromFile option (ie. "-all=
         -tagsfromfile @ -artist"). Wildcards are permitted as described
         above for -TAG.

    -*TAG*[+-]=[*VALUE*]
         Write a new value for the specified tag (ie. "-comment=wow"), or
         delete the tag if no *VALUE* is given (ie. "-comment="). "+=" and
         "-=" are used to add or remove existing entries from a list, or to
         shift date/time values (see Image::ExifTool::Shift.pl for details),
         and "-=" may be used to conditionally remove or replace a tag (see
         "WRITING EXAMPLES" for examples).

         *TAG* may contain a leading family 0 or 1 group name separated by a
         colon. If no group name is specified, the tag is created in the
         preferred group, and updated in any other location where a same-
         named tag already exists. The preferred group is the first group in
         the following list where *TAG* is valid: 1) EXIF, 2) IPTC, 3) XMP.

         The special "All" tag may be used in this syntax only if a *VALUE*
         is NOT given. This causes all meta information to be deleted (or
         all information in a group if "-GROUP:All=" is used). Note that not
         all groups are deletable. Use the -listd option for a complete list
         of deletable groups. Also, within an image some groups may be
         contained within others, and these groups are removed if the
         containing group is deleted:

           JPEG Image:
           - Deleting EXIF or IFD0 also deletes ExifIFD, GlobParamIFD,
             GPS, IFD1, InteropIFD, MakerNotes, PrintIM and SubIFD.
           - Deleting ExifIFD also deletes InteropIFD and MakerNotes.
           - Deleting Photoshop also deletes IPTC.

           TIFF Image:
           - Deleting EXIF only removes ExifIFD which also deletes
             InteropIFD and MakerNotes.

         Note: MakerNotes tags may be edited, but not created or deleted
         individually. This avoids many potential problems including the
         inevitable compatibility problems with OEM software which may be
         very inflexible about the information it expects to find in the
         maker notes.

         Special feature: Integer values may be specified in hexadecimal
         with a leading "0x", and simple rational values may be specified as
         fractions.

    -*TAG*<=*DATFILE* or -*TAG*<=*FMT*
         Set the value of a tag from the contents of file *DATFILE*. The
         file name may also be given by a *FMT* string where %d, %f and %e
         represent the directory, file name and extension of the original
         *FILE* (see the -w option for more details). Note that quotes are
         required around this argument to prevent shell redirection since it
         contains a "<" symbol. "+<=" or "-<=" may also be used to add or
         delete specific list entries, or to shift date/time values.

    -tagsFromFile *SRCFILE* or *FMT*
         Copy tag values from *SRCFILE* to *FILE*. Tag names on the command
         line after this option specify the tags to be copied, or excluded
         from the copy. If no tags are specified, then all possible tags
         (see note 1 below) from the source file are copied. More than one
         -tagsFromFile option may be used to copy tags from multiple files.

         By default, this option will commute information between same-named
         tags in different groups and write each tag to the preferred group.
         This allows some information to be automatically translated when
         copying between images of different formats. However, if a group
         name is specified for a tag then the information is written to the
         original group (unless redirected to another group, see below).
         This works even if "All" is used as a group name, so "-All:All" is
         used to specify that all information be copied to the same group in
         the destination file.

         *SRCFILE* may be the same as *FILE* to move information around
         within a file. In this case, "@" may be used to represent the
         source file (ie. "-tagsFromFile @"), permitting this feature to be
         used for batch processing multiple files (see note 4 below).
         Specified tags are then copied from each file in turn as it is
         rewritten. For advanced batch use, the source file name may also be
         specified using a *FMT* string in which %d, %f and %e represent the
         directory, file name and extension of *FILE*. See -w option for
         *FMT* string examples.

         A powerful redirection feature allows a destination tag to be
         specified for each extracted tag. With this feature, information
         may be written to a tag with a different name or group. This is
         done using "-*SRCTAG*>*DSTTAG*" or "-*DSTTAG*<*SRCTAG*" on the
         command line after -tagsFromFile, and causes the value of *SRCTAG*
         to be copied from *SRCFILE* and written to *DSTTAG* in *FILE*. Note
         that this argument must be quoted to prevent shell redirection, and
         there is no "=" sign as when assigning new values. Both source and
         destination tags may be prefixed by a group name, and "All" or "*"
         may be used as a tag or group name. If no destination group is
         specified, the information is written to the preferred group. As a
         convenience, "-tagsFromFile @" is assumed for any redirected tags
         which are specified without a prior -tagsFromFile option. Copied
         tags may also be added or deleted from a list with arguments of the
         form "-*SRCTAG*+>*DSTTAG*" or "-*SRCTAG*->*DSTTAG*".

         An extension of the redirection feature allows strings involving
         tag names to be used on the right hand side of the "<" symbol with
         the syntax "-*DSTTAG*<*STR*", where tag names in *STR* are prefixed
         with a "$" symbol. See the -p option for more details about this
         syntax. Strings starting with a "=" sign must insert a single space
         after the "<" to avoid confusion with the "<=" syntax which would
         otherwise attempt to set the tag value from the contents of a file.
         A single space at the start of the string is removed if it exists,
         but all other whitespace is preserved.

         See "COPYING EXAMPLES" for examples using -tagsFromFile.

         Notes:

         1) Some tags (generally tags which may affect the appearance of the
         image) are considered "unsafe" to write, and are only copied if
         specified explicitly. See the tag name documentation for more
         details about "unsafe" tags.

         2) Be aware of the difference between excluding a tag from being
         copied (--*TAG*), and deleting a tag (-*TAG*=). Excluding a tag
         prevents it from being copied to the destination image, but
         deleting will remove a pre-existing tag from the image.

         3) The maker note information is copied as a block, so it isn't
         affected like other information by subsequent tag assignments on
         the command line. Also, since the PreviewImage referenced from the
         maker notes may be rather large, it is not copied, and must be
         transferred separately if desired.

         4) When performing complex batch processing, it is important to
         note that the order of operations is different for tags copied in
         batch mode. In general, tags are copied from batch-mode files after
         all other command-line arguments have been applied. For example,
         the following two commands are not equivalent:

             # (not batch mode):  Sets xmp:title to "NEW"
             exiftool -tagsfromfile a.jpg -xmp:title -xmp:title=NEW a.jpg

             # (batch mode):  Preserves original title if it exists
             exiftool -tagsfromfile @ -xmp:title -xmp:title=NEW a.jpg

         5) The normal behaviour of copied tags differs subtly from that of
         assigned tags for List-type tags. When copying to a list, each
         copied tag overrides any previous operations on the list. While
         this avoids duplicate list items when copying groups of tags from a
         file containing redundant information, it also prevents values of
         different tags from being copied into the same list when this is
         the intent. So a -addTagsFromFile option is provided which allows
         copying of multiple tags into the same list. ie)

             exiftool -addtagsfromfile @ "-subject<make" "-subject<model" ...

         Other than this difference, the -tagsFromFile and -addTagsFromFile
         options are equivalent.

         6) The -a option (allow duplicate tags) is always in effect when
         reading tags from *SRCFILE*.

         7) The -struct option is in effect by default when copying tags,
         but this may be disabled with --struct on the command line. See the
         -struct option for details.

    -x *TAG* (-exclude)
         Exclude the specified tag. There may be multiple -x options. This
         has the same effect as --*TAG* on the command line. May also be
         used following a -tagsFromFile option to exclude tags from being
         copied.

   Input-output text formatting
    -args (-argFormat)
         Output information in the form of exiftool arguments, suitable for
         use with the -@ option when writing. May be combined with the -G
         option to include group names. This feature may be used to
         effectively copy tags between images, but allows the metadata to be
         altered by editing the intermediate file ("out.args" in this
         example):

             exiftool -args -G1 --filename --directory src.jpg > out.args
             exiftool -@ out.args dst.jpg

         Note: Be careful when copying information with this technique since
         it is easy to write tags which are normally considered "unsafe".
         For instance, the FileName and Directory tags are excluded in the
         example above to avoid renaming and moving the destination file.
         Also note that the second command above will produce warning
         messages for any tags which are not writable.

    -b (-binary)
         Output requested data in binary format without tag names or
         descriptions. This option is mainly used for extracting embedded
         images or other binary data, but it may also be useful for some
         text strings since control characters (such as newlines) are not
         replaced by '.' as they are in the default output. Also valid in
         combination with the "-X" option.

    -c *FMT* (-coordFormat)
         Set the print format for GPS coordinates. *FMT* uses the same
         syntax as the "printf" format string. The specifiers correspond to
         degrees, minutes and seconds in that order, but minutes and seconds
         are optional. For example, the following table gives the output for
         the same coordinate using various formats:

                     FMT                  Output
             -------------------    ------------------
             "%d deg %d' %.2f"\"    54 deg 59' 22.80"  (default for reading)
             "%d %d %.8f"           54 59 22.80000000  (default for copying)
             "%d deg %.4f min"      54 deg 59.3800 min
             "%.6f degrees"         54.989667 degrees

         Notes:

         1) To avoid loss of precision, the default coordinate format is
         different when copying tags using the -tagsFromFile option.

         2) This print formatting may be disabled with the -n option to
         extract coordinates as signed decimal degrees.

    -charset [[*TYPE*=]*CHARSET*]
         If *TYPE* is "ExifTool" or not specified, this option sets the
         ExifTool character encoding for output tag values when reading and
         input values when writing. The default ExifTool encoding is "UTF8".
         If no *CHARSET* is given, a list of available character sets is
         returned. Valid *CHARSET* values are:

             CHARSET     Alias(es)        Description
             ----------  ---------------  ----------------------------------
             UTF8        cp65001, UTF-8   UTF-8 characters (default)
             Latin       cp1252, Latin1   Windows Latin1 (West European)
             Latin2      cp1250           Windows Latin2 (Central European)
             Cyrillic    cp1251, Russian  Windows Cyrillic
             Greek       cp1253           Windows Greek
             Turkish     cp1254           Windows Turkish
             Hebrew      cp1255           Windows Hebrew
             Arabic      cp1256           Windows Arabic
             Baltic      cp1257           Windows Baltic
             Vietnam     cp1258           Windows Vietnamese
             Thai        cp874            Windows Thai
             MacRoman    cp10000, Roman   Macintosh Roman
             MacLatin2   cp10029          Macintosh Latin2 (Central Europe)
             MacCyrillic cp10007          Macintosh Cyrillic
             MacGreek    cp10006          Macintosh Greek
             MacTurkish  cp10081          Macintosh Turkish
             MacRomanian cp10010          Macintosh Romanian
             MacIceland  cp10079          Macintosh Icelandic
             MacCroatian cp10082          Macintosh Croatian

         Other values of *TYPE* listed below are used to specify the
         internal encoding of various meta information formats.

             TYPE       Description                                  Default
             ---------  -------------------------------------------  -------
             ID3        Internal encoding of ID3v1 information       Latin
             IPTC       Internal IPTC encoding to assume when        Latin
                         IPTC:CodedCharacterSet is not defined
             Photoshop  Internal encoding of Photoshop IRB strings   Latin

         See <http://owl.phy.queensu.ca/~phil/exiftool/faq.html#Q10> for
         more information about coded character sets.

    -csv[=*CSVFILE*]
         Export information in as a CSV file, or import information if
         *CSVFILE* is specified. The first row of the *CSVFILE* must be the
         ExifTool tag names (with optional group names) for each column of
         the file. A special "SourceFile" column specifies the files
         associated with each row of information (a SourceFile of "*" may be
         used to apply the information to all target images). The following
         examples demonstrate basic use of this option:

             # generate CSV file with common tags from all images in a directory
             exiftool -common -csv dir > out.csv

             # update metadata for all images in a directory from CSV file
             exiftool -csv=a.csv dir

         Empty values are ignored when importing. To force a tag to be
         deleted, use the -f option and set the value to "-" in the CSV
         file. May be combined with the -g or -G option to add group names
         to the tags.

         Special feature: "+="*CSVFILE* may be used to add items to existing
         lists. This affects only list-type tags. Also applies to the -j
         option.

    -d *FMT* (-dateFormat)
         Set the format for date/time tag values. The specifics of the *FMT*
         syntax are system dependent -- consult the "strftime" man page on
         your system for details. The default format is equivalent to
         "%Y:%m:%d %H:%M:%S". This option has no effect on date-only or
         time-only tags and ignores timezone information if present. Only
         one -d option may be used per command. The inverse operation (ie.
         un-formatting a date/time value) is currently not applied when
         writing a date/time tag.

    -D (-decimal)
         Show tag ID number in decimal when extracting information.

    -E, -ex (-escapeHTML, -escapeXML)
         Escape characters in output values for HTML (-E) or XML (-ex). For
         HTML, all characters with Unicode code points above U+007F are
         escaped as well as the following 5 characters: & (&amp;) ' (&#39;)
         " (&quot;) > (&gt;) and < (&lt;). For XML, only these 5 characters
         are escaped. The -E option is implied with -h, and -ex is implied
         with -X. The inverse conversion is applied when writing tags.

    -f (-forcePrint)
         Force printing of tags even if their values are not found. This
         option only applies when tag names are specified. May also be used
         to add a 'flags' attribute to the -listx output, or to allow tags
         to be deleted with the -csv option.

    -g[*NUM*][:*NUM*...] (-groupHeadings)
         Organize output by tag group. *NUM* specifies a group family
         number, and may be 0 (general location), 1 (specific location), 2
         (category), 3 (document number) or 4 (instance number). Multiple
         families may be specified by separating them with colons. By
         default the resulting group name is simplified by removing any
         leading "Main:" and collapsing adjacent identical group names, but
         this can be avoided by placing a colon before the first family
         number (ie. -g:3:1). If *NUM* is not specified, -g0 is assumed. Use
         the -listg option to list group names for a specified family.

    -G[*NUM*][:*NUM*...] (-groupNames)
         Same as -g but print group name for each tag.

    -h (-htmlFormat)
         Use HTML table formatting for output. Implies the -E option. The
         formatting options -D, -H, -g, -G, -l and -s may be used in
         combination with -h to influence the HTML format.

    -H (-hex)
         Show tag ID number in hexadecimal when extracting information.

    -htmlDump[*OFFSET*]
         Generate a dynamic web page containing a hex dump of the EXIF
         information. This can be a very powerful tool for low-level
         analysis of EXIF information. The -htmlDump option is also invoked
         if the -v and -h options are used together. The verbose level
         controls the maximum length of the blocks dumped. An *OFFSET* may
         be given to specify the base for displayed offsets. If not
         provided, the EXIF/TIFF base offset is used. Use -htmlDump0 for
         absolute offsets. Currently only EXIF/TIFF and JPEG information is
         dumped, but the -u option can be used to give a raw hex dump of
         other file formats.

    -j[=*JSONFILE*] (-json)
         Use JSON (JavaScript Object Notation) formatting for console
         output, or import JSON file if *JSONFILE* is specified. This option
         may be combined with -g to organize the output into objects by
         group, or -G to add group names to each tag. List-type tags with
         multiple items are output as JSON arrays unless -sep is used. By
         default XMP structures are flattened into individual tags in the
         JSON output, but the original structure may be preserved with the
         -struct option (this also causes all List-type XMP tags to be
         output as JSON arrays, otherwise single-item lists would be output
         as simple strings). The -a option is implied if the -g or -G
         options are used, otherwise it is ignored and duplicate tags are
         suppressed. The -b, -L and -charset options have no effect on the
         JSON output.

         If *JSONFILE* is specified, the file is imported and the tag
         definitions from the file are used to set tag values on a per-file
         basis. The special "SourceFile" entry in each JSON object
         associates the information with a specific target file (see the
         -csv option for details). The imported JSON file must have the same
         format as the exported JSON files with the exception that the -g
         option is not compatible with the import file format (use -G
         instead). Additionally, tag names in the input JSON file may be
         suffixed with a "#" to disable print conversion.

    -l (-long)
         Use long 2-line Canon-style output format. Adds a description and
         unconverted value to the XML output when -X is used.

    -L (-latin)
         Use Windows Latin1 encoding (cp1252) for output tag values instead
         of the default UTF-8. When writing, -L specifies that input text
         values are Latin1 instead of UTF-8. Equivalent to "-charset latin".

    -lang [*LANG*]
         Set current language for tag descriptions and converted values.
         *LANG* is "de", "fr", "ja", etc. Use -lang with no other arguments
         to get a list of available languages. The default language is "en"
         if -lang is not specified. Note that tag/group names are always
         English, independent of the -lang setting, and translation of
         warning/error messages has not yet been implemented.

         By default, ExifTool uses UTF-8 encoding for special characters,
         but the the -L or -charset option may be used to invoke other
         encodings.

         Currently, the language support is not complete, but users are
         welcome to help improve this by submitting their own translations.
         To submit a set of translations, first use the -listx option and
         redirect the output to a file to generate an XML tag database, then
         add entries for other languages, zip this file, and email it to
         phil at owl.phy.queensu.ca for inclusion in ExifTool.

    -n (--printConv)
         Read and write values as numbers instead of words. By default,
         extracted values are converted to a more human-readable format for
         printing, but the -n option disables this print conversion for all
         tags. For example:

             > exiftool -Orientation -S a.jpg
             Orientation: Rotate 90 CW
             > exiftool -Orientation -S -n a.jpg
             Orientation: 6

         The print conversion may also be disabled on a per-tag basis by
         suffixing the tag name with a "#" character:

             > exiftool -Orientation# -Orientation -S a.jpg
             Orientation: 6
             Orientation: Rotate 90 CW

         These techniques may also be used to disable the inverse print
         conversion when writing. For example, the following commands all
         have the same effect:

             > exiftool -Orientation='Rotate 90 CW' a.jpg
             > exiftool -Orientation=6 -n a.jpg
             > exiftool -Orientation#=6 a.jpg

    -p *FMTFILE* or *STR* (-printFormat)
         Print output in the format specified by the given file or string
         (and ignore other format options). Tag names in the format file or
         string begin with a "$" symbol and may contain a leading group name
         and/or a trailing "#". Case is not significant. Braces "{}" may be
         used around the tag name to separate it from subsequent text. Use
         $$ to represent a "$" symbol, and $/ for a newline. Multiple -p
         options may be used, each contributing a line of text to the
         output. Lines beginning with "#[HEAD]" and "#[TAIL]" are output
         only for the first and last processed files respectively. Lines
         beginning with "#[BODY]" and lines not beginning with "#" are
         output for each processed file. Other lines beginning with "#" are
         ignored. For example, this format file:

             # this is a comment line
             #[HEAD]# Generated by ExifTool $exifToolVersion
             File: $FileName - $DateTimeOriginal
             (f/$Aperture, ${ShutterSpeed}s, ISO $EXIF:ISO)
             #[TAIL]# end

         with this command:

             exiftool -p test.fmt a.jpg b.jpg

         produces output like this:

             # Generated by ExifTool 8.10
             File: a.jpg - 2003:10:31 15:44:19
             (f/5.6, 1/60s, ISO 100)
             File: b.jpg - 2006:05:23 11:57:38
             (f/8.0, 1/13s, ISO 100)
             # end

         When -ee (-extractEmbedded) is combined with -p, embedded documents
         are effectively processed as separate input files.

         If a specified tag does not exist, a minor warning is issued and
         the line with the missing tag is not printed. However, the -f
         option may be used to set the value of missing tags to '-', or the
         -m option may be used to ignore minor warnings and leave the
         missing values empty.

    -s[*NUM*] (-short)
         Short output format. Prints tag names instead of descriptions. Add
         *NUM* or up to 3 -s options for even shorter formats:

             -s1 or -s        - print tag names instead of descriptions
             -s2 or -s -s     - no extra spaces to column-align values
             -s3 or -s -s -s  - print values only

         Also effective when combined with -t, -h, -X or -listx options.

    -S (-veryShort)
         Very short format. The same as -s2 (or two -s options). Tag names
         are printed instead of descriptions, and no extra spaces are added
         to column-align values.

    -sep *STR* (-separator)
         Specify separator string for items in List-type tags. When reading,
         the default is ", ". When writing, this option causes values
         assigned to list-type tags to be split into individual items at
         each substring matching specified separator. Space characters in
         the separator string match zero or more whitespace characters.

    -struct, --struct
         Output structured XMP information instead of flattening to
         individual tags. This option works well when combined with the XML
         (-X) and JSON (-j) output formats. For other output formats, the
         structures are serialized into the same format as when writing
         structured information (see
         <http://owl.phy.queensu.ca/~phil/exiftool/struct.html> for
         details). This option is enabled by default when copying tags to
         allow the preservation of complex structures, but this feature may
         be disabled with --struct. These options have no effect when
         assigning new values since both flattened tags and structured tags
         may always be written.

    -t (-tab)
         Output a tab-delimited list of description/values (useful for
         database import). May be combined with -s to print tag names
         instead of descriptions, or -S to print tag values only,
         tab-delimited on a single line. The -t option may also be used to
         add tag table information to the -X option output.

    -T (-table)
         Output tag values in table form. Equivalent to -t -S -q -f.

    -v[*NUM*] (-verbose)
         Print verbose messages. *NUM* specifies the level of verbosity in
         the range 0-5, with higher numbers being more verbose. If *NUM* is
         not given, then each -v option increases the level of verbosity by
         1. With any level greater than 0, most other options are ignored
         and normal console output is suppressed unless specific tags are
         extracted. Using -v0 causes the console output buffer to be flushed
         after each line (which may be useful to avoid delays when piping
         exiftool output), and prints the name of each processed file when
         writing.

    -w[!] *EXT* or *FMT* (-textOut)
         Write console output to files with names ending in *EXT*, one for
         each source file. The output file name is obtained by replacing the
         source file extension (including the '.') with the specified
         extension (and a '.' is added to the start of *EXT* if it doesn't
         already contain one). Alternatively, a *FMT* string may be used to
         give more control over the output file name and directory. In the
         format string, %d, %f and %e represent the directory, filename and
         extension of the source file, and %c represents a copy number which
         is automatically incremented if the file already exists. %d
         includes the trailing '/' if necessary, but %e does not include the
         leading '.'. For example:

             -w %d%f.txt       # same effect as "-w txt"
             -w dir/%f_%e.out  # write files to "dir" as "FILE_EXT.out"
             -w dir2/%d%f.txt  # write to "dir2", keeping dir structure
             -w a%c.txt        # write to "a.txt" or "a1.txt" or "a2.txt"...

         Existing files will not be overwritten unless an exclamation point
         is added to the option name (ie. -w! or -textOut!). Output
         directories are created automatically if necessary.

         Notes:

         1) In a Windows BAT file the "%" character is represented by "%%",
         so an argument like "%d%f.txt" is written as "%%d%%f.txt".

         2) It is not possible to specify a simple filename as an argument
         for -w. Instead, this simple case is accomplished using shell
         redirection:

             exiftool FILE > out.txt

         Advanced features: A substring of the original file name, directory
         or extension may be taken by specifying a field width immediately
         following the '%' character. If the width is negative, the
         substring is taken from the end. The substring position (characters
         to ignore at the start or end of the string) may be given by a
         second optional value after a decimal point. For example:

             Input File Name     Format Specifier    Output File Name
             ----------------    ----------------    ----------------
             Picture-123.jpg     %7f.txt             Picture.txt
             Picture-123.jpg     %-.4f.out           Picture.out
             Picture-123.jpg     %7f.%-3f            Picture.123
             Picture-123a.jpg    Meta%-3.1f.txt      Meta123.txt

         For %c, these modifiers have a different effects. If a field width
         is given, the copy number is padded with zeros to the specified
         width. A leading '-' adds a dash before the copy number, and a '+'
         adds an underline. By default, a copy number of zero is omitted,
         but this can be changed by adding a decimal point to the modifier.
         For example:

             -w A%-cZ.txt      # AZ.txt, A-1Z.txt, A-2Z.txt ...
             -w B%5c.txt       # B.txt, B00001.txt, B00002.txt ...
             -w C%.c.txt       # C0.txt, C1.txt, C2.txt ...
             -w D%-.c.txt      # D-0.txt, D-1.txt, D-2.txt ...
             -w E%-.4c.txt     # E-0000.txt, E-0001.txt, E-0002.txt ...
             -w F%-.4nc.txt    # F-0001.txt, F-0002.txt, F-0003.txt ...
             -w G%+c.txt       # G.txt, G_1.txt G_2.txt ...
             -w H%-lc.txt      # H.txt, H-b.txt, H-c.txt ...

         A special feature allows the copy number to be incremented for each
         processed file by using %C (upper case) instead of %c. This allows
         a sequential number to be added to output file names, even if the
         names are different. For %C, the number before the decimal place
         gives the starting index, and the number after the decimal place
         gives the field width. The following examples show the output
         filenames when used with the command "exiftool rose.jpg star.jpg
         jet.jpg ...":

             -w %C%f.txt       # 0rose.txt, 1star.txt, 2jet.txt
             -w %f-%10C.txt    # rose-10.txt, star-11.txt, jet-12.txt
             -w %.3C-%f.txt    # 000-rose.txt, 001-star.txt, 002-jet.txt
             -w %57.4C%f.txt   # 0057rose.txt, 0058star.txt, 0059jet.txt

         All format codes may be modified by 'l' or 'u' to specify lower or
         upper case respectively (ie. %le for a lower case file extension).
         When used to modify %c or %C, the numbers are changed to an
         alphabetical base (see example H above). Also, %c may be modified
         by 'n' to count using natural numbers starting from 1, instead of 0
         (see example F).

         This same *FMT* syntax is used with the -o and -tagsFromFile
         options, although %c is only valid for output file names.

    -X (-xmlFormat)
         Use RDF/XML formatting for console output. Implies the -a option,
         so duplicate tags are extracted. The formatting options -b, -D, -H,
         -l, -s, -sep, -struct and -t may be used in combination with -X to
         affect the output, but note that the tag ID (-D, -H and -t), binary
         data (-b) and structured output (-struct) options are not effective
         for the short output (-s). Another restriction of -s is that only
         one tag with a given group and name may appear in the output. Note
         that the tag ID options (-D, -H and -t) will produce non-standard
         RDF/XML unless the -l option is also used. By default, list-type
         tags with multiple values are formatted as an RDF Bag, but they are
         combined into a single string when -s or -sep is used. Using -L
         changes the XML encoding from "UTF-8" to "windows-1252". Other
         -charset settings change the encoding only if there is a
         corresponding standard XML character set. The -b option causes
         binary data values to be written, encoded in base64 if necessary.
         The -t option adds tag table information to the output (table
         "name", decimal tag "id", and "index" for cases where multiple
         conditional tags exist with the same ID).

   Processing control
    -a, --a (-duplicates, --duplicates)
         Allow (-a) or suppress (--a) duplicate tag names to be extracted.
         By default, duplicate tags are suppressed unless the -ee or -X
         options are used or the Duplicates option is enabled in the
         configuration file.

    -e (--composite)
         Extract existing tags only -- don't calculate composite tags.

    -ee (-extractEmbedded)
         Extract information from embedded documents in EPS and PDF files,
         embedded MPF images in JPEG and MPO files, streaming metadata in
         AVCHD videos, and the resource fork of Mac OS files. Implies the -a
         option. Use -g3 or -G3 to identify the originating document for
         extracted information. Embedded documents containing sub-documents
         are indicated with dashes in the family 3 group name. (ie. "Doc2-3"
         is the 3rd sub-document of the 2nd embedded document.)

    -ext *EXT*, --ext *EXT* (-extension)
         Process only files with (-ext) or without (--ext) a specified
         extension. There may be multiple -ext and --ext options. Extensions
         may begin with a leading '.', and case is not significant. For
         example:

             exiftool -ext .JPG DIR            # process only JPG files
             exiftool --ext crw --ext dng DIR  # process all but CRW and DNG
             exiftool --ext . DIR              # ignore if no extension

         Using this option has two main advantages over specifying "*.*EXT*"
         on the command line: 1) It applies to files in subdirectories when
         combined with the -r option. 2) The -ext option is
         case-insensitive, which is useful when processing files on
         case-sensitive filesystems.

    -F[*OFFSET*] (-fixBase)
         Fix the base for maker notes offsets. A common problem with some
         image editors is that offsets in the maker notes are not adjusted
         properly when the file is modified. This may cause the wrong values
         to be extracted for some maker note entries when reading the edited
         file. This option allows an integer *OFFSET* to be specified for
         adjusting the maker notes base offset. If no *OFFSET* is given,
         ExifTool takes its best guess at the correct base. Note that
         exiftool will automatically fix the offsets for images which store
         original offset information (ie. newer Canon models). Offsets are
         fixed permanently if -F is used when writing EXIF to an image. ie)

             exiftool -F -exif:resolutionunit=inches image.jpg

    -fast[*NUM*]
         Increase speed of extracting information from JPEG images. With
         this option, ExifTool will not scan to the end of a JPEG image to
         check for an AFCP or PreviewImage trailer, or past the first
         comment in GIF images or the audio/video data in WAV/AVI files to
         search for additional metadata. These speed benefits are small when
         reading images directly from disk, but can be substantial if piping
         images through a network connection. For more substantial speed
         benefits, -fast2 also causes exiftool to avoid extracting any EXIF
         MakerNote information.

    -fileOrder [-]*TAG*
         Set file processing order according to the sorted value of the
         specified *TAG*. For example, to process files in order of date:

             exiftool -fileOrder DateTimeOriginal DIR

         Additional -fileOrder options may be added as secondary sort keys.
         Floating point values are sorted numerically, and all other values
         are sorted alphabetically. The sort order may be reversed by
         prefixing the tag name with a "-" (ie. "-fileOrder -createdate"). A
         "#" may be appended to the tag name to disable print conversion for
         the sorted values. Note that this option has a large performance
         impact since it involves an additional processing pass of each
         file.

    -i *DIR* (-ignore)
         Ignore specified directory name. Use multiple -i options to ignore
         more than one directory name. A special *DIR* value of "SYMLINKS"
         (case sensitive) may be specified to ignore symbolic links when the
         -r option is used.

    -if *EXPR*
         Specify a condition to be evaluated before processing each *FILE*.
         *EXPR* is a Perl-like expression containing tag names prefixed by
         "$" symbols. It is evaluated with the tags from each *FILE* in
         turn, and the file is processed only if the expression returns
         true. Unlike Perl variable names, tag names are not case sensitive
         and may contain a hyphen. As well, tag names may have a leading
         group name separated by a colon, and/or a trailing "#" character to
         disable print conversion. When multiple -if options are used, all
         conditions must be satisfied to process the file. Returns an exit
         status of 1 if all files fail the condition. Below are a few
         examples:

             # extract shutterspeed from all Canon images in a directory
             exiftool -shutterspeed -if "$make eq 'Canon'" dir

             # add one hour to all images created on or after Apr. 2, 2006
             exiftool -alldates+=1 -if "$CreateDate ge '2006:04:02'" dir

             # set EXIF ISO value if possible, unless it is set already
             exiftool "-exif:iso<iso" -if "not $exif:iso" dir

             # find images containing a specific keyword (case insensitive)
             exiftool -if "$keywords =~ /harvey/i" -filename dir

    -m (-ignoreMinorErrors)
         Ignore minor errors and warnings. This enables writing to files
         with minor errors and disables some validation checks which could
         result in minor warnings. Generally, minor errors/warnings indicate
         a problem which usually won't result in loss of metadata if
         ignored. However, there are exceptions, so ExifTool leaves it up to
         you to make the final decision.

    -o *OUTFILE* or *FMT* (-out)
         Set the output file or directory name when writing information.
         (Without this option, the original file is renamed to
         "FILE_original" and output is sent to *FILE*.) *OUTFILE* may be "-"
         to write to stdout. The output file name may also be specified
         using a *FMT* string in which %d, %f and %e represent the
         directory, file name and extension of *FILE*. Also, %c may be used
         to add a copy number. See the -w option for *FMT* string examples.

         The output file is taken to be a directory name if it already
         exists as a directory or if the name ends with '/'. Output
         directories are created if necessary. Existing files will not be
         overwritten. Combining the -overwrite_original option with -o
         causes the original source file to be erased after the output file
         is successfully written.

         A special feature of this option allows the creation of certain
         types of files from scratch. Currently, this can be done with XMP,
         ICC/ICM, MIE, VRD and EXIF files by specifying the appropriate
         extension for *OUTFILE*. The file is then created from a
         combination of information in *FILE* (as if the -tagsFromFile
         option was used), and tag values assigned on the command line. If
         no *FILE* is specified, the output file may be created from scratch
         using only tags assigned on the command line.

    -overwrite_original
         Overwrite the original *FILE* (instead of preserving it by adding
         "_original" to the file name) when writing information to an image.
         Caution: This option should only be used if you already have
         separate backup copies of your image files. The overwrite is
         implemented by renaming a temporary file to replace the original.
         This deletes the original file and replaces it with the edited
         version in a single operation. When combined with -o, this option
         causes the original file to be deleted if the output file was
         successfully written.

    -overwrite_original_in_place
         Similar to -overwrite_original except that an extra step is added
         to allow the original file attributes to be preserved. For example,
         on a Mac this causes the original file creation date, ownership,
         type, creator, label color and icon to be preserved. This is
         implemented by opening the original file in update mode and
         replacing its data with a copy of a temporary file before deleting
         the temporary. The extra step results in slower performance, so the
         -overwrite_original option should be used instead unless necessary.

    -P (-preserve)
         Preserve the filesystem modification date/time of the original file
         ("FileModifyDate") when writing. Note that some filesystems (ie.
         Mac and Windows) store a creation date which is not preserved by
         this option. For these systems, the -overwrite_original_in_place
         option may be used to preserve the creation date.

    -password *PASSWD*
         Specify password to allow processing of password-protected PDF
         documents. If a password is required but not given, a warning is
         issued and the document is not processed. Ignored if a password is
         not required.

    -q (-quiet)
         Quiet processing. One -q suppresses normal informational messages,
         and a second -q suppresses warnings as well. Error messages can not
         be suppressed, although minor errors may be downgraded to warnings
         with the -m option.

    -r (-recurse)
         Recursively process files in subdirectories. Only meaningful if
         *FILE* is a directory name. By default, exiftool will also follow
         symbolic links to directories if supported by the system, but this
         may be disabled with "-i SYMLINKS" (see the -i option for details).

    -scanForXMP
         Scan all files (even unsupported formats) for XMP information
         unless found already. When combined with the -fast option, only
         unsupported file types are scanned. Warning: It can be time
         consuming to scan large files.

    -u (-unknown)
         Extract values of unknown tags. Add another -u to also extract
         unknown information from binary data blocks. This option applies to
         tags with numerical tag ID's, and causes tag names like
         "Exif_0xc5d9" to be generated for unknown information. It has no
         effect on information types which have human-readable tag ID's
         (such as XMP), since unknown tags are extracted automatically from
         these formats.

    -U (-unknown2)
         Extract values of unknown tags as well as unknown information from
         some binary data blocks. This is the same as two -u options.

    -z (-zip)
         When reading, causes information to be extracted from .gz and .bz2
         compressed images. (Only one image per archive. Requires gzip and
         bzip2 to be installed on the system.) When writing, causes
         compressed information to be written if supported by the image
         format. (ie. The PNG format supports compressed text.)

   Special features
    -geotag *TRKFILE*
         Geotag images from the specified GPS track log file. Using the
         -geotag option is equivalent to writing a value to the "Geotag"
         tag. After the -geotag option has been specified, the value of the
         "Geotime" tag is written to define a date/time for the position
         interpolation. If "Geotime" is not specified, the value is copied
         from "DateTimeOriginal". For example, the following two commands
         are equivalent:

             exiftool -geotag track.log image.jpg
             exiftool -geotag "-Geotime<DateTimeOriginal" image.jpg

         When the "Geotime" value is converted to UTC, the local system
         timezone is assumed unless the date/time value contains a timezone.
         Writing "Geotime" causes the following 8 EXIF tags to be created:
         GPSLatitude, GPSLatitudeRef, GPSLongitude, GPSLongitudeRef,
         GPSAltitude, GPSAltitudeRef, GPSDateStamp and GPSTimeStamp.
         Alternately "XMP:Geotime" may be written to create the following 5
         XMP tags: GPSLatitude, GPSLongitude, GPSAltitude, GPSAltitudeRef
         and GPSDateTime.

         The "Geosync" tag may be used to specify a time correction which is
         applied to each "Geotime" value for synchronization with GPS time.
         For example, the following command compensates for image times
         which are 1 minute and 20 seconds behind GPS:

             exiftool -geosync=+1:20 -geotag a.log DIR

         "Geosync" must be set before "Geotime" (if specified) to be
         effective. Advanced "Geosync" features allow a linear time drift
         correction and synchronization from previously geotagged images.
         See "geotag.html" in the full ExifTool distribution for more
         information.

         Multiple -geotag options may be used to concatinate GPS track log
         data. Also, a single -geotag option may be used to load multiple
         track log files by using wildcards in the *TRKFILE* name, but note
         that in this case *TRKFILE* must be quoted on most systems (with
         the notable exception of Windows) to prevent filename expansion.
         For example:

             exiftool -geotag "TRACKDIR/*.log" IMAGEDIR

         Currently supported track file formats are GPX, NMEA RMC/GGA/GLL,
         KML, IGC, Garmin XML and TCX, and Magellan PMGNTRK. See "GEOTAGGING
         EXAMPLES" for examples. Also see "geotag.html" in the full ExifTool
         distribution and the Image::ExifTool Options for more details and
         for information about geotag configuration options.

    -use *MODULE*
         Add features from specified plug-in *MODULE*. Currently, the MWG
         module is the only plug-in module distributed with exiftool. This
         module adds read/write support for tags as recommended by the
         Metadata Working Group. To save typing, "-use MWG" is assumed if
         the "MWG" group is specified for any tag on the command line. See
         the MWG Tags documentation for more details.

   Utilities
    -restore_original
    -delete_original[!]
         These utility options automate the maintenance of the "_original"
         files created by exiftool. They have no effect on files without an
         "_original" copy. The -restore_original option restores the
         specified files from their original copies by renaming the
         "_original" files to replace the edited versions. For example, the
         following command restores the originals of all .jpeg images in
         directory "DIR":

             exiftool -restore_original -ext jpg DIR

         The -delete_original option deletes the "_original" copies of all
         files specified on the command line. Without a trailing "!" this
         option prompts for confirmation before continuing. For example, the
         following command deletes "a.jpg_original" if it exists, after
         asking "Are you sure?":

             exiftool -delete_original a.jpg

         These options may not be used with other options to read or write
         tag values in the same command, but may be combined with options
         such -ext, -if, -r, -q and -v.

   Other options
    -@ *ARGFILE*
         Read command-line arguments from the specified file. The file
         contains one argument per line (NOT one option per line -- some
         options require additional arguments which must be placed on
         separate lines). Blank lines and lines beginning with "#" and are
         ignored. Normal shell processing of arguments is not performed,
         which among other things means that arguments should not be quoted.
         *ARGFILE* may exist relative to either the current directory or the
         exiftool directory unless an absolute pathname is given.

         For example, the following *ARGFILE* will set the value of
         Copyright to "Copyright YYYY, Phil Harvey", where "YYYY" is the
         year of CreateDate:

             -d
             %Y
             -copyright<Copyright $createdate, Phil Harvey

    -k (-pause)
         Pause with the message "-- press any key --" before terminating.
         This option is used to prevent the command window from closing when
         run as a Windows drag and drop application.

    -list, -listw, -listf, -listr, -listwf, -listg[*NUM*], -listd, -listx
         Print a list of all valid tag names (-list), all writable tag names
         (-listw), all supported file extensions (-listff), all recognized
         file extensions (-listr), all writable file extensions (-listwf),
         all tag groups [in a specified family] (-listg[*NUM*]), all
         deletable tag groups (-listd), or an XML database of tag details
         (-listx). The -list, -listw and -listx options may be followed by
         an additional argument of the form "-GROUP:All" to list all tags in
         a specific group, where "GROUP" is one or more family 0-2 group
         names (excepting EXIF IFD groups) separated by colons. With -listg,
         *NUM* may be given to specify the group family, otherwise family 0
         is assumed. When combined with -listx, the -s option shortens the
         output by omitting the descriptions and values, and -f adds a
         'flags' attribute. Here are some examples:

             -list               # list all tag names
             -list -EXIF:All     # list all EXIF tags
             -list -xmp:time:all # list all XMP tags relating to time
             -listw -XMP-dc:All  # list all writable XMP-dc tags
             -listf              # list all supported file extensions
             -listr              # list all recognized file extensions
             -listwf             # list all writable file extensions
             -listg1             # list all groups in family 1
             -listd              # list all deletable groups
             -listx -EXIF:All    # list database of EXIF tags in XML format
             -listx -XMP:All -s  # list short XML database of XMP tags

         Note that none of the -list options require an input *FILE*.

    -ver Print exiftool version number.

   Advanced options
    Among other things, the advanced options allow complex processing to be
    performed from a single command without the need for additional
    scripting. This may be particularly useful for implementations such as
    Windows drag-and-drop applications. These options may also be used to
    improve performance in multi-pass processing by reducing the overhead
    required to load exiftool for each invocation.

    -common_args
         Specifies that all arguments following this option are common to
         all executed commands when -execute is used. This and the -config
         option are the only options that may not be used inside a -@
         *ARGFILE*.

    -config *CFGFILE*
         Load specified configuration file instead of the default
         ".ExifTool_config". If used, this option must come before all other
         arguments on the command line. The *CFGFILE* name may contain a
         directory specification (otherwise the file must exist in the
         current directory), or may be set to an empty string ("") to
         disable loading of the config file. See the sample configuration
         file and "config.html" in the full ExifTool distribution for more
         information about the ExifTool configuration file.

    -execute
         Execute command for all arguments up to this point on the command
         line. Allows multiple commands to be executed from a single command
         line.

    -srcfile *FMT*
         Specify a different source file to be processed based on the name
         of the original *FILE*. This may be useful in some special
         situations for processing related preview images or sidecar files.
         See the -w option for a description of the *FMT* syntax. Note that
         file name *FMT* strings for all options are based on the original
         *FILE* specified from the command line, not the name of the source
         file specified by -srcfile.

    -stay_open *FLAG*
         If *FLAG* is 1 or "True", causes exiftool keep reading from the -@
         *ARGFILE* even after reaching the end of file. This feature allows
         calling applications to pre-load exiftool, thus avoiding the
         overhead of loading exiftool for each command. The procedure is as
         follows:

         1) Execute "exiftool -stay_open True -@ *ARGFILE*", where *ARGFILE*
         is the name of an existing (possibly empty) argument file or "-" to
         pipe arguments from the standard input.

         2) Write exiftool command-line arguments to *ARGFILE*, one argument
         per line (see the -@ option for details).

         3) Write "-execute<nl>" to *ARGFILE*, where "<nl>" represents a
         newline sequence. (Note: You may need to flush your write buffers
         now if using buffered output.) Exiftool will then execute the
         command with the arguments received up to this point, send a
         "{ready}" message to stdout when done (unless the -q option is
         used), and continue trying to read arguments for the next command
         from *ARGFILE*.

         4) Repeat steps 2 and 3 for each command.

         5) Write "-stay_open<nl>False<nl>" to *ARGFILE* when done. This
         will cause exiftool to process any remaining arguments then exit
         normally.

         The input *ARGFILE* may be changed at any time before step 5 above
         by writing the following lines to the currently open *ARGFILE*:

             -stay_open
             True
             -@
             NEWARGFILE

         This causes *ARGFILE* to be closed, and *NEWARGFILE* to be kept
         open. (Without the -stay_open here, exiftool would have returned to
         reading arguments from *ARGFILE* after reaching the end of
         *NEWARGFILE*.)

READING EXAMPLES
    exiftool -a -u -g1 a.jpg
         Print all meta information in an image, including duplicate and
         unknown tags, sorted by group (for family 1).

    exiftool -common dir
         Print common meta information for all images in "dir".

    exiftool -T -createdate -aperture -shutterspeed -iso dir > out.txt
         List specified meta information in tab-delimited column form for
         all images in "dir" to an output text file named "out.txt".

    exiftool -s -ImageSize -ExposureTime b.jpg
         Print ImageSize and ExposureTime tag names and values.

    exiftool -l -canon c.jpg d.jpg
         Print standard Canon information from two image files.

    exiftool -r -w .txt -common pictures
         Recursively extract common meta information from files in
         "pictures" directory, writing text output to ".txt" files with the
         same names.

    exiftool -b -ThumbnailImage image.jpg > thumbnail.jpg
         Save thumbnail image from "image.jpg" to a file called
         "thumbnail.jpg".

    exiftool -b -JpgFromRaw -w _JFR.JPG -ext CRW -r .
         Recursively extract JPG image from all Canon CRW files in the
         current directory, adding "_JFR.JPG" for the name of the output JPG
         files.

    exiftool -d "%r %a, %B %e, %Y" -DateTimeOriginal -S -s *.jpg
         Print formatted date/time for all JPG files in the current
         directory.

    exiftool -IFD1:XResolution -IFD1:YResolution image.jpg
         Extract image resolution from EXIF IFD1 information (thumbnail
         image IFD).

    exiftool "-*resolution*" image.jpg
         Extract all tags with names containing the word "Resolution" from
         an image.

    exiftool -xmp:author:all -a image.jpg
         Extract all author-related XMP information from an image.

    exiftool -xmp -b a.jpg > out.xmp
         Extract complete XMP data record intact from "a.jpg" and write it
         to "out.xmp" using the special "XMP" tag (see the Extra tags in
         Image::ExifTool::TagNames).

    exiftool -p "$filename has date $dateTimeOriginal" -q -f dir
         Print one line of output containing the file name and
         DateTimeOriginal for each image in directory "dir".

    exiftool -ee -p "$gpslatitude, $gpslongitude, $gpstimestamp" a.m2ts
         Extract all GPS positions from an AVCHD video.

    exiftool -icc_profile -b -w icc image.jpg
         Save complete ICC_Profile from an image to an output file with the
         same name and an extension of ".icc".

    exiftool -htmldump -w tmp/%f_%e.html t/images
         Generate HTML pages from a hex dump of EXIF information in all
         images from the "t/images" directory. The output HTML files are
         written to the "tmp" directory (which is created if it didn't
         exist), with names of the form "FILENAME_EXT.html".

WRITING EXAMPLES
    Note that quotes are necessary around arguments which contain certain
    special characters such as ">", "<" or any white space. These quoting
    techniques are shell dependent, but the examples below will work in
    the Windows CMD shell.

    exiftool -Comment="This is a new comment" dst.jpg
         Write new comment to a JPG image (replaces any existing comment).

    exiftool -comment= -o newdir *.jpg
         Remove comment from all JPG images in the current directory,
         writing the modified images to a new directory.

    exiftool -keywords=EXIF -keywords=editor dst.jpg
         Replace existing keyword list with two new keywords ("EXIF" and
         "editor").

    exiftool -Keywords+=word -o newfile.jpg src.jpg
         Copy a source image to a new file, and add a keyword ("word") to
         the current list of keywords.

    exiftool -credit-=xxx dir
         Delete Credit information from all files in a directory where the
         Credit value was ("xxx").

    exiftool -xmp:description-de="k&uuml;hl" -E dst.jpg
         Write alternate language for XMP:Description, using HTML character
         escaping to input special characters.

    exiftool -all= dst.jpg
         Delete all meta information from an image. Note: You should NOT do
         this to RAW images (except DNG) since proprietary RAW image formats
         often contain information in the makernotes that is necessary for
         converting the image.

    exiftool -all= -comment="lonely" dst.jpg
         Delete all meta information from an image and add a comment back
         in. (Note that the order is important: -comment="lonely" -all=
         would also delete the new comment.)

    exiftool -all= --jfif:all dst.jpg
         Delete all meta information except JFIF group from an image.

    exiftool -Photoshop:All= dst.jpg
         Delete Photoshop meta information from an image (note that the
         Photoshop information also includes IPTC).

    exiftool -r -XMP-crss:all= DIR
         Recursively delete all XMP-crss information from images in a
         directory.

    exiftool "-ThumbnailImage<=thumb.jpg" dst.jpg
         Set the thumbnail image from specified file (Note: The quotes are
         neccessary to prevent shell redirection).

    exiftool "-JpgFromRaw<=%d%f_JFR.JPG" -ext CRW -r .
         Recursively write JPEG images with filenames ending in "_JFR.JPG"
         to the JpgFromRaw tag of like-named files with extension ".CRW" in
         the current directory. (This is the inverse of the "-JpgFromRaw"
         command of the "READING EXAMPLES" section above.)

    exiftool -DateTimeOriginal-="0:0:0 1:30:0" dir
         Adjust original date/time of all images in directory "dir" by
         subtracting one hour and 30 minutes. (This is equivalent to
         "-DateTimeOriginal-=1.5". See Image::ExifTool::Shift.pl for
         details.)

    exiftool -createdate+=3 -modifydate+=3 a.jpg b.jpg
         Add 3 hours to the CreateDate and ModifyDate timestamps of two
         images.

    exiftool -AllDates+=1:30 -if "$make eq 'Canon'" dir
         Shift the values of DateTimeOriginal, CreateDate and ModifyDate
         forward by 1 hour and 30 minutes for all Canon images in a
         directory. (The AllDates tag is provided as a shortcut for these
         three tags, allowing them to be accessed via a single tag.)

    exiftool -xmp:city=Kingston image1.jpg image2.nef
         Write a tag to the XMP group of two images. (Without the "xmp:"
         this tag would get written to the IPTC group since "City" exists in
         both, and IPTC is preferred by default.)

    exiftool -LightSource-="Unknown (0)" dst.tiff
         Delete "LightSource" tag only if it is unknown with a value of 0.

    exiftool -whitebalance-=auto -WhiteBalance=tung dst.jpg
         Set "WhiteBalance" to "Tungsten" only if it was previously "Auto".

    exiftool -comment-= -comment="new comment" a.jpg
         Write a new comment only if the image doesn't have one already.

    exiftool -o %d%f.xmp dir
         Create XMP meta information data files for all images in "dir".

    exiftool -o test.xmp -owner=Phil -title="XMP File"
         Create an XMP data file only from tags defined on the command line.

    exiftool "-ICC_Profile<=%d%f.icc" image.jpg
         Write ICC_Profile to an image from a ".icc" file of the same name.

    exiftool -hierarchicalkeywords="{keyword=one,children={keyword=B}}"
         Write structured XMP information.

    exiftool -trailer:all= image.jpg
         Delete any trailer found after the end of image (EOI) in a JPEG
         file. A number of digital cameras store a large PreviewImage after
         the JPEG EOI, and the file size may be reduced significantly by
         deleting this trailer. See the JPEG Tags documentation for a list
         of recognized JPEG trailers.

COPYING EXAMPLES
    These examples demonstrate the ability to copy tag values between files.

    exiftool -tagsFromFile src.crw dst.jpg
         Copy the values of all writable tags from "src.crw" to "dst.jpg",
         writing the information to the preferred groups.

    exiftool -TagsFromFile src.jpg -all:all dst.jpg
         Copy the values of all writable tags from "src.jpg" to "dst.jpg",
         preserving the original tag groups.

    exiftool -all= -tagsfromfile src.jpg -exif:all dst.jpg
         Erase all meta information from "dst.jpg" image, then copy EXIF
         tags from "src.jpg".

    exiftool -exif:all= -tagsfromfile @ -all:all -unsafe bad.jpg
         Rebuild all EXIF meta information from scratch in an image. This
         technique can be used in JPEG images to repair corrupted EXIF
         information which otherwise could not be written due to errors. The
         "Unsafe" tag is a shortcut for unsafe EXIF tags in JPEG images
         which are not normally copied. See the tag name documentation for
         more details about unsafe tags.

    exiftool -Tagsfromfile a.jpg out.xmp
         Copy meta information from "a.jpg" to an XMP data file. If the XMP
         data file "out.xmp" already exists, it will be updated with the new
         information. Otherwise the XMP data file will be created. Only XMP,
         ICC and MIE files may be created like this (other file types may be
         edited but not created). See "WRITING EXAMPLES" above for another
         technique to generate XMP files.

    exiftool -tagsFromFile a.jpg -XMP:All= -ThumbnailImage= -m b.jpg
         Copy all meta information from "a.jpg" to "b.jpg", deleting all XMP
         information and the thumbnail image from the destination.

    exiftool -TagsFromFile src.jpg -title -author=Phil dst.jpg
         Copy title from one image to another and set a new author name.

    exiftool -TagsFromFile a.jpg -ISO -TagsFromFile b.jpg -comment dst.jpg
         Copy ISO from one image and Comment from another image to a
         destination image.

    exiftool -tagsfromfile src.jpg -exif:all --subifd:all dst.jpg
         Copy only the EXIF information from one image to another, excluding
         SubIFD tags.

    exiftool "-DateTimeOriginal>FileModifyDate" dir
         Use the original date from the meta information to set the same
         file's filesystem modification date for all images in a directory.
         (Note that "-TagsFromFile @" is assumed if no other -TagsFromFile
         is specified when redirecting information as in this example.)

    exiftool -TagsFromFile src.jpg "-all>xmp:all" dst.jpg
         Copy all possible information from "src.jpg" and write in XMP
         format to "dst.jpg".

    exiftool -@ iptc2xmp.args -iptc:all= a.jpg
         Translate IPTC information to XMP with appropriate tag name
         conversions, and delete the original IPTC information from an
         image. This example uses iptc2xmp.args, which is a file included
         with the ExifTool distribution that contains the required arguments
         to convert IPTC information to XMP format. Also included with the
         distribution are xmp2iptc.args (which performs the inverse
         conversion) and a few more .args files for other conversions
         between EXIF, IPTC and XMP.

    exiftool -tagsfromfile %d%f.CRW -r -ext JPG dir
         Recursively rewrite all "JPG" images in "dir" with information
         copied from the corresponding "CRW" images in the same directories.

    exiftool "-make+>keywords" image.jpg
         Add camera make to list of keywords.

    exiftool "-comment<ISO=$exif:iso Exposure=${shutterspeed}" dir
         Set the Comment tag of all images in "dir" from the values of the
         EXIF:ISO and ShutterSpeed tags. The resulting comment will be in
         the form "ISO=100 Exposure=1/60".

    exiftool -TagsFromFile src.jpg -icc_profile dst.jpg
         Copy ICC_Profile from one image to another.

    exiftool -TagsFromFile src.jpg -all:all dst.mie
         Copy all meta information in its original form from a JPEG image to
         a MIE file. The MIE file will be created if it doesn't exist. This
         technique can be used to store the metadata of an image so it can
         be inserted back into the image (with the inverse command) later in
         a workflow.

    exiftool -o dst.mie -all:all src.jpg
         This command performs exactly the same task as the command above,
         except that the "-o" option will not write to an output file that
         already exists.

    exiftool -if $jpgfromraw -b -jpgfromraw -w %d%f_%ue.jpg -execute -if
    $previewimage -b -previewimage -w %d%f_%ue.jpg -execute -tagsfromfile @
    -srcfile %d%f_%ue.jpg -overwrite_original -common_args --ext jpg DIR
         [Advanced] Extract JpgFromRaw or PreviewImage from all but JPG
         files in DIR, saving them with file names like "image_EXT.jpg",
         then add all meta information from the original files to the
         extracted images. Here, the command line is broken into three
         sections (separated by -execute options), and each is executed as
         if it were a separate command. The -common_args option causes the
         "--ext jpg DIR" arguments to be applied to all three commands, and
         the -srcfile option allows the extracted JPG image to be the source
         file for the third command (whereas the RAW files are the source
         files for the other two commands).

RENAMING EXAMPLES
    By writing the "FileName" and "Directory" tags, files are renamed and/or
    moved to new directories. This can be particularly useful and powerful
    for organizing files by date when combined with the -d option. New
    directories are created as necessary, but existing files will not be
    overwritten. The format codes %d, %f and %e may be used in the new file
    name to represent the directory, name and extension of the original
    file, and %c may be used to add a copy number if the file already exists
    (see the -w option for details). Note that if used within a date format
    string, an extra '%' must be added to pass these codes through the
    date/time parser. (And further note that in a Windows batch file, all
    '%' characters must also be escaped, so in this extreme case "%%%%f" is
    necessary to pass a simple "%f" through the two levels of parsing.) See
    <http://owl.phy.queensu.ca/~phil/exiftool/filename.html> for additional
    documentation and examples.

    exiftool -filename=new.jpg dir/old.jpg
         Rename "old.jpg" to "new.jpg" in directory "dir".

    exiftool -directory=%e dir
         Move all files from directory "dir" into directories named by the
         original file extensions.

    exiftool "-Directory<DateTimeOriginal" -d %Y/%m/%d dir
         Move all files in "dir" into a directory hierarchy based on year,
         month and day of "DateTimeOriginal". ie) This command would move
         the file "dir/image.jpg" with a "DateTimeOriginal" of "2005:10:12
         16:05:56" to "2005/10/12/image.jpg".

    exiftool -o . "-Directory<DateTimeOriginal" -d %Y/%m/%d dir
         Same effect as above except files are copied instead of moved.

    exiftool "-filename<%f_${focallength}.%e" dir
         Rename all files in "dir" by adding FocalLength to the file name.

    exiftool "-FileName<CreateDate" -d %Y%m%d_%H%M%S%%-c.%%e dir
         Rename all images in "dir" according to the "CreateDate" date and
         time, adding a copy number with leading '-' if the file already
         exists ("%-c"), and preserving the original file extension (%e).
         Note the extra '%' necessary to escape the filename codes (%c and
         %e) in the date format string.

    exiftool -r "-FileName<CreateDate" -d %Y-%m-%d/%H%M_%%f.%%e dir
         Both the directory and the filename may be changed together via the
         "FileName" tag if the new "FileName" contains a '/'. The example
         above recursively renames all images in a directory by adding a
         "CreateDate" timestamp to the start of the filename, then moves
         them into new directories named by date.

    exiftool "-FileName<${CreateDate}_$filenumber.jpg" -d %Y%m%d *.jpg
         Set the filename of all JPG images in the current directory from
         the CreateDate and FileNumber tags, in the form
         "20060507_118-1861.jpg".

GEOTAGGING EXAMPLES
    ExifTool implements geotagging via 3 special tags: Geotag (which for
    convenience is also implemented as an exiftool option), Geosync and
    Geotime. The examples below highlight some geotagging features. See
    <http://owl.phy.queensu.ca/~phil/exiftool/geotag.html> for additional
    documentation.

    exiftool -geotag track.log a.jpg
         Geotag an image ("a.jpg") from position information in a GPS track
         log ("track.log"). Since the "Geotime" tag is not specified, the
         value of DateTimeOriginal is used for geotagging. Local system time
         is assumed unless DateTimeOriginal contains a timezone.

    exiftool -geotag t.log -geotime="2009:04:02 13:41:12-05:00" a.jpg
         Geotag an image with the GPS position for a specific time. (Note
         that the "Geotag" tag must be assigned before "Geotime" for the GPS
         data to be available when "Geotime" is set.)

    exiftool -geotag log.gpx "-xmp:geotime<createdate" dir
         Geotag all images in directory "dir" with XMP tags instead of EXIF
         tags, based on the image CreateDate. (In this case, the order of
         the arguments doesn't matter because tags with values copied from
         other tags are always set after constant values.)

    exiftool -geotag a.log -geosync=-20 dir
         Geotag images in directory "dir", accounting for image timestamps
         which were 20 seconds ahead of GPS.

    exiftool -geotag a.log -geosync=1.jpg -geosync=2.jpg dir
         Geotag images using time synchronization from two previously
         geotagged images (1.jpg and 2.jpg), synchronizing the image and GPS
         times using a linear time drift correction.

    exiftool -geotag a.log "-geotime<${createdate}+01:00" dir
         Geotag images in "dir" using CreateDate with the specified
         timezone. If CreateDate already contained a timezone, then the
         timezone specified on the command line is ignored.

    exiftool -geotag= a.jpg
         Delete GPS tags which may have been added by the geotag feature.
         Note that this does not remove all GPS tags -- to do this instead
         use "-gps:all=".

    exiftool -xmp:geotag= a.jpg
         Delete XMP GPS tags which were added by the geotag feature.

    exiftool -xmp:geotag=track.log a.jpg
         Geotag an image with XMP tags, using the time from
         DateTimeOriginal.

    exiftool -geotag a.log -geotag b.log -r dir
         Combine multiple track logs and geotag an entire directory tree of
         images.

    exiftool -geotag "tracks/*.log" -r dir
         Read all track logs from the "tracks" directory.

    exiftool -p gpx.fmt -d %Y-%m-%dT%H:%M:%SZ dir > out.gpx
         Generate a GPX track log from all images in directory "dir". This
         example uses the "gpx.fmt" file included in the full ExifTool
         distribution package and assumes that the images in "dir" have all
         been previously geotagged.

PIPING EXAMPLES
    type a.jpg | exiftool -
         Extract information from stdin.

    exiftool image.jpg -thumbnailimage -b | exiftool -
         Extract information from an embedded thumbnail image.

    type a.jpg | exiftool -iptc:keywords+=fantastic - > b.jpg
         Add an IPTC keyword in a pipeline, saving output to a new file.

    wget -qO - http://a.domain.com/bigfile.jpg | exiftool -fast -
         Extract information from an image over the internet using the GNU
         wget utility. The -fast option prevents exiftool from scanning for
         trailer information, so only the meta information header is
         transferred.

    exiftool a.jpg -thumbnailimage -b | exiftool -comment=wow - | exiftool
    a.jpg "-thumbnailimage<=-"
         Add a comment to an embedded thumbnail image. (Why anyone would
         want to do this I don't know, but I've included this as an example
         to illustrate the flexibility of ExifTool.)

DIAGNOSTICS
    The exiftool application exits with a status of 0 on success, or 1 if an
    error occured or if all files failed the -if condition.

AUTHOR
    Copyright 2003-2011, Phil Harvey

    This is free software; you can redistribute it and/or modify it under
    the same terms as Perl itself.

SEE ALSO
    Image::ExifTool(3pm), Image::ExifTool::TagNames(3pm),
    Image::ExifTool::Shortcuts(3pm), Image::ExifTool::Shift.pl

