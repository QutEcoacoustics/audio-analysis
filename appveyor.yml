# overwrite the default version scheme - we have our own set in MsBuild
version: '{build}'

image: Visual Studio 2017

skip_commits:
  # allow us to manually skip a build
  message: '/\[chore\]|\[no_ci\]|\[ci_skip\]|\[skip_ci\]/'
  # Do not trigger a build for anything not .NET
  files:
    - 'AudioAnalysis/Matlab/**/*'
    - 'AudioAnalysis/RCode/**/*'
    - '**/*.md'

# Do not run a build on new tags - we use tags to create releases, which can
# only occur after sucessful build on another branch
skip_tags: true

cache:
  - AudioAnalysis\packages -> **\packages.config
  # cache the lfs objects directory so that git-lfs does not always download a
  # full set of blobs (saves bandwidth)
  - '.git\lfs\objects'

matrix:
  fast_finish: true
  
platform:
  - Any CPU


# Attempt to limit the number of commits to clone - our project has a LOT of history
# TODO: drop this to about ~100 later on
clone_depth: 200

environment:
  # Disable git-lfs to give appveyor a chance to overlay the cache files onto the repo
  GIT_LFS_SKIP_SMUDGE: 1
  # An encrypted token that allows deploying to GitHub (registered to @atruskie)
  GH_CREATE_RELEASES_TOKEN:
    secure: iVfuU5KWiUqXeahc+j7hfQPquJFuxRXnLJajRBE94PGxkliT2GGaXkxJGJVCBDPW

# Before the clone occurs
init:
  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - echo Starting Build
  #- git lfs install --skip-smudge

before_build:
  # Download fresh lfs assets
  - git lfs pull
  # Determine whether or not we should tag and release
  # if the last tag hash matches the current build hash then we should not duplicate a release
  - ps: $env:TAG_NOT_PREVIOUSLY_RELEASED = ($(git tag -l --format="%(objectname)") -notcontains $env:APPVEYOR_REPO_COMMIT)
  - ps: $env:RELEASE_COMMIT = $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED -ilike "*\[release\]*"; $env:SHOULD_RELEASE = ($env:RELEASE_COMMIT -ieq "true") -or ($env:APPVEYOR_SCHEDULED_BUILD -and ($env:TAG_NOT_PREVIOUSLY_RELEASED -ieq "true"));
  - ps: ls env:* -Include SHOULD*,APPVEYOR_SCHEDULED_BUILD*,APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED*,RELEASE_COMMIT,TAG_NOT_PREVIOUSLY_RELEASED
  # Restore packages 
  - cd AudioAnalysis
  - nuget restore

build_script:
  - echo "Building Debug"
  - ps: >
      msbuild 
      "C:\projects\audio-analysis\AudioAnalysis\AudioAnalysis2012.sln" /m /verbosity:minimal 
      /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
      /p:WarningLevel=0 /p:RunCodeAnalysis=false
      /p:Configuration=Debug /property:Platform=$env:platform

  - echo "Building Release"
  - ps: >
      msbuild 
      "C:\projects\audio-analysis\AudioAnalysis\AudioAnalysis2012.sln" /m /verbosity:minimal 
      /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
      /p:WarningLevel=0 /p:RunCodeAnalysis=false
      /p:Configuration=Release /property:Platform=$env:platform

after_build:
  # package up artifacts
  # defined env vars: $env:ApPackage{Configuration} , $env:ApVersion , $env:ApName{Configuration}
  - cd %APPVEYOR_BUILD_FOLDER%
  - ps: . .\package.ps1 "Debug"
  - ps: . .\package.ps1 "Release"
  #- ps: 'ls env:'

test:
  assemblies:
    only:
      #- "Acoustics\Acoustics.Test\bin\Debug\Acoustics.Test.dll"
      - '**\bin\Debug\Acoustics.Test.dll'
  
# Upload previously generated artifacts
artifacts:
  - path: '$(ApPackageDebug)'
    name: DebugPackage
  - path: '$(ApPackageRelease)'
    name: ReleasePackage

before_deploy:
  # Enable git credential store
  - git config --global credential.helper store
  - ps: git config --global user.email "$($env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL)"
  - ps: git config --global user.name "$($env:APPVEYOR_REPO_COMMIT_AUTHOR)"
  # add our auth token to the cred store
  - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GH_CREATE_RELEASES_TOKEN):x-oauth-basic@github.com`n"
  # tag if needed, and output $env:ApTagName 
  - cd %APPVEYOR_BUILD_FOLDER%
  # Buggy authentication with git-lfs
  - git config lfs.https://github.com/QutBioacoustics/audio-analysis.git/info/lfs.locksverify false
  - ps: . .\tag.ps1 $env:ApVersion
  # prepare release strings: $env:ApReleaseMessage, $env:ApReleaseTitle
  - ps: . .\release.ps1 $env:ApTagName $true
  #- ps: 'ls env:'
  
deploy:
  - provider: GitHub
    tag: $(ApTagName)
    release: "$(ApReleaseTitle)"
    description: "$(ApReleaseMessage)"
    auth_token: $(GH_CREATE_RELEASES_TOKEN)
    artifact: DebugPackage,ReleasePackage
    prerelease: true
    on:
      # Do not create new releases unless this is the master branch
      branch: master
      # Do not create a new release unless this was a scheduled build or a forced build
      SHOULD_RELEASE: True
      

notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
    on_build_status_changed: true
    on_build_failure: true
    on_build_success: true
  
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
