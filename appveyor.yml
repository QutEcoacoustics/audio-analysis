# # overwrite the default version scheme - we have our own set in MsBuild
# version: '{build}'

# image: Visual Studio 2017

# skip_commits:
#   # allow us to manually skip a build
#   message: '/\[chore\]|\[no_ci\]|\[ci_skip\]|\[skip_ci\]/'
#   # Do not trigger a build for anything not .NET
#   files:
#     - '**/*.md'
#     - 'docs/**/*'
#     - 'scripts/**/*'

# Do not run a build on new tags - we use tags to create releases, which can
# only occur after successful build on another branch
skip_tags: true

cache:
  - packages
  # cache the lfs objects directory so that git-lfs does not always download a
  # full set of blobs (saves bandwidth)
  - '.git\lfs\objects'

matrix:
  fast_finish: true

platform:
  - Any CPU

# Attempt to limit the number of commits to clone - our project has a LOT of history
clone_depth: 200

environment:
  # Disable git-lfs to give appveyor a chance to overlay the cache files onto the repo
  GIT_LFS_SKIP_SMUDGE: 1
  # An encrypted token that allows deploying to GitHub (registered to @atruskie)
  GH_CREATE_RELEASES_TOKEN:
    secure: iVfuU5KWiUqXeahc+j7hfQPquJFuxRXnLJajRBE94PGxkliT2GGaXkxJGJVCBDPW
  # These are the personal credentials of someone with access to the personal
  # account / organization that we want to push to
  DOCKER_USER:
    secure: A6mk2EeHQsCrlZnK7vwzAA==
  DOCKER_PASS:
    secure: eTD4d8vJCQW3CCNqGLKU2e79BhEeBVt6TxFMjy3f/KQ=

# Before the clone occurs
init:
  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - echo Starting Build

before_build:
  # # Download fresh lfs assets
  # - git lfs pull
  # Determine whether or not we should tag and release
  # if the last tag hash matches the current build hash then we should not duplicate a release
  - ps: |
      $tags = git log --tags -n 10 --no-walk --format="%H %D"
      Write-Output ("Recent tags:`n" + ($tags | Out-String))
      $env:TAG_NOT_PREVIOUSLY_RELEASED=($tags -like "$env:APPVEYOR_REPO_COMMIT*").Length -eq 0
      $env:RELEASE_COMMIT = $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED -ilike "*``[release``]*"
      $env:SHOULD_RELEASE = ($env:RELEASE_COMMIT -ieq "true") -or ($env:APPVEYOR_SCHEDULED_BUILD -and ($env:TAG_NOT_PREVIOUSLY_RELEASED -ieq "true"))
      ls env:* -Include SHOULD*,APPVEYOR_SCHEDULED_BUILD*,APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED*,RELEASE_COMMIT,TAG_NOT_PREVIOUSLY_RELEASED
  # Restore packages
  - nuget restore
  # Debugging a dirty flag in build version
  - git status
  - docker version

build_script:
  - echo "Building Debug"
  - ps: >
      msbuild
      "C:\projects\audio-analysis\AudioAnalysis.sln" /m /verbosity:minimal
      /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
      /p:WarningLevel=0 /p:RunCodeAnalysis=false
      /p:Configuration=Debug /property:Platform=$env:platform

  - echo "Building Release"
  - ps: >
      msbuild
      "C:\projects\audio-analysis\AudioAnalysis.sln" /m /verbosity:minimal
      /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
      /p:WarningLevel=0 /p:RunCodeAnalysis=false
      /p:Configuration=Release /property:Platform=$env:platform

after_build:
  # package up artifacts
  # defined env vars: $env:ApPackage{Configuration} , $env:ApVersion , $env:ApName{Configuration}
  - cd %APPVEYOR_BUILD_FOLDER%
  - ps: . .\build\package.ps1 "Debug"
  - ps: . .\build\package.ps1 "Release"
  #- ps: 'ls env:'

test:
  assemblies:
    only:
      - 'tests\Acoustics.Test\bin\Debug\Acoustics.Test.dll'
      - 'tests\AED.Test\bin\Debug\AED.Test.dll'

# Upload previously generated artifacts
artifacts:
  - path: '$(ApPackageDebug)'
    name: DebugPackage
  - path: '$(ApPackageRelease)'
    name: ReleasePackage

before_deploy:
  # Enable git credential store
  - git config --global credential.helper store
  - ps: git config --global user.email "$($env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL)"
  - ps: git config --global user.name "$($env:APPVEYOR_REPO_COMMIT_AUTHOR)"
  # add our auth token to the cred store
  - ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GH_CREATE_RELEASES_TOKEN):x-oauth-basic@github.com`n"
  # tag if needed, and output $env:ApTagName
  - cd %APPVEYOR_BUILD_FOLDER%
  # Buggy authentication with git-lfs
  - git config lfs.https://github.com/QutBioacoustics/audio-analysis.git/info/lfs.locksverify false
  - ps: . .\build\tag.ps1 $env:ApVersion
  # prepare release strings: $env:ApReleaseMessage, $env:ApReleaseTitle
  - ps: . .\build\release.ps1 $env:ApTagName $true
  #- ps: 'ls env:'

deploy:
  - provider: GitHub
    tag: $(ApTagName)
    release: "$(ApReleaseTitle)"
    description: "$(ApReleaseMessage)"
    auth_token: $(GH_CREATE_RELEASES_TOKEN)
    artifact: DebugPackage,ReleasePackage
    prerelease: true
    on:
      # Do not create new releases unless this is the master branch
      branch: master
      # Do not create a new release unless this was a scheduled build or a forced build
      SHOULD_RELEASE: True

# scripts to run after deployment
#after_deploy:
#  # build and push our docker image
#  - ps: docker login -u="$env:DOCKER_USER" -p="$env:DOCKER_PASS"
#  - ps: . .\build\build_docker.ps1 "$env:ApVersion"


notifications:
  - provider: Email
    to:
      - '{{commitAuthorEmail}}'
    on_build_status_changed: true
    on_build_failure: true
    on_build_success: true

#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
