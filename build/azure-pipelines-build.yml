parameters:
  buildPlatform: 'Any CPU'
  platforms:
    - rid: win-x64
      pool: windows-latest
      configurations: [debug, release]
    - rid: win-arm64
      pool: windows-latest
      configurations: [release]
      unsupportedAzurePipelinesPlatform: true
    - rid: linux-x64
      pool: ubuntu-latest
      configurations: [debug, release]
    - rid: linux-musl-x64
      pool: ubuntu-latest
      configurations: [release]
      unsupportedAzurePipelinesPlatform: true
    - rid: linux-arm
      pool: ubuntu-latest
      configurations: [release]
      unsupportedAzurePipelinesPlatform: true
    - rid: linux-arm64
      pool: ubuntu-latest
      configurations: [release]
      unsupportedAzurePipelinesPlatform: true
    - rid: osx-x64
      pool: macos-latest
      configurations: [debug, release]
        
    - rid: ~ # framework dependent build
      pool: ubuntu-latest
      configurations: [release]
  # cross-product not supported
  # https://github.com/microsoft/azure-pipelines-yaml/issues/20

jobs:
  - ${{ each platform in parameters.platforms }}:
    - ${{ each configuration in platform.configurations }}:
      - job:
        displayName: Build ${{ format('{0}_{1}_{2}', coalesce(platform.rid, 'any'), platform.pool, configuration) }}
        continueOnError: ${{ coalesce(platform.unsupportedAzurePipelinesPlatform, 'false') }}
        pool:
          vmImage: ${{ platform.pool }}
        variables:
          ${{ if eq('', platform.rid) }}:
            runtimeArgument: ''
          ${{ if ne('', platform.rid) }}:
            runtimeArgument: --runtime ${{ platform.rid }}
        steps:
          # - pwsh: 'Get-ChildItem Env:'
          #   displayName: debug environment variables
          - checkout: self
            clean: false
            fetchDepth: 100
            lfs: false
            persistCredentials: true
            displayName: "Shallow cloning repo"

          - task: Cache@2
            # this won't work unless the build succeeds https://github.com/microsoft/azure-pipelines-tasks/issues/11388
            inputs:
              key: '"lfs_assets"'
              restore: |
                lfs_assets
              path: ".git/lfs/objects"
            displayName: "Cache git LFS objects"

          - pwsh: git lfs pull
            displayName: "Refresh LFS assets"

          - task: Cache@2
            inputs:
              key: nuget | "$(Agent.OS)"
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: $(NUGET_PACKAGES)
            displayName: Cache NuGet packages

          - ${{ if startsWith(platform.rid, 'linux') }}:
            - template: azure-pipelines-dependencies-linux.yml

          - pwsh: |
              $sdkVersion = (Get-Content "global.json" | ConvertFrom-Json).sdk.version
              echo "##vso[task.setvariable variable=sdkVersion]$sdkVersion"
            displayName: Get .NET SDK version from "global.json"

          # the following steps were adapted form this guide:
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops#run-your-tests
          - task: UseDotNet@2
            inputs:
              packageType: sdk
              version: $(sdkVersion)
            displayName: Lock down .NET SDK version

          - task: DotNetCoreCLI@2
            inputs:
              command: restore
              selectOrConfig: config
              nugetConfigPath: NuGet.config
            displayName: Restore solution dependencies

          - pwsh: src/git_version.ps1 -build_type ${{ configuration }}
            displayName: debug git_version.ps1 script

          - task: DotNetCoreCLI@2
            inputs:
              command: build
              versioningScheme: 'off'
              arguments: --configuration ${{ configuration }} --no-restore $(runtimeArgument)
            displayName: Build solution (${{ configuration }}, ${{ platform.rid }})

          # https://github.com/microsoft/vstest/issues/2202 -- need to remove --no-build to make tests work on linux
          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: tests/Acoustics.Test/Acoustics.Test.csproj
              publishTestResults: true
              testRunTitle: "Acoustics.Test for ${{ platform.rid }} ${{ configuration }}"
              arguments: >
                $(runtimeArgument)
                --configuration ${{ configuration }}
                --settings tests/Acoustics.Test/.runsettings
                --logger trx
                --collect:"XPlat Code Coverage"
                --
                RunConfiguration.DisableAppDomain=true
            displayName: Run Acoustics.Test

          # https://github.com/microsoft/vstest/issues/2202 -- need to remove --no-build to make tests work on linux
          - task: DotNetCoreCLI@2
            # run even if other tests failed
            condition: succeededOrFailed()
            inputs:
              command: test
              projects: tests/AED.Test/AED.Test.fsproj
              publishTestResults: true
              testRunTitle: "AED.Test for ${{ platform.rid }} ${{ configuration }}"
              arguments: >
                $(runtimeArgument)
                --configuration ${{ configuration }}
                --logger "console;verbosity=detailed"
                --logger trx
                --collect:"XPlat Code Coverage"
                --
                RunConfiguration.DisableAppDomain=true
            displayName: Run AED.Test

          - task: DotNetCoreCLI@2
            condition: succeededOrFailed()
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path . dotnet-reportgenerator-globaltool
            displayName: Install ReportGenerator tool

          - pwsh: >
              ./reportgenerator
              -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml
              -targetdir:$(Build.SourcesDirectory)/coverlet/reports
              -reporttypes:"Cobertura"
            displayName: Create reports

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml
            displayName: 'Publish code coverage'

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              projects: src/AnalysisPrograms/AnalysisPrograms.csproj
              arguments: >
                $(runtimeArgument)
                --configuration ${{ configuration }}
                --output $(Build.BinariesDirectory)
                --self-contained
              nobuild: true
              publishWebProjects: false
              zipAfterPublish: false # does not seem to tar - we need to keep unix permissions
            displayName: dotnet publish

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.BinariesDirectory)'
              includeRootFolder: false

            displayName: Archive published app

          # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ${{ if eq(configuration, 'Debug') }}:
                artifactName: ${{ coalesce(platform.rid, 'any') }}_Debug
              ${{ if ne(configuration, 'Debug') }}:
                artifactName: ${{ coalesce(platform.rid, 'any') }}
