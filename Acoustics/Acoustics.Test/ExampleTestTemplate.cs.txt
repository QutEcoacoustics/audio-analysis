// <copyright file="ExampleTestTemplate.cs" company="QutEcoacoustics">
// All code in this file and all associated files are the copyright and property of the QUT Ecoacoustics Research Group (formerly MQUTeR, and formerly QUT Bioacoustics Research Group).
// </copyright>

namespace Acoustics.Test
{
    using System;
    using System.IO;
    using System.Linq;
    using Acoustics.Shared;
    using Acoustics.Shared.Csv;
    using EcoSounds.Mvc.Tests;
    using global::AudioAnalysisTools;
    using global::AudioAnalysisTools.DSP;
    using global::AudioAnalysisTools.StandardSpectrograms;
    using global::AudioAnalysisTools.WavTools;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using TestHelpers;

    /// <summary>
    /// Test methods for the various standard Sonograms or Spectrograms
    /// Notes on TESTS: (from Anthony in email @ 05/04/2017)
    /// (1) small tests are better
    /// (2) simpler tests are better
    /// (3) use an appropriate serialisation format
    /// (4) for binary large objects(BLOBs) make sure git-lfs is tracking them
    /// See this commit for dealing with BLOBs: https://github.com/QutBioacoustics/audio-analysis/commit/55142089c8eb65d46e2f96f1d2f9a30d89b62710
    /// (5) Wherever possible, don't use test assets
    /// </summary>
    
    [TestClass]
    [Ignore] // TODO:!!!! DELETE OR COMMENT THIS LINE. It is only used while constructing the test.
    public class FooTests // <------- choose a good name!
    {
        private DirectoryInfo outputDirectory;

        public FooTests()
        {
            // setup logic here
        }

        [TestInitialize]
        public void Setup()
        {
            this.outputDirectory = PathHelper.GetTempDir();
        }

        [TestCleanup]
        public void Cleanup()
        {
            PathHelper.DeleteTempDir(this.outputDirectory);
        }

        [TestMethod]
        public void TestFooDoesThis() // <------- choose a good name!
        {
            // following lines show how to access resources and files.
            string fileName = "NAME.ext";
            var file = PathHelper.ResolveAsset("FrequencyScale\\" + fileName);
            
            var outputDir = this.outputDirectory;
            var outputImagePath = Path.Combine(outputDir.FullName, "imagefile.png");

            var testConfig = PathHelper.ResolveConfigFile("TestConfig.yml");
            var config = Yaml.Deserialise<LdSpectrogramConfig>(testConfig);

            // output initial data
            var actualData = new[] { 1, 2, 3 };
            //Json.Serialise("data.json".ToFileInfo(), actualData);
            //Csv.WriteMatrixToCsv("data.csv".ToFileInfo(), actualData);
            //Binary.Serialize("data.bin".ToFileInfo(), actualData);            

            // Example: modifying a default config file.
            // get the default config file
            var defaultConfigFile = PathHelper.ResolveConfigFilePath("SpectrogramFalseColourConfig.yml");
            var config = Yaml.Deserialise<LdSpectrogramConfig>(defaultConfigFile);

            // now make changes to config file as required for test
            var testConfig = new FileInfo(this.outputDirectory + "\\SpectrogramFalseColourConfig.yml");
            Yaml.Serialise(testConfig, config);
            
            Assert.AreEqual(0, 0);
            Assert.AreEqual(0.1, 0.1, double.Epsilon);
            Assert.IsTrue(file.Exists);

            CollectionAssert.AreEqual(new[] { 1, 2, 3 }, new[] { 1, 2, 3 });
            CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, new[] { 3, 2, 1 });

            FileEqualityHelpers.TextFileEqual(new FileInfo("data.txt"), new FileInfo("data.txt"));
            FileEqualityHelpers.FileEqual(new FileInfo("data.bin"), new FileInfo("data.bin"));

            ImageAssert.IsSize(722, 632, actualImage);
            ImageAssert.PixelIsColor(new Point(100, 100), Color.FromArgb(211, 211, 211), actualImage);

        }
        
        [DataTestMethod]
        [DataRow(8.2,8000,"a string")]
        public void MethodToTestDataSet(double value1, int value2, string value3)
        {
            // Process the data values.
            // do tests that validate data processing
        }
    }
}
