//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebsiteTests.OldService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://mquter.qut.edu.au/sensors/", ConfigurationName="OldService.ServiceSoap")]
    public interface ServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/TestConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        bool TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/TestConnection", ReplyAction="*")]
        System.IAsyncResult BeginTestConnection(System.AsyncCallback callback, object asyncState);
        
        bool EndTestConnection(System.IAsyncResult result);
        
        // CODEGEN: Parameter 'readingGuid' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/AddPhotoReading", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        WebsiteTests.OldService.AddPhotoReadingResponse AddPhotoReading(WebsiteTests.OldService.AddPhotoReadingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/AddPhotoReading", ReplyAction="*")]
        System.IAsyncResult BeginAddPhotoReading(WebsiteTests.OldService.AddPhotoReadingRequest request, System.AsyncCallback callback, object asyncState);
        
        WebsiteTests.OldService.AddPhotoReadingResponse EndAddPhotoReading(System.IAsyncResult result);
        
        // CODEGEN: Parameter 'readingGuid' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/AddPhotoReadingWithType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        WebsiteTests.OldService.AddPhotoReadingWithTypeResponse AddPhotoReadingWithType(WebsiteTests.OldService.AddPhotoReadingWithTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/AddPhotoReadingWithType", ReplyAction="*")]
        System.IAsyncResult BeginAddPhotoReadingWithType(WebsiteTests.OldService.AddPhotoReadingWithTypeRequest request, System.AsyncCallback callback, object asyncState);
        
        WebsiteTests.OldService.AddPhotoReadingWithTypeResponse EndAddPhotoReadingWithType(System.IAsyncResult result);
        
        // CODEGEN: Parameter 'readingGuid' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/AddAudioReading", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        WebsiteTests.OldService.AddAudioReadingResponse AddAudioReading(WebsiteTests.OldService.AddAudioReadingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/AddAudioReading", ReplyAction="*")]
        System.IAsyncResult BeginAddAudioReading(WebsiteTests.OldService.AddAudioReadingRequest request, System.AsyncCallback callback, object asyncState);
        
        WebsiteTests.OldService.AddAudioReadingResponse EndAddAudioReading(System.IAsyncResult result);
        
        // CODEGEN: Parameter 'readingGuid' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/AddAudioReadingWithType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        WebsiteTests.OldService.AddAudioReadingWithTypeResponse AddAudioReadingWithType(WebsiteTests.OldService.AddAudioReadingWithTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/AddAudioReadingWithType", ReplyAction="*")]
        System.IAsyncResult BeginAddAudioReadingWithType(WebsiteTests.OldService.AddAudioReadingWithTypeRequest request, System.AsyncCallback callback, object asyncState);
        
        WebsiteTests.OldService.AddAudioReadingWithTypeResponse EndAddAudioReadingWithType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/GetLatestDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActiveRecordHooksBase))]
        WebsiteTests.OldService.Deployment GetLatestDeployment(string sensorID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/GetLatestDeployment", ReplyAction="*")]
        System.IAsyncResult BeginGetLatestDeployment(string sensorID, System.AsyncCallback callback, object asyncState);
        
        WebsiteTests.OldService.Deployment EndGetLatestDeployment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mquter.qut.edu.au/sensors/StartDeployment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ActiveRecordHooksBase))]
        WebsiteTests.OldService.Deployment StartDeployment(string sensorID, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://mquter.qut.edu.au/sensors/StartDeployment", ReplyAction="*")]
        System.IAsyncResult BeginStartDeployment(string sensorID, string name, System.AsyncCallback callback, object asyncState);
        
        WebsiteTests.OldService.Deployment EndStartDeployment(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddPhotoReading", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddPhotoReadingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public System.Guid deploymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> readingGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=2)]
        public System.DateTime time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] buffer;
        
        public AddPhotoReadingRequest() {
        }
        
        public AddPhotoReadingRequest(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer) {
            this.deploymentID = deploymentID;
            this.readingGuid = readingGuid;
            this.time = time;
            this.buffer = buffer;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddPhotoReadingResponse", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddPhotoReadingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public bool AddPhotoReadingResult;
        
        public AddPhotoReadingResponse() {
        }
        
        public AddPhotoReadingResponse(bool AddPhotoReadingResult) {
            this.AddPhotoReadingResult = AddPhotoReadingResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddPhotoReadingWithType", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddPhotoReadingWithTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public System.Guid deploymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> readingGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=2)]
        public System.DateTime time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] buffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=4)]
        public string mimeType;
        
        public AddPhotoReadingWithTypeRequest() {
        }
        
        public AddPhotoReadingWithTypeRequest(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType) {
            this.deploymentID = deploymentID;
            this.readingGuid = readingGuid;
            this.time = time;
            this.buffer = buffer;
            this.mimeType = mimeType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddPhotoReadingWithTypeResponse", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddPhotoReadingWithTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public bool AddPhotoReadingWithTypeResult;
        
        public AddPhotoReadingWithTypeResponse() {
        }
        
        public AddPhotoReadingWithTypeResponse(bool AddPhotoReadingWithTypeResult) {
            this.AddPhotoReadingWithTypeResult = AddPhotoReadingWithTypeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddAudioReading", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddAudioReadingRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public System.Guid deploymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> readingGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=2)]
        public System.DateTime time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] buffer;
        
        public AddAudioReadingRequest() {
        }
        
        public AddAudioReadingRequest(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer) {
            this.deploymentID = deploymentID;
            this.readingGuid = readingGuid;
            this.time = time;
            this.buffer = buffer;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddAudioReadingResponse", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddAudioReadingResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public bool AddAudioReadingResult;
        
        public AddAudioReadingResponse() {
        }
        
        public AddAudioReadingResponse(bool AddAudioReadingResult) {
            this.AddAudioReadingResult = AddAudioReadingResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddAudioReadingWithType", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddAudioReadingWithTypeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public System.Guid deploymentID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> readingGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=2)]
        public System.DateTime time;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] buffer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=4)]
        public string mimeType;
        
        public AddAudioReadingWithTypeRequest() {
        }
        
        public AddAudioReadingWithTypeRequest(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType) {
            this.deploymentID = deploymentID;
            this.readingGuid = readingGuid;
            this.time = time;
            this.buffer = buffer;
            this.mimeType = mimeType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddAudioReadingWithTypeResponse", WrapperNamespace="http://mquter.qut.edu.au/sensors/", IsWrapped=true)]
    public partial class AddAudioReadingWithTypeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://mquter.qut.edu.au/sensors/", Order=0)]
        public bool AddAudioReadingWithTypeResult;
        
        public AddAudioReadingWithTypeResponse() {
        }
        
        public AddAudioReadingWithTypeResponse(bool AddAudioReadingWithTypeResult) {
            this.AddAudioReadingWithTypeResult = AddAudioReadingWithTypeResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mquter.qut.edu.au/sensors/")]
    public partial class Deployment : ActiveRecordBaseOfDeployment {
        
        private System.Guid deploymentIDField;
        
        private Hardware hardwareField;
        
        private string nameField;
        
        private System.DateTime dateStartedField;
        
        private string descriptionField;
        
        private string longitudeField;
        
        private string latitudeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.Guid DeploymentID {
            get {
                return this.deploymentIDField;
            }
            set {
                this.deploymentIDField = value;
                this.RaisePropertyChanged("DeploymentID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Hardware Hardware {
            get {
                return this.hardwareField;
            }
            set {
                this.hardwareField = value;
                this.RaisePropertyChanged("Hardware");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime DateStarted {
            get {
                return this.dateStartedField;
            }
            set {
                this.dateStartedField = value;
                this.RaisePropertyChanged("DateStarted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
                this.RaisePropertyChanged("Longitude");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
                this.RaisePropertyChanged("Latitude");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mquter.qut.edu.au/sensors/")]
    public partial class Hardware : ActiveRecordBaseOfHardware {
        
        private int hardwareIDField;
        
        private string uniqueIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int HardwareID {
            get {
                return this.hardwareIDField;
            }
            set {
                this.hardwareIDField = value;
                this.RaisePropertyChanged("HardwareID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UniqueID {
            get {
                return this.uniqueIDField;
            }
            set {
                this.uniqueIDField = value;
                this.RaisePropertyChanged("UniqueID");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Hardware))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mquter.qut.edu.au/sensors/")]
    public abstract partial class ActiveRecordBaseOfHardware : ActiveRecordBase {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActiveRecordBaseOfHardware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Hardware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActiveRecordBaseOfDeployment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Deployment))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mquter.qut.edu.au/sensors/")]
    public abstract partial class ActiveRecordBase : ActiveRecordHooksBase {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActiveRecordBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActiveRecordBaseOfHardware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Hardware))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActiveRecordBaseOfDeployment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Deployment))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mquter.qut.edu.au/sensors/")]
    public abstract partial class ActiveRecordHooksBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Deployment))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://mquter.qut.edu.au/sensors/")]
    public abstract partial class ActiveRecordBaseOfDeployment : ActiveRecordBase {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ServiceSoapChannel : WebsiteTests.OldService.ServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AddPhotoReadingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddPhotoReadingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AddPhotoReadingWithTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddPhotoReadingWithTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AddAudioReadingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAudioReadingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AddAudioReadingWithTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAudioReadingWithTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetLatestDeploymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestDeploymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebsiteTests.OldService.Deployment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebsiteTests.OldService.Deployment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class StartDeploymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartDeploymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebsiteTests.OldService.Deployment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebsiteTests.OldService.Deployment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<WebsiteTests.OldService.ServiceSoap>, WebsiteTests.OldService.ServiceSoap {
        
        private BeginOperationDelegate onBeginTestConnectionDelegate;
        
        private EndOperationDelegate onEndTestConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onTestConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPhotoReadingDelegate;
        
        private EndOperationDelegate onEndAddPhotoReadingDelegate;
        
        private System.Threading.SendOrPostCallback onAddPhotoReadingCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPhotoReadingWithTypeDelegate;
        
        private EndOperationDelegate onEndAddPhotoReadingWithTypeDelegate;
        
        private System.Threading.SendOrPostCallback onAddPhotoReadingWithTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAudioReadingDelegate;
        
        private EndOperationDelegate onEndAddAudioReadingDelegate;
        
        private System.Threading.SendOrPostCallback onAddAudioReadingCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAudioReadingWithTypeDelegate;
        
        private EndOperationDelegate onEndAddAudioReadingWithTypeDelegate;
        
        private System.Threading.SendOrPostCallback onAddAudioReadingWithTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestDeploymentDelegate;
        
        private EndOperationDelegate onEndGetLatestDeploymentDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestDeploymentCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartDeploymentDelegate;
        
        private EndOperationDelegate onEndStartDeploymentDelegate;
        
        private System.Threading.SendOrPostCallback onStartDeploymentCompletedDelegate;
        
        public ServiceSoapClient() {
        }
        
        public ServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<TestConnectionCompletedEventArgs> TestConnectionCompleted;
        
        public event System.EventHandler<AddPhotoReadingCompletedEventArgs> AddPhotoReadingCompleted;
        
        public event System.EventHandler<AddPhotoReadingWithTypeCompletedEventArgs> AddPhotoReadingWithTypeCompleted;
        
        public event System.EventHandler<AddAudioReadingCompletedEventArgs> AddAudioReadingCompleted;
        
        public event System.EventHandler<AddAudioReadingWithTypeCompletedEventArgs> AddAudioReadingWithTypeCompleted;
        
        public event System.EventHandler<GetLatestDeploymentCompletedEventArgs> GetLatestDeploymentCompleted;
        
        public event System.EventHandler<StartDeploymentCompletedEventArgs> StartDeploymentCompleted;
        
        public bool TestConnection() {
            return base.Channel.TestConnection();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestConnection(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestConnection(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndTestConnection(System.IAsyncResult result) {
            return base.Channel.EndTestConnection(result);
        }
        
        private System.IAsyncResult OnBeginTestConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestConnection(callback, asyncState);
        }
        
        private object[] OnEndTestConnection(System.IAsyncResult result) {
            bool retVal = this.EndTestConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestConnectionCompleted(object state) {
            if ((this.TestConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestConnectionAsync() {
            this.TestConnectionAsync(null);
        }
        
        public void TestConnectionAsync(object userState) {
            if ((this.onBeginTestConnectionDelegate == null)) {
                this.onBeginTestConnectionDelegate = new BeginOperationDelegate(this.OnBeginTestConnection);
            }
            if ((this.onEndTestConnectionDelegate == null)) {
                this.onEndTestConnectionDelegate = new EndOperationDelegate(this.OnEndTestConnection);
            }
            if ((this.onTestConnectionCompletedDelegate == null)) {
                this.onTestConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginTestConnectionDelegate, null, this.onEndTestConnectionDelegate, this.onTestConnectionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddPhotoReadingResponse WebsiteTests.OldService.ServiceSoap.AddPhotoReading(WebsiteTests.OldService.AddPhotoReadingRequest request) {
            return base.Channel.AddPhotoReading(request);
        }
        
        public bool AddPhotoReading(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer) {
            WebsiteTests.OldService.AddPhotoReadingRequest inValue = new WebsiteTests.OldService.AddPhotoReadingRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            WebsiteTests.OldService.AddPhotoReadingResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).AddPhotoReading(inValue);
            return retVal.AddPhotoReadingResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebsiteTests.OldService.ServiceSoap.BeginAddPhotoReading(WebsiteTests.OldService.AddPhotoReadingRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPhotoReading(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddPhotoReading(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, System.AsyncCallback callback, object asyncState) {
            WebsiteTests.OldService.AddPhotoReadingRequest inValue = new WebsiteTests.OldService.AddPhotoReadingRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            return ((WebsiteTests.OldService.ServiceSoap)(this)).BeginAddPhotoReading(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddPhotoReadingResponse WebsiteTests.OldService.ServiceSoap.EndAddPhotoReading(System.IAsyncResult result) {
            return base.Channel.EndAddPhotoReading(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddPhotoReading(System.IAsyncResult result) {
            WebsiteTests.OldService.AddPhotoReadingResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).EndAddPhotoReading(result);
            return retVal.AddPhotoReadingResult;
        }
        
        private System.IAsyncResult OnBeginAddPhotoReading(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid deploymentID = ((System.Guid)(inValues[0]));
            System.Nullable<System.Guid> readingGuid = ((System.Nullable<System.Guid>)(inValues[1]));
            System.DateTime time = ((System.DateTime)(inValues[2]));
            byte[] buffer = ((byte[])(inValues[3]));
            return this.BeginAddPhotoReading(deploymentID, readingGuid, time, buffer, callback, asyncState);
        }
        
        private object[] OnEndAddPhotoReading(System.IAsyncResult result) {
            bool retVal = this.EndAddPhotoReading(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddPhotoReadingCompleted(object state) {
            if ((this.AddPhotoReadingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPhotoReadingCompleted(this, new AddPhotoReadingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPhotoReadingAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer) {
            this.AddPhotoReadingAsync(deploymentID, readingGuid, time, buffer, null);
        }
        
        public void AddPhotoReadingAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, object userState) {
            if ((this.onBeginAddPhotoReadingDelegate == null)) {
                this.onBeginAddPhotoReadingDelegate = new BeginOperationDelegate(this.OnBeginAddPhotoReading);
            }
            if ((this.onEndAddPhotoReadingDelegate == null)) {
                this.onEndAddPhotoReadingDelegate = new EndOperationDelegate(this.OnEndAddPhotoReading);
            }
            if ((this.onAddPhotoReadingCompletedDelegate == null)) {
                this.onAddPhotoReadingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPhotoReadingCompleted);
            }
            base.InvokeAsync(this.onBeginAddPhotoReadingDelegate, new object[] {
                        deploymentID,
                        readingGuid,
                        time,
                        buffer}, this.onEndAddPhotoReadingDelegate, this.onAddPhotoReadingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddPhotoReadingWithTypeResponse WebsiteTests.OldService.ServiceSoap.AddPhotoReadingWithType(WebsiteTests.OldService.AddPhotoReadingWithTypeRequest request) {
            return base.Channel.AddPhotoReadingWithType(request);
        }
        
        public bool AddPhotoReadingWithType(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType) {
            WebsiteTests.OldService.AddPhotoReadingWithTypeRequest inValue = new WebsiteTests.OldService.AddPhotoReadingWithTypeRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            inValue.mimeType = mimeType;
            WebsiteTests.OldService.AddPhotoReadingWithTypeResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).AddPhotoReadingWithType(inValue);
            return retVal.AddPhotoReadingWithTypeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebsiteTests.OldService.ServiceSoap.BeginAddPhotoReadingWithType(WebsiteTests.OldService.AddPhotoReadingWithTypeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPhotoReadingWithType(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddPhotoReadingWithType(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType, System.AsyncCallback callback, object asyncState) {
            WebsiteTests.OldService.AddPhotoReadingWithTypeRequest inValue = new WebsiteTests.OldService.AddPhotoReadingWithTypeRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            inValue.mimeType = mimeType;
            return ((WebsiteTests.OldService.ServiceSoap)(this)).BeginAddPhotoReadingWithType(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddPhotoReadingWithTypeResponse WebsiteTests.OldService.ServiceSoap.EndAddPhotoReadingWithType(System.IAsyncResult result) {
            return base.Channel.EndAddPhotoReadingWithType(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddPhotoReadingWithType(System.IAsyncResult result) {
            WebsiteTests.OldService.AddPhotoReadingWithTypeResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).EndAddPhotoReadingWithType(result);
            return retVal.AddPhotoReadingWithTypeResult;
        }
        
        private System.IAsyncResult OnBeginAddPhotoReadingWithType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid deploymentID = ((System.Guid)(inValues[0]));
            System.Nullable<System.Guid> readingGuid = ((System.Nullable<System.Guid>)(inValues[1]));
            System.DateTime time = ((System.DateTime)(inValues[2]));
            byte[] buffer = ((byte[])(inValues[3]));
            string mimeType = ((string)(inValues[4]));
            return this.BeginAddPhotoReadingWithType(deploymentID, readingGuid, time, buffer, mimeType, callback, asyncState);
        }
        
        private object[] OnEndAddPhotoReadingWithType(System.IAsyncResult result) {
            bool retVal = this.EndAddPhotoReadingWithType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddPhotoReadingWithTypeCompleted(object state) {
            if ((this.AddPhotoReadingWithTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPhotoReadingWithTypeCompleted(this, new AddPhotoReadingWithTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPhotoReadingWithTypeAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType) {
            this.AddPhotoReadingWithTypeAsync(deploymentID, readingGuid, time, buffer, mimeType, null);
        }
        
        public void AddPhotoReadingWithTypeAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType, object userState) {
            if ((this.onBeginAddPhotoReadingWithTypeDelegate == null)) {
                this.onBeginAddPhotoReadingWithTypeDelegate = new BeginOperationDelegate(this.OnBeginAddPhotoReadingWithType);
            }
            if ((this.onEndAddPhotoReadingWithTypeDelegate == null)) {
                this.onEndAddPhotoReadingWithTypeDelegate = new EndOperationDelegate(this.OnEndAddPhotoReadingWithType);
            }
            if ((this.onAddPhotoReadingWithTypeCompletedDelegate == null)) {
                this.onAddPhotoReadingWithTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPhotoReadingWithTypeCompleted);
            }
            base.InvokeAsync(this.onBeginAddPhotoReadingWithTypeDelegate, new object[] {
                        deploymentID,
                        readingGuid,
                        time,
                        buffer,
                        mimeType}, this.onEndAddPhotoReadingWithTypeDelegate, this.onAddPhotoReadingWithTypeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddAudioReadingResponse WebsiteTests.OldService.ServiceSoap.AddAudioReading(WebsiteTests.OldService.AddAudioReadingRequest request) {
            return base.Channel.AddAudioReading(request);
        }
        
        public bool AddAudioReading(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer) {
            WebsiteTests.OldService.AddAudioReadingRequest inValue = new WebsiteTests.OldService.AddAudioReadingRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            WebsiteTests.OldService.AddAudioReadingResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).AddAudioReading(inValue);
            return retVal.AddAudioReadingResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebsiteTests.OldService.ServiceSoap.BeginAddAudioReading(WebsiteTests.OldService.AddAudioReadingRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAudioReading(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAudioReading(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, System.AsyncCallback callback, object asyncState) {
            WebsiteTests.OldService.AddAudioReadingRequest inValue = new WebsiteTests.OldService.AddAudioReadingRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            return ((WebsiteTests.OldService.ServiceSoap)(this)).BeginAddAudioReading(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddAudioReadingResponse WebsiteTests.OldService.ServiceSoap.EndAddAudioReading(System.IAsyncResult result) {
            return base.Channel.EndAddAudioReading(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddAudioReading(System.IAsyncResult result) {
            WebsiteTests.OldService.AddAudioReadingResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).EndAddAudioReading(result);
            return retVal.AddAudioReadingResult;
        }
        
        private System.IAsyncResult OnBeginAddAudioReading(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid deploymentID = ((System.Guid)(inValues[0]));
            System.Nullable<System.Guid> readingGuid = ((System.Nullable<System.Guid>)(inValues[1]));
            System.DateTime time = ((System.DateTime)(inValues[2]));
            byte[] buffer = ((byte[])(inValues[3]));
            return this.BeginAddAudioReading(deploymentID, readingGuid, time, buffer, callback, asyncState);
        }
        
        private object[] OnEndAddAudioReading(System.IAsyncResult result) {
            bool retVal = this.EndAddAudioReading(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAudioReadingCompleted(object state) {
            if ((this.AddAudioReadingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAudioReadingCompleted(this, new AddAudioReadingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAudioReadingAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer) {
            this.AddAudioReadingAsync(deploymentID, readingGuid, time, buffer, null);
        }
        
        public void AddAudioReadingAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, object userState) {
            if ((this.onBeginAddAudioReadingDelegate == null)) {
                this.onBeginAddAudioReadingDelegate = new BeginOperationDelegate(this.OnBeginAddAudioReading);
            }
            if ((this.onEndAddAudioReadingDelegate == null)) {
                this.onEndAddAudioReadingDelegate = new EndOperationDelegate(this.OnEndAddAudioReading);
            }
            if ((this.onAddAudioReadingCompletedDelegate == null)) {
                this.onAddAudioReadingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAudioReadingCompleted);
            }
            base.InvokeAsync(this.onBeginAddAudioReadingDelegate, new object[] {
                        deploymentID,
                        readingGuid,
                        time,
                        buffer}, this.onEndAddAudioReadingDelegate, this.onAddAudioReadingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddAudioReadingWithTypeResponse WebsiteTests.OldService.ServiceSoap.AddAudioReadingWithType(WebsiteTests.OldService.AddAudioReadingWithTypeRequest request) {
            return base.Channel.AddAudioReadingWithType(request);
        }
        
        public bool AddAudioReadingWithType(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType) {
            WebsiteTests.OldService.AddAudioReadingWithTypeRequest inValue = new WebsiteTests.OldService.AddAudioReadingWithTypeRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            inValue.mimeType = mimeType;
            WebsiteTests.OldService.AddAudioReadingWithTypeResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).AddAudioReadingWithType(inValue);
            return retVal.AddAudioReadingWithTypeResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WebsiteTests.OldService.ServiceSoap.BeginAddAudioReadingWithType(WebsiteTests.OldService.AddAudioReadingWithTypeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAudioReadingWithType(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAudioReadingWithType(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType, System.AsyncCallback callback, object asyncState) {
            WebsiteTests.OldService.AddAudioReadingWithTypeRequest inValue = new WebsiteTests.OldService.AddAudioReadingWithTypeRequest();
            inValue.deploymentID = deploymentID;
            inValue.readingGuid = readingGuid;
            inValue.time = time;
            inValue.buffer = buffer;
            inValue.mimeType = mimeType;
            return ((WebsiteTests.OldService.ServiceSoap)(this)).BeginAddAudioReadingWithType(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebsiteTests.OldService.AddAudioReadingWithTypeResponse WebsiteTests.OldService.ServiceSoap.EndAddAudioReadingWithType(System.IAsyncResult result) {
            return base.Channel.EndAddAudioReadingWithType(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddAudioReadingWithType(System.IAsyncResult result) {
            WebsiteTests.OldService.AddAudioReadingWithTypeResponse retVal = ((WebsiteTests.OldService.ServiceSoap)(this)).EndAddAudioReadingWithType(result);
            return retVal.AddAudioReadingWithTypeResult;
        }
        
        private System.IAsyncResult OnBeginAddAudioReadingWithType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid deploymentID = ((System.Guid)(inValues[0]));
            System.Nullable<System.Guid> readingGuid = ((System.Nullable<System.Guid>)(inValues[1]));
            System.DateTime time = ((System.DateTime)(inValues[2]));
            byte[] buffer = ((byte[])(inValues[3]));
            string mimeType = ((string)(inValues[4]));
            return this.BeginAddAudioReadingWithType(deploymentID, readingGuid, time, buffer, mimeType, callback, asyncState);
        }
        
        private object[] OnEndAddAudioReadingWithType(System.IAsyncResult result) {
            bool retVal = this.EndAddAudioReadingWithType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAudioReadingWithTypeCompleted(object state) {
            if ((this.AddAudioReadingWithTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAudioReadingWithTypeCompleted(this, new AddAudioReadingWithTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAudioReadingWithTypeAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType) {
            this.AddAudioReadingWithTypeAsync(deploymentID, readingGuid, time, buffer, mimeType, null);
        }
        
        public void AddAudioReadingWithTypeAsync(System.Guid deploymentID, System.Nullable<System.Guid> readingGuid, System.DateTime time, byte[] buffer, string mimeType, object userState) {
            if ((this.onBeginAddAudioReadingWithTypeDelegate == null)) {
                this.onBeginAddAudioReadingWithTypeDelegate = new BeginOperationDelegate(this.OnBeginAddAudioReadingWithType);
            }
            if ((this.onEndAddAudioReadingWithTypeDelegate == null)) {
                this.onEndAddAudioReadingWithTypeDelegate = new EndOperationDelegate(this.OnEndAddAudioReadingWithType);
            }
            if ((this.onAddAudioReadingWithTypeCompletedDelegate == null)) {
                this.onAddAudioReadingWithTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAudioReadingWithTypeCompleted);
            }
            base.InvokeAsync(this.onBeginAddAudioReadingWithTypeDelegate, new object[] {
                        deploymentID,
                        readingGuid,
                        time,
                        buffer,
                        mimeType}, this.onEndAddAudioReadingWithTypeDelegate, this.onAddAudioReadingWithTypeCompletedDelegate, userState);
        }
        
        public WebsiteTests.OldService.Deployment GetLatestDeployment(string sensorID) {
            return base.Channel.GetLatestDeployment(sensorID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLatestDeployment(string sensorID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestDeployment(sensorID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WebsiteTests.OldService.Deployment EndGetLatestDeployment(System.IAsyncResult result) {
            return base.Channel.EndGetLatestDeployment(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestDeployment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sensorID = ((string)(inValues[0]));
            return this.BeginGetLatestDeployment(sensorID, callback, asyncState);
        }
        
        private object[] OnEndGetLatestDeployment(System.IAsyncResult result) {
            WebsiteTests.OldService.Deployment retVal = this.EndGetLatestDeployment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestDeploymentCompleted(object state) {
            if ((this.GetLatestDeploymentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestDeploymentCompleted(this, new GetLatestDeploymentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestDeploymentAsync(string sensorID) {
            this.GetLatestDeploymentAsync(sensorID, null);
        }
        
        public void GetLatestDeploymentAsync(string sensorID, object userState) {
            if ((this.onBeginGetLatestDeploymentDelegate == null)) {
                this.onBeginGetLatestDeploymentDelegate = new BeginOperationDelegate(this.OnBeginGetLatestDeployment);
            }
            if ((this.onEndGetLatestDeploymentDelegate == null)) {
                this.onEndGetLatestDeploymentDelegate = new EndOperationDelegate(this.OnEndGetLatestDeployment);
            }
            if ((this.onGetLatestDeploymentCompletedDelegate == null)) {
                this.onGetLatestDeploymentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestDeploymentCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestDeploymentDelegate, new object[] {
                        sensorID}, this.onEndGetLatestDeploymentDelegate, this.onGetLatestDeploymentCompletedDelegate, userState);
        }
        
        public WebsiteTests.OldService.Deployment StartDeployment(string sensorID, string name) {
            return base.Channel.StartDeployment(sensorID, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStartDeployment(string sensorID, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartDeployment(sensorID, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public WebsiteTests.OldService.Deployment EndStartDeployment(System.IAsyncResult result) {
            return base.Channel.EndStartDeployment(result);
        }
        
        private System.IAsyncResult OnBeginStartDeployment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sensorID = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginStartDeployment(sensorID, name, callback, asyncState);
        }
        
        private object[] OnEndStartDeployment(System.IAsyncResult result) {
            WebsiteTests.OldService.Deployment retVal = this.EndStartDeployment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartDeploymentCompleted(object state) {
            if ((this.StartDeploymentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartDeploymentCompleted(this, new StartDeploymentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartDeploymentAsync(string sensorID, string name) {
            this.StartDeploymentAsync(sensorID, name, null);
        }
        
        public void StartDeploymentAsync(string sensorID, string name, object userState) {
            if ((this.onBeginStartDeploymentDelegate == null)) {
                this.onBeginStartDeploymentDelegate = new BeginOperationDelegate(this.OnBeginStartDeployment);
            }
            if ((this.onEndStartDeploymentDelegate == null)) {
                this.onEndStartDeploymentDelegate = new EndOperationDelegate(this.OnEndStartDeployment);
            }
            if ((this.onStartDeploymentCompletedDelegate == null)) {
                this.onStartDeploymentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartDeploymentCompleted);
            }
            base.InvokeAsync(this.onBeginStartDeploymentDelegate, new object[] {
                        sensorID,
                        name}, this.onEndStartDeploymentDelegate, this.onStartDeploymentCompletedDelegate, userState);
        }
    }
}
