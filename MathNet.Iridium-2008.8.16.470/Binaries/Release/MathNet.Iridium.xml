<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Iridium</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.Collection">
            <summary>
            The class <c>Collection</c> contains several utilities performing
            some basic collection operations (like union, intersection...).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Collection.#ctor">
            <summary>
            Preventing the instantiation of the <see cref="T:MathNet.Numerics.Collection"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Collection.Concat(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the concatenation from
            <c>c1</c> and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>The call is performed in <c>O(1)</c> computational time, the
            concatenated collection is not built explicitly.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Collection.Inter(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the mathematical intersection
            of <c>c1</c> and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>
            <p>The call is performed in <c>O(c1.Count+c2.Count)</c> and
            the intersection is built explicitly.</p>
            <p>The resulting collection will not contain several identical elements.</p>
            <p>Example: Inter({1;1;2;3},{0;1;1;3;4}) = {1;3}.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Collection.Minus(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the subtraction of
            the items of <c>c2</c> to the collection <c>c1</c>. 
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>The call is performed in <c>O(c1.Count+c2.Count)</c></remarks>
        </member>
        <member name="M:MathNet.Numerics.Collection.Product(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns the cartesian product of the two collections <c>c1</c>
            and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
        </member>
        <member name="M:MathNet.Numerics.Collection.Union(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Returns a collection resulting from the union of the items
            of <c>c1</c> and <c>c2</c>.
            </summary>
            <param name="c1">Should not be null.</param>
            <param name="c2">Should not be null.</param>
            <remarks>
            <p>The call is performed in <c>O(c1.Count+c2.Count)</c>
            computational time.</p>
            <p>The resulting collection will not contain several identical elements.</p>
            <p>Example: Union({1;1;3},{0;1;2;3}) = {0;1;2;3}</p>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Collection.ConcatCollection">
            <summary>
            The class <c>ConcatCollection</c> is used to perform the 
            mathematical concatenation between two collections.
            </summary>
            <seealso cref="M:MathNet.Numerics.Collection.Concat(System.Collections.ICollection,System.Collections.ICollection)"/>
        </member>
        <member name="T:MathNet.Numerics.Collection.InterCollection">
            <summary>
            The class <c>InterCollection</c> is used to perform the
            mathematical intersection between two collections.
            </summary>
            <seealso cref="M:MathNet.Numerics.Collection.Inter(System.Collections.ICollection,System.Collections.ICollection)"/>
        </member>
        <member name="T:MathNet.Numerics.Collection.UnionCollection">
            <summary>
            The class <c>UnionCollection</c> is used to perform the
            mathematical union between two collections.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Collection.MinusCollection">
            <summary>
            The collection <c>MinusCollection</c> is used to perform
            the mathematical subtraction of two collections.
            </summary>
            <seealso cref="M:MathNet.Numerics.Collection.Minus(System.Collections.ICollection,System.Collections.ICollection)"/>
        </member>
        <member name="T:MathNet.Numerics.Combinatorics">
            <summary>
            Static DoublePrecision Combinatorics Helper Class
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Variations(System.Int32,System.Int32)">
            <summary>
            Computes the number of variations without repetition. When the order matters and each object can be chosen only once.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.VariationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Computes the number of variations with repetition. When the order matters and an object can be chosen more than once.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Combinations(System.Int32,System.Int32)">
            <summary>
            Computes the number of combinations without repetition. When the order does not matter and each object can be chosen only once.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.CombinationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Computes the number of combinations with repetition. When the order does not matter and an object can be chosen more than once.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Permutations(System.Int32)">
            <summary>
            Computes the number of permutations (without repetition). 
            </summary>
            <param name="n">Number of (distinguishable) elements in the set.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomPermutation(System.Int32)">
            <summary>Randomly shuffles the numbers 0 to N-1.</summary>
            <returns>An array of length <c>N</c> that contains (in any order) the integers of the interval <c>[0, N)</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomCombination(System.Int32)">
            <summary>Randomly selects some of N elements without order and repetition.</summary>
            <returns>boolean array of length <c>N</c>, for each item true if it is selected.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomCombination(System.Int32,System.Int32)">
            <summary>Randomly selects k of n elements without order and repetition.</summary>
            <returns>boolean array of length <c>N</c>, for each item true if it is selected.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomCombinationWithRepetition(System.Int32,System.Int32)">
            <summary>Randomly selects k of n elements with repetition but without order.</summary>
            <returns>integer array of length <c>N</c>, for each item the number of times it was selected.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomVariation(System.Int32,System.Int32)">
            <summary>Randomly selects k of n elements with order but without repetition.</summary>
            <returns>An array of length <c>K</c> that contains the indices of the selections as integers of the interval <c>[0, N)</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomVariationWithRepetition(System.Int32,System.Int32)">
            <summary>Randomly selects k of n elements with order and repetition.</summary>
            <returns>An array of length <c>K</c> that contains the indices of the selections as integers of the interval <c>[0, N)</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomShuffle``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Randomly permutes <c>array</c> to <c>target</c>.
            Both arrays should have the same size but can not be the same instance.
            </summary>
            <remarks>
            Shuffling an array is equivalent to generating a
            random permutation and applying this permutation to the array.
            </remarks>
            <param name="source">The data list to shuffle.</param>
            <param name="target">The resulting shuffled output data list.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomShuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly shuffles <c>array</c>.
            </summary>
            <remarks>
            Shuffling an array is equivalent to generating a
            random permutation and applying this permutation to the array.
            </remarks>
            <param name="array">The data list to shuffle.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomSubsetVariation``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomly returns a subset of size <c>numberToSelect</c> of <c>array</c>
            in random order without repetition.
            </summary>
            <param name="array">The data list to choose from.</param>
            <param name="numberToSelect">The size of the subset. Must be smaller or equal to the array length.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomSubsetVariationWithRepetition``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomly returns a subset of size <c>numberToSelect</c> of <c>array</c>
            in random order with repetition.
            </summary>
            <param name="array">The data list to choose from.</param>
            <param name="numberToSelect">The size of the subset. Must be smaller or equal to the array length.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomSubsetCombination``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomly returns a subset of size <c>numberToSelect</c> of <c>array</c>
            in preserved order without repetition.
            </summary>
            <param name="array">The data list to choose from.</param>
            <param name="numberToSelect">The size of the subset. Must be smaller or equal to the array length.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.RandomSubsetCombinationWithRepetition``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomly returns a subset of size <c>numberToSelect</c> of <c>array</c>
            in preserved order with repetition.
            </summary>
            <param name="array">The data list to choose from.</param>
            <param name="numberToSelect">The size of the subset. Must be smaller or equal to the array length.</param>
        </member>
        <member name="P:MathNet.Numerics.Combinatorics.RandomSource">
            <summary>
            Random source supporting the randomized operations.
            </summary>
            <remarks>
            The default value is a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Complex">
            <summary>
            Complex numbers class.
            </summary>
            <remarks>
            <p>The class <c>Complex</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions such 
            as <see cref="M:MathNet.Numerics.Complex.Cosine"/>, ... 
            are also provided. Note that the <c>Complex</c> structures 
            has two special constant values <see cref="P:MathNet.Numerics.Complex.NaN"/> and 
            <see cref="P:MathNet.Numerics.Complex.Infinity"/>.</p>
            
            <p>In order to avoid possible ambiguities resulting from a 
            <c>Complex(double, double)</c> constructor, the static methods 
            <see cref="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)"/> and <see cref="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)"/>
            are provided instead.</p>
            
            <code>
            Complex x = Complex.FromRealImaginary(1d, 2d);
            Complex y = Complex.FromModulusArgument(1d, Math.Pi);
            Complex z = (x + y) / (x - y);
            </code>
            
            <p>Since there is no canonical order among the complex numbers,
            <c>Complex</c> does not implement <c>IComparable</c> but several
            lexicographic <c>IComparer</c> implementations are provided, see 
            <see cref="P:MathNet.Numerics.Complex.RealImaginaryComparer"/>,
            <see cref="P:MathNet.Numerics.Complex.ModulusArgumentComparer"/> and
            <see cref="P:MathNet.Numerics.Complex.ArgumentModulusComparer"/>.</p>
            
            <p>For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a></p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a <c>Complex</c> from its real
            and imaginary parts.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)">
            <summary>
            Constructs a <c>Complex</c> from its real
            and imaginary parts.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)">
            <summary>
            Constructs a <c>Complex</c> from its modulus and
            argument.
            </summary>
            <param name="modulus">Must be non-negative.</param>
            <param name="argument">Real number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Random(MathNet.Numerics.Distributions.IContinuousGenerator,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Constructs a complex number with random real and imaginary value.
            </summary>
            <param name="realRandomDistribution">Continuous random distribution or source for the real part.</param>
            <param name="imagRandomDistribution">Continuous random distribution or source for the imaginary part.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Random(MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Constructs a complex number with random real and imaginary value.
            </summary>
            <param name="randomDistribution">Continuous random distribution or source for the real and imaginary parts.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.RandomPolar(MathNet.Numerics.Distributions.IContinuousGenerator,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Constructs a complex number with random modulus and argument.
            </summary>
            <param name="modulusRandomDistribution">Continuous random distribution or source for the modulus.</param>
            <param name="argumentRandomDistribution">Continuous random distribution or source for the argument.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.RandomUnitCircle(MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Constructs a complex number on the unit circle with random argument.
            </summary>
            <param name="argumentRandomDistribution">Continuous random distribution or source for the argument.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(System.Object)">
            <summary>
            Indicates whether <c>obj</c> is equal to this instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(MathNet.Numerics.Complex)">
            <summary>
            Indicates whether <c>z</c> is equal to this instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.GetHashCode">
            <summary>
            Gets the hashcode of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.CompareTo(MathNet.Numerics.Complex)">
            <summary>
            Compare this complex number with another complex number.
            </summary>
            <remarks>
            The complex number's modulus takes precedence over the argument.
            </remarks>
            <param name="other">The complex number to compare with.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Equality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Inequality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryPlus(MathNet.Numerics.Complex)">
            <summary>
            Unary addition.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryNegation(MathNet.Numerics.Complex)">
            <summary>
            Unary minus.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,System.Double)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,System.Double)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(System.Double,MathNet.Numerics.Complex)">
            <summary>
            Complex addition.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(System.Double,MathNet.Numerics.Complex)">
            <summary>
            Complex subtraction.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(System.Double,MathNet.Numerics.Complex)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,System.Double)">
            <summary>
            Complex multiplication.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(System.Double,MathNet.Numerics.Complex)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,System.Double)">
            <summary>
            Complex division.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Double)~MathNet.Numerics.Complex">
            <summary>
            Implicit conversion of a real double to a real <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sine">
            <summary>
            Trigonometric Sine (sin, Sinus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cosine">
            <summary>
            Trigonometric Cosine (cos, Cosinus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tangent">
            <summary>
            Trigonometric Tangent (tan, Tangens) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cotangent">
            <summary>
            Trigonometric Cotangent (cot, Cotangens) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Secant">
            <summary>
            Trigonometric Secant (sec, Sekans) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cosecant">
            <summary>
            Trigonometric Cosecant (csc, Cosekans) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseSine">
            <summary>
            Trigonometric Arcus Sine (asin, Arkussinus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseCosine">
            <summary>
            Trigonometric Arcus Cosine (acos, Arkuscosinus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseTangent">
            <summary>
            Trigonometric Arcus Tangent (atan, Arkustangens) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseCotangent">
            <summary>
            Trigonometric Arcus Cotangent (acot, Arkuscotangens) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseSecant">
            <summary>
            Trigonometric Arcus Secant (asec, Arkussekans) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseCosecant">
            <summary>
            Trigonometric Arcus Cosecant (acsc, Arkuscosekans) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.HyperbolicSine">
            <summary>
            Trigonometric Hyperbolic Sine (sinh, Sinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.HyperbolicCosine">
            <summary>
            Trigonometric Hyperbolic Cosine (cosh, Cosinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.HyperbolicTangent">
            <summary>
            Trigonometric Hyperbolic Tangent (tanh, Tangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.HyperbolicCotangent">
            <summary>
            Trigonometric Hyperbolic Cotangent (coth, Cotangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.HyperbolicSecant">
            <summary>
            Trigonometric Hyperbolic Secant (sech, Secans hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.HyperbolicCosecant">
            <summary>
            Trigonometric Hyperbolic Cosecant (csch, Cosecans hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseHyperbolicSine">
            <summary>
            Trigonometric Hyperbolic Area Sine (asinh, reasinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseHyperbolicCosine">
            <summary>
            Trigonometric Hyperbolic Area Cosine (acosh, Areacosinus hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseHyperbolicTangent">
            <summary>
            Trigonometric Hyperbolic Area Tangent (atanh, Areatangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseHyperbolicCotangent">
            <summary>
            Trigonometric Hyperbolic Area Cotangent (acoth, Areacotangens hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseHyperbolicSecant">
            <summary>
            Trigonometric Hyperbolic Area Secant (asech, Areasekans hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.InverseHyperbolicCosecant">
            <summary>
            Trigonometric Hyperbolic Area Cosecant (acsch, Areacosekans hyperbolicus) of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Exponential">
            <summary>
            Exponential of this <c>Complex</c> (exp(x), E^x).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.NaturalLogarithm">
            <summary>
            Natural Logarithm of this <c>Complex</c> (Base E).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Power(MathNet.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the given value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Root(MathNet.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the inverse of the given value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Square">
            <summary>
            The Square (power 2) of this <c>Complex</c>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.SquareRoot">
            <summary>
            The Square Root (power 1/2) of this <c>Complex</c>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Parse(System.String)">
            <summary>
            Parse a string into a <c>Complex</c>.
            </summary>
            <remarks>
            The adopted string representation for the complex numbers is 
            <i>UVW+I*XYZ</i> where <i>UVW</i> and <i>XYZ</i> are <c>double</c> 
            strings. Some alternative representations are <i>UVW+XYZi</i>,
            <i>UVW+iXYZ</i>, <i>UVW</i> and <i>iXYZ</i>. 
            Additionally the string <c>"NaN"</c> is mapped to 
            <c>Complex.NaN</c>, the string <c>"Infinity"</c> to 
            <c>Complex.ComplexInfinity</c>, <c>"PositiveInfinity"</c>
            to <c>Complex.DirectedInfinity(Complex.One)</c>,
            <c>"NegativeInfinity"</c> to <c>Complex.DirectedInfinity(-Complex.One)</c>
            and finally <c>"DirectedInfinity(WVW+I*XYZ)"</c> to <c>Complex.DirectedInfinity(WVW+I*XYZ)</c>.
            <code>
            Complex z = Complex.Parse("12.5+I*7");
            Complex nan = Complex.Parse("NaN");
            Complex infinity = Complex.Parse("Infinity");
            </code>
            This method is symmetric to <see cref="M:MathNet.Numerics.Complex.ToString"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.Parse(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Parse a string into a <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString">
            <summary>
            Formats this <c>Complex</c> into a <c>string</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString(System.Globalization.NumberFormatInfo)">
            <summary>
            Formats this <c>Complex</c> into a <c>string</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.RealImaginaryComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(real, imaginary)</c>. 
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.ModulusArgumentComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(modulus, argument)</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.ArgumentModulusComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(argument, modulus)</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Zero">
            <summary>
            Represents the zero value. This field is constant.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsZero">
            <summary>
            Indicates whether the <c>Complex</c> is zero.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.One">
            <summary>
            Represents the <c>1</c> value. This field is constant.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsOne">
            <summary>
            Indicates whether the <c>Complex</c> is one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.I">
            <summary>
            Represents the imaginary unit number. This field is constant.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsI">
            <summary>
            Indicates whether the <c>Complex</c> is the imaginary unit.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.NaN">
            <summary>
            Represents a value that is not a number. This field is constant.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsNaN">
            <summary>
            Indicates whether the provided <c>Complex</c> evaluates to a
            value that is not a number.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Infinity">
            <summary>
            Represents the infinity value. This field is constant.
            </summary>
            <remarks>
            The semantic associated to this value is a <c>Complex</c> of 
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative MathNet.PreciseNumerics and MathNet.Symbolics packages
            instead.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsInfinity">
            <summary>
            Indicates the provided <c>Complex</c> evaluates to an
            infinite value.
            </summary>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsReal">
            <summary>
            Indicates the provided <c>Complex</c> is real.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsRealNonNegative">
            <summary>
            Indicates the provided <c>Complex</c> is real and not negative, that is >= 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsImaginary">
            <summary>
            Indicates the provided <c>Complex</c> is imaginary.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Real">
            <summary>
            Gets or sets the real part of this <c>Complex</c>.
            </summary>
            <seealso cref="P:MathNet.Numerics.Complex.Imag"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Imag">
            <summary>
            Gets or sets the imaginary part of this <c>Complex</c>.
            </summary>
            <seealso cref="P:MathNet.Numerics.Complex.Real"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Modulus">
            <summary>
            Gets or sets the modulus of this <c>Complex</c>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set a negative modulus.
            </exception>
            <remarks>
            If this <c>Complex</c> is zero when the modulus is set,
            the Complex is assumed to be positive real with an argument of zero.
            </remarks>
            <seealso cref="P:MathNet.Numerics.Complex.Argument"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.ModulusSquared">
            <summary>
            Gets or sets the squared modulus of this <c>Complex</c>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if an attempt is made to set a negative modulus.
            </exception>
            <remarks>
            If this <c>Complex</c> is zero when the modulus is set,
            the Complex is assumed to be positive real with an argument of zero.
            </remarks>
            <seealso cref="P:MathNet.Numerics.Complex.Argument"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Argument">
            <summary>
            Gets or sets the argument of this <c>Complex</c>.
            </summary>
            <remarks>
            Argument always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex</c> is zero, the Complex
            is assumed to be positive real with an argument of zero.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.Sign">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Conjugate">
            <summary>
            Gets or sets the conjugate of this <c>Complex</c>.
            </summary>
            <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex
            a = b.Conjugate
            </code>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Constants">
            <summary>
            Mathematical Constants
            </summary>
            <seealso cref="T:MathNet.Numerics.SiConstants"/>
            <seealso cref="T:MathNet.Numerics.SiPrefixes"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.E">
            <summary>e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log2E">
            <summary>log[2](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log10E">
            <summary>log[10](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2">
            <summary>log[e](2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln10">
            <summary>log[e](10)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LnPi">
            <summary>log[e](pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvE">
            <summary>1/e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtE">
            <summary>sqrt(e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2">
            <summary>sqrt(2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt1_2">
            <summary>sqrt(1/2) = 1/sqrt(2) = sqrt(2)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HalfSqrt3">
            <summary>sqrt(3)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi">
            <summary>pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi_2">
            <summary>pi/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi_4">
            <summary>pi/4</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtPi">
            <summary>sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2Pi">
            <summary>sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvPi">
            <summary>1/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvPi">
            <summary>2/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrtPi">
            <summary>1/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrt2Pi">
            <summary>1/sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvSqrtPi">
            <summary>2/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Degree">
            <summary>(pi)/180 - factor to convert from Degree (deg) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.Grad">
            <summary>(pi)/200 - factor to convert from NewGrad (grad) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.GradToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.PowerDecibel">
            <summary>ln(10)/20 - factor to convert from Power Decibel (dB) to Neper (Np). Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).</summary>
            <seealso cref="M:MathNet.Numerics.Ratios.RatioToPowerDecibel(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Ratios.PowerDecibelToRatio(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Ratios.PowerDecibelToValue(System.Double,System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutralDecibel">
            <summary>ln(10)/10 - factor to convert from Neutral Decibel (dB) to Neper (Np). Use this version when either both or neither of the Decibel and the compared values represent powers.</summary>
            <seealso cref="M:MathNet.Numerics.Ratios.RatioToDecibel(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Ratios.DecibelToRatio(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Ratios.DecibelToValue(System.Double,System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.Catalan">
            <summary>Catalan constant</summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.EulerGamma">
            <summary>The Euler-Mascheroni constant</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.GoldenRatio">
            <summary>(1+sqrt(5))/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Glaisher">
            <summary>Glaisher Constant</summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.Khinchin">
            <summary>Khinchin constant</summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.BetaDistribution">
            <summary>
            Provides generation of beta distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.BetaDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a> and
              <a href="http://www.xycoon.com/beta_randomnumbers.htm">Xycoon - Beta Distribution</a>.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ContinuousDistribution">
            <summary>
            Declares common functionality for all continuous random number
            distributions based on a random source.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IContinuousGenerator">
            <summary>
            Continuous number generator, returning <see cref="T:System.Double"/> floating-point numbers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousGenerator.NextDouble">
            <summary>
            Generates the next <see cref="T:System.Double"/> floating-point numbers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousGenerator.Reset">
            <summary>
            Resets the number generator, so that it produces the same sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousGenerator.CanReset">
            <summary>
            True if the generator is reproducible, i.e. te same sequence can be generated again.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution">
            <summary>
            Continuous probability distribution, providing distribution properties and functions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.Mean">
            <summary>
            The expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.Variance">
            <summary>
            Average of the squared distances to the expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.Median">
            <summary>
            The value separating the lower half part from the upper half part of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.Minimum">
            <summary>
            Lower limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.Maximum">
            <summary>
            Upper limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousProbabilityDistribution.Skewness">
            <summary>
            Measure of the asymmetry of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ContinuousDistribution"/> class, using a 
            <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ContinuousDistribution"/> class, using the
            specified <see cref="P:MathNet.Numerics.Distributions.ContinuousDistribution.RandomSource"/> as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.ContinuousDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousDistribution.NextDouble">
            <summary>
            Returns a distributed floating point random number.
            </summary>
            <returns>A distributed double-precision floating point number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousDistribution.Reset">
            <summary>
            Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.Minimum">
            <summary>
            Lower limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.Maximum">
            <summary>
            Upper limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.Mean">
            <summary>
            The expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.Median">
            <summary>
            The value separating the lower half part from the upper half part of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.Variance">
            <summary>
            Average of the squared distances to the expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.Skewness">
            <summary>
            Measure of the asymmetry of this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.ContinuousDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousDistribution.CanReset">
            <summary>
            Gets a value indicating whether the random number distribution can be reset,
            so that it produces the same  random number sequence again.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.BetaDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.BetaDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if both alpha and beta are greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaDistribution.NextDouble">
            <summary>
            Returns a beta distributed floating point random number.
            </summary>
            <returns>A beta distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.BetaDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Alpha">
            <summary>
            Gets or sets the alpha parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Beta">
            <summary>
            Gets or sets the beta parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.CauchyLorentzDistribution">
            <summary>
            Provides generation of cauchy distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.CauchyLorentzDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia - Cauchy distribution</a> and
              <a href="http://www.xycoon.com/cauchy2p_random.htm">Xycoon - Cauchy Distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if scale is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.CauchyLorentzDistribution.NextDouble">
            <summary>
            Returns a cauchy distributed floating point random number.
            </summary>
            <returns>A cauchy distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Location">
            <summary>
            Gets or sets the location x0 parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Scale">
            <summary>
            Gets or sets the scale gamma parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.CauchyLorentzDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ChiSquareDistribution">
            <summary>
            Provides generation of chi-square distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.ChiSquareDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - Chi-square distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.ChiSquareDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.ChiSquareDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.#ctor(System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.SetDistributionParameters(System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.IsValidParameterSet(System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if degreesOfFreedom is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquareDistribution.NextDouble">
            <summary>
            Returns a chi-square distributed floating point random number.
            </summary>
            <returns>A chi-square distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.ChiSquareDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom (the number of standard distributed random variables) parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquareDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ContinuousUniformDistribution">
            <summary>
            Provides generation of continuous uniformly distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.ContinuousUniformDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">
              Wikipedia - Uniform distribution (continuous)</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if lowerLimit &lt;= upperLimit; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.NextDouble">
            <summary>
            Returns a uniformly distributed floating point random number.
            </summary>
            <returns>A uniformly distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.LowerLimit">
            <summary>
            Gets or sets the lower limit parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.SetDistributionParameters(System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.UpperLimit">
            <summary>
            Gets or sets the upper limit parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.ContinuousUniformDistribution.SetDistributionParameters(System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniformDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ChiDistribution">
            <summary>
            Provides generation of chi distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.ChiDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.ChiDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.ChiDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.#ctor(System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.SetDistributionParameters(System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.IsValidParameterSet(System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if degreesOfFreedom is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiDistribution.NextDouble">
            <summary>
            Returns a chi distributed floating point random number.
            </summary>
            <returns>A chi distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.ChiDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom (the number of standard distributed random variables) parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.StudentsTDistribution">
            <summary>
            Provides generation of student's t-distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.StudentsTDistribution"/> type bases upon information presented on
            <a href="http://en.wikipedia.org/wiki/Student's_t-distribution">Wikipedia - Student's t-distribution</a>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.StudentsTDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.StudentsTDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.#ctor(System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="degreesOfFreedom">nu-parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.SetDistributionParameters(System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
            <param name="degreesOfFreedom">nu-parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.IsValidParameterSet(System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if degreesOfFreedom is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
            <param name="degreesOfFreedom">nu-parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentsTDistribution.NextDouble">
            <summary>
            Returns a student's t-distributed floating point random number.
            </summary>
            <returns>A student's t-distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.StudentsTDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom (nu) parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> if <see cref="P:MathNet.Numerics.Distributions.StudentsTDistribution.DegreesOfFreedom"/> &lt;= 2,
            since the value is not defined in this case.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> if <see cref="P:MathNet.Numerics.Distributions.StudentsTDistribution.DegreesOfFreedom"/> &lt;= 3,
            since the value is not defined in this case.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentsTDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> if <see cref="P:MathNet.Numerics.Distributions.StudentsTDistribution.DegreesOfFreedom"/> &lt;= 4,
            since the value is not defined in this case.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ErlangDistribution">
            <summary>
            Provides generation of erlang distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.ErlangDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a> and
              <a href="http://www.xycoon.com/erlang_random.htm">Xycoon - Erlang Distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.SetDistributionParameters(System.Int32,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.IsValidParameterSet(System.Int32,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if both shape and rate are greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ErlangDistribution.NextDouble">
            <summary>
            Returns a erlang distributed floating point random number.
            </summary>
            <returns>A erlang distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Shape">
            <summary>
            Gets or sets the shape k parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Rate">
            <summary>
            Gets or sets the rate lambda parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ErlangDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ExponentialDistribution">
             <summary>
             Pseudo-random generation of exponentially distributed deviates.
             </summary>
             
             <remarks> 
             <para>For details about this distribution, see 
             <a href="http://en.wikipedia.org/wiki/Exponential_distribution">
             Wikipedia - Exponential distribution</a>.</para>
             
             <para>For details of the algorithm, see
             <a href="http://www.library.cornell.edu/nr/">
             Numerical recipes in C</a> (chapter 7)</para>
            
             <para>pdf: f(x) = l*exp(-l*x); l = lambda</para>
             </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.SetDistributionParameters(System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.IsValidParameterSet(System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ExponentialDistribution.NextDouble">
            <summary>
            Returns a exponential distributed floating point random number.
            </summary>
            <returns>A exponential distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Rate">
            <summary>
            Gets or sets the average rate parameter, also known as lambda.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ExponentialDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.FisherSnedecorDistribution">
            <summary>
            Provides generation of F-distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.FisherSnedecorDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - F-distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.SetDistributionParameters(System.Int32,System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.IsValidParameterSet(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if both alpha and beta are greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecorDistribution.NextDouble">
            <summary>
            Returns a beta distributed floating point random number.
            </summary>
            <returns>An F-distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Alpha">
            <summary>
            Gets or sets the alpha parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Beta">
            <summary>
            Gets or sets the beta parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecorDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.GammaDistribution">
            <summary>
            Provides generation of gamma distributed random numbers.
            Often models the sum of k exponentially distributed random variables, each of which has mean theta.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.GammaDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if both alpha and theta are greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GammaDistribution.NextDouble">
            <summary>
            Returns a gamma distributed floating point random number.
            </summary>
            <returns>A gamma distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Alpha">
            <summary>
            Gets or sets the number of summed exponentially distributed random variables.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Theta">
            <summary>
            Gets or sets the mean of the summed exponentially distributed random variables.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Variance">
            <summary>
            Gets the variance of distributed random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GammaDistribution.Skewness">
            <summary>
            Gets the skewness of distributed random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.LaplaceDistribution">
            <summary>
            Provides generation of laplace distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.LaplaceDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if scale is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LaplaceDistribution.NextDouble">
            <summary>
            Returns a laplace distributed floating point random number.
            </summary>
            <returns>A laplace distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Location">
            <summary>
            Gets or sets the location mu parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Scale">
            <summary>
            Gets or sets the scale b parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LaplaceDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.LognormalDistribution">
            <summary>
            Provides generation of lognormal distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.LognormalDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Lognormal Distribution</a> and
              the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.LognormalDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.LognormalDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if sigma is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Inverse of the continuous cumulative distribution function of this probability distribution.
            </summary>
            <seealso cref="M:MathNet.Numerics.Distributions.LognormalDistribution.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LognormalDistribution.NextDouble">
            <summary>
            Returns a lognormal distributed floating point random number.
            </summary>
            <returns>A lognormal distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.LognormalDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Mu">
            <summary>
            Gets or sets the mu parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Sigma">
            <summary>
            Gets or sets the sigma parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LognormalDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.NormalDistribution">
             <summary>
             Pseudo-random generation of normal distributed deviates.
             </summary>
             
             <remarks> 
             <para>For details about this distribution, see 
             <a href="http://en.wikipedia.org/wiki/Normal_distribution">
             Wikipedia - Normal distribution</a>.</para>
             
             <para>This implementation is based on the <i>Box-Muller</i> algorithm
             for generating random deviates with a normal distribution.</para>
             
             <para>For details of the algorithm, see
             <a href="http://www.library.cornell.edu/nr/">
             Numerical recipes in C</a> (chapter 7)</para>
            
             <para>pdf: f(x) = 1/(s*sqrt(2*Pi))*exp(-(x-m)^2/(2*s^2)); m = mu (location), s = sigma (scale)</para>
             </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.NormalDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.NormalDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if sigma is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.EstimateDistributionParameters(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Estimate and set all distribution parameters based on a sample set.
            </summary>
            <param name="samples">Samples of this distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Inverse of the continuous cumulative distribution function of this probability distribution.
            </summary>
            <seealso cref="M:MathNet.Numerics.Distributions.NormalDistribution.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalDistribution.NextDouble">
            <summary>
            Returns a normal/gaussian distributed floating point random number.
            </summary>
            <returns>A normal distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.NormalDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Mu">
            <summary>
            Gets or sets the mu parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Sigma">
            <summary>
            Gets or sets the sigma (standard deviation) parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ParetoDistribution">
            <summary>
            Provides generation of pareto distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.ParetoDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a> and
              <a href="http://www.xycoon.com/par_random.htm">Xycoon - Pareto Distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.SetDistributionParameters(System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if both location and shape are greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ParetoDistribution.NextDouble">
            <summary>
            Returns a pareto distributed floating point random number.
            </summary>
            <returns>A pareto distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Location">
            <summary>
            Gets or sets the location xm parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Shape">
            <summary>
            Gets or sets the shape k parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ParetoDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:MathNet.Numerics.Distributions.StableDistribution">
            <summary>
            Provides generation of levy skew alpha-stable distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.StableDistribution"/> type bases upon information presented on
            <a href="http://en.wikipedia.org/wiki/L%C3%A9vy_skew_alpha-stable_distribution">Wikipedia - Levy skew alpha-stable distribution</a>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="P:MathNet.Numerics.Distributions.StableDistribution.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.StableDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="location">mu-parameter</param>
            <param name="scale">c-parameter</param>
            <param name="exponent">alpha-parameter</param>
            <param name="skewness">beta-parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.SetDistributionParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
            <param name="location">mu-parameter</param>
            <param name="scale">c-parameter</param>
            <param name="exponent">alpha-parameter</param>
            <param name="skewness">beta-parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if scale is greater than or equal to 0.0, skewness is between -1.0 and 1.0 and exponent is between 0.0 and 2.0; otherwise, <see langword="false"/>.
            </returns>
            <param name="location">mu-parameter</param>
            <param name="scale">c-parameter</param>
            <param name="exponent">alpha-parameter</param>
            <param name="skewness">beta-parameter</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StableDistribution.NextDouble">
            <summary>
            Returns an alpha-stable distributed floating point random number.
            </summary>
            <returns>An alpha-stable distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.StableDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Location">
            <summary>
            Gets or sets the location mu parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Scale">
            <summary>
            Gets or sets the scale c parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Exponent">
            <summary>
            Gets or sets the exponent alpha parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Beta">
            <summary>
            Gets or sets the skeqness beta parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> if <see cref="P:MathNet.Numerics.Distributions.StableDistribution.Exponent"/> &lt;= 1.0,
            since the value is not defined in this case.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StableDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:MathNet.Numerics.Distributions.StandardDistribution">
             <summary>
             Pseudo-random generation of standard distributed deviates.
             </summary>
             
             <remarks> 
             <para>For details about this distribution, see 
             <a href="http://en.wikipedia.org/wiki/Normal_distribution">
             Wikipedia - Normal distribution</a>.</para>
             
             <para>This implementation is based on the <i>Box-Muller</i> algorithm
             for generating random deviates with a normal distribution.</para>
             
             <para>For details of the algorithm, see
             <a href="http://www.library.cornell.edu/nr/">
             Numerical recipes in C</a> (chapter 7)</para>
            
             <para>pdf: f(x) = 1/sqrt(2*Pi)*exp(-x^2/2)</para>
             </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StandardDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StandardDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StandardDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StandardDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StandardDistribution.InverseCumulativeDistribution(System.Double)">
            <summary>
            Inverse of the continuous cumulative distribution function of this probability distribution.
            </summary>
            <seealso cref="M:MathNet.Numerics.Distributions.StandardDistribution.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StandardDistribution.NextDouble">
            <summary>
            Returns a standard distributed floating point random number.
            </summary>
            <returns>A standard distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StandardDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StandardDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StandardDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StandardDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StandardDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StandardDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.TriangularDistribution">
            <summary>
            Provides generation of triangular distributed random numbers.
            </summary>
            <remarks>
            The implementation of the <see cref="T:MathNet.Numerics.Distributions.TriangularDistribution"/> type bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia - Triangular distribution</a>
              and the implementation in the <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.SetDistributionParameters(System.Double,System.Double,System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.IsValidParameterSet(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if both shape and rate are greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.ProbabilityDensity(System.Double)">
            <summary>
            Continuous probability density function (pdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.TriangularDistribution.NextDouble">
            <summary>
            Returns a triangular distributed floating point random number.
            </summary>
            <returns>A triangular distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.LowerLimit">
            <summary>
            Gets or sets the lower limit parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.TriangularDistribution.SetDistributionParameters(System.Double,System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.UpperLimit">
            <summary>
            Gets or sets the upper limit parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.TriangularDistribution.SetDistributionParameters(System.Double,System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Center">
            <summary>
            Gets or sets the center parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.TriangularDistribution.SetDistributionParameters(System.Double,System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.TriangularDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.DiscreteDistribution">
            <summary>
            Declares common functionality for all discrete random number
            distributions based on a random source.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDiscreteGenerator">
            <summary>
            Discrete number generator, returning <see cref="T:System.Int32"/> integer numbers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteGenerator.NextInt32">
            <summary>
            Generates the next <see cref="T:System.Int32"/> integer numbers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteGenerator.Reset">
            <summary>
            Resets the number generator, so that it produces the same sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteGenerator.CanReset">
            <summary>
            True if the generator is reproducible, i.e. te same sequence can be generated again.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution">
            <summary>
            Discrete probability distribution, providing distribution properties and functions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.Mean">
            <summary>
            The expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.Variance">
            <summary>
            Average of the squared distances to the expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.Median">
            <summary>
            The value separating the lower half part from the upper half part of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.Minimum">
            <summary>
            Lower limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.Maximum">
            <summary>
            Upper limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteProbabilityDistribution.Skewness">
            <summary>
            Measure of the asymmetry of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.DiscreteDistribution"/> class, using a 
            <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/> as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.DiscreteDistribution"/> class, using the
            specified <see cref="P:MathNet.Numerics.Distributions.DiscreteDistribution.RandomSource"/> as underlying random number generator.
            </summary>
            <param name="random">A <see cref="P:MathNet.Numerics.Distributions.DiscreteDistribution.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteDistribution.NextInt32">
            <summary>
            Returns a distributed integer random number.
            </summary>
            <returns>A distributed 32 bit signed integer number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteDistribution.Reset">
            <summary>
            Resets the random number distribution, so that it produces the same random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.Minimum">
            <summary>
            Lower limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.Maximum">
            <summary>
            Upper limit of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.Mean">
            <summary>
            The expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.Median">
            <summary>
            The value separating the lower half part from the upper half part of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.Variance">
            <summary>
            Average of the squared distances to the expected value of a random variable with this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.Skewness">
            <summary>
            Measure of the asymmetry of this probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.RandomSource">
            <summary>
            Gets or sets a <see cref="P:MathNet.Numerics.Distributions.DiscreteDistribution.RandomSource"/> object that can be used
            as underlying random number generator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteDistribution.CanReset">
            <summary>
            Gets a value indicating whether the random number distribution can be reset,
            so that it produces the same  random number sequence again.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ArbitraryDistribution">
            <summary>
            Non-uniform discrete random distribution.
            </summary>
            <remarks>
            <p>The class <c>ArbitraryDistribution</c> provides integers 
            deviates for any arbitrary (finite) distribution.</p>
            
            <code>
            double[] distribution = {0.25, 0.25, 0.5};
            ArbitraryDistribution gen = new ArbitraryDistribution(0, distribution);
            
            // Pr(x = 0) = 0.25, Pr(x = 1) = 0.25, Pr(x = 2) = 0.5
            int x = gen.NextInt32();
            </code>
            
            <p>The probability <c>Pr(x)</c> for any integer <c>x</c>
            is proportional to <c>ArbitraryDistribution.ProbabilityMass(x)</c>.</p>
            
            <p>See the <a href="http://cgm.cs.mcgill.ca/~luc/chapter_three.pdf">
            chapter three</a> of the book <i>Non-uniform variate Generation</i>
            from Luc Devroye.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.#ctor(System.Int32,System.Double[])">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.SetDistributionParameters(System.Int32,System.Double[])">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.IsValidParameterSet(System.Int32,System.Double[])">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if the probabilities sum up to 1; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ArbitraryDistribution.NextInt32">
            <summary>
            Generate a new random number according to this distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.FirstIndex">
            <summary>
            Gets the index of the first item.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.LastIndex">
            <summary>
            Gets the index of the last item.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Count">
            <summary>
            Gets the number of item.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ArbitraryDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.BernoulliDistribution">
            <summary>
            Provides generation of bernoulli distributed random numbers.
            </summary>
            <remarks>
            The bernoulli distribution generates only discrete numbers.<br />
            The implementation bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.SetDistributionParameters(System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.IsValidParameterSet(System.Double)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BernoulliDistribution.NextInt32">
            <summary>
            Returns a bernoulli distributed random number.
            </summary>
            <returns>A bernoulli distributed 32-bit signed integer.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.ProbabilityOfSuccess">
            <summary>
            Gets or sets the success probability parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BernoulliDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.BinomialDistribution">
            <summary>
            Provides generation of binomial distributed random numbers.
            </summary>
            <remarks>
            The binomial distribution generates only discrete numbers.<br />
            The implementation bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/binomial_distribution">Wikipedia - Binomial distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.SetDistributionParameters(System.Double,System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if probabilityOfSuccess is greater than or equal to 0.0, and less than or equal to 1.0,
            and numberOfTrials is greater than or equal to 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BinomialDistribution.NextInt32">
            <summary>
            Returns a bernoulli distributed random number.
            </summary>
            <returns>A bernoulli distributed 32-bit signed integer.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.ProbabilityOfSuccess">
            <summary>
            Gets or sets the success probability parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.NumberOfTrials">
            <summary>
            Gets or sets the number of trials parameter.
            </summary>
            <remarks>Call <see cref="M:MathNet.Numerics.Distributions.BinomialDistribution.IsValidParameterSet(System.Double,System.Int32)"/> to determine whether a value is valid and therefore assignable.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BinomialDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.HypergeometricDistribution">
            <summary>
            Provides generation of hypergeometric distributed random numbers.
            </summary>
            <remarks>
            The hypergeometric distribution generates only discrete numbers.<br />
            The implementation bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution">Wikipedia - Geometric distribution</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.SetDistributionParameters(System.Int32,System.Int32,System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.IsValidParameterSet(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if values are greater than or equal to 0.0 and both favored items and number of samples are not bigger than the population size; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.HypergeometricDistribution.NextInt32">
            <summary>
            Returns a geometric distributed floating point random number.
            </summary>
            <returns>A geometric distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.PopulationSize">
            <summary>
            Gets or sets the population size parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.FavoredItems">
            <summary>
            Gets or sets the number of items of the population that are in favor.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.NumberOfSamples">
            <summary>
            Gets or sets the number of samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            Throws <see cref="T:System.NotSupportedException"/> since
            the value is not defined for this distribution.
            </summary>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.HypergeometricDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.DiscreteUniformDistribution">
            <summary>
            Provides generation of discrete uniformly distributed random numbers.
            </summary>
            <remarks>
            The discrete uniform distribution generates only discrete numbers.<br />
            The implementation bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">
              Wikipedia - Uniform distribution (discrete)</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.SetDistributionParameters(System.Int32,System.Int32)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.IsValidParameterSet(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified parameters is valid.
            </summary>
            <returns>
            <see langword="true"/> if lowerLimit &lt;= upperLimit; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.NextInt32">
            <summary>
            Returns a uniformly distributed floating point random number.
            </summary>
            <returns>A uniformly distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.LowerLimit">
            <summary>
            Gets or sets the lower limit parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.SetDistributionParameters(System.Int32,System.Int32)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.UpperLimit">
            <summary>
            Gets or sets the upper limit parameter.
            To set all parameters at once consider using
            <see cref="M:MathNet.Numerics.Distributions.DiscreteUniformDistribution.SetDistributionParameters(System.Int32,System.Int32)"/> instead.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniformDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.GeometricDistribution">
            <summary>
            Provides generation of geometric distributed random numbers.
            </summary>
            <remarks>
            The geometric distribution generates only discrete numbers.<br />
            The implementation bases upon information presented on
              <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - Geometric distribution</a>
              and the implementation in the <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
              Communication Networks Class Library</a>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.SetDistributionParameters(System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.IsValidParameterSet(System.Double)">
            <summary>
            Determines whether the specified parameters are valid.
            </summary>
            <returns>
            <see langword="true"/> if value is greater than or equal to 0.0, and less than or equal to 1.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.GeometricDistribution.NextInt32">
            <summary>
            Returns a geometric distributed floating point random number.
            </summary>
            <returns>A geometric distributed double-precision floating point number.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.ProbabilityOfSuccess">
            <summary>
            Gets or sets the success probability parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.GeometricDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.PoissonDistribution">
             <summary>
             Pseudo-random generation of poisson distributed deviates.
             </summary>
             
             <remarks> 
             <para>For details about this distribution, see 
             <a href="http://en.wikipedia.org/wiki/Poisson_distribution">
             Wikipedia - Poisson distribution</a>.</para>
             
             <para>For details of the algorithm, see
             <a href="http://www.lkn.ei.tum.de/lehre/scn/cncl/doc/html/cncl_toc.html">
             Communication Networks Class Library (TU München)</a></para>
            
             <para>pdf: f(x) = exp(-l)*l^x/x!; l = lambda</para>
             </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.#ctor">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Initializes a new instance, using the specified <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/>
            as underlying random number generator.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="random"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new instance, using a <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>
            as underlying random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.SetDistributionParameters(System.Double)">
            <summary>
            Configure all distribution parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.IsValidParameterSet(System.Double)">
            <summary>
            Determines whether the specified parameters are valid.
            </summary>
            <returns>
            <see langword="true"/> if value is greater than 0.0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.ProbabilityMass(System.Int32)">
            <summary>
            Discrete probability mass function (pmf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Continuous cumulative distribution function (cdf) of this probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.PoissonDistribution.NextInt32">
            <summary>
            Returns a poisson distributed random number.
            </summary>
            <returns>A poisson distributed 32-bit signed integer.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Lambda">
            <summary>
            Gets or sets the lambda parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Minimum">
            <summary>
            Gets the minimum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Maximum">
            <summary>
            Gets the maximum possible value of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Mean">
            <summary>
            Gets the mean value of generated random numbers. 
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Median">
            <summary>
            Gets the median of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Variance">
            <summary>
            Gets the variance of generated random numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.PoissonDistribution.Skewness">
            <summary>
            Gets the skewness of generated random numbers.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ZipfDistribution">
            <summary>
            Pseudo-random generator of Zipf distributed deviates.
            </summary>
            <remarks>
            <p>The density of the continuous Zipf distribution is defined
            on <c>[1, +infinity)</c>, the density is proportional to
            <c>x^s</c> where <c>s &gt; 1</c> is the <i>skew</i>.</p>
            
            <p>See the <a href="http://en.wikipedia.org/wiki/Zipfs_law">Wikipedia</a>
            for more information about Zipf distribution.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ZipfDistribution.#ctor">
            <summary>
            Zipfian generator with a default <c>skew</c> equal to <c>2</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ZipfDistribution.#ctor(MathNet.Numerics.RandomSources.RandomSource)">
            <summary>
            Zipfian generator with a default <c>skew</c> equal to <c>2</c>.
            </summary>
            <param name="random">A <see cref="T:MathNet.Numerics.RandomSources.RandomSource"/> object.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ZipfDistribution.#ctor(System.Double)">
            <summary>
            Create a zipf distribution with the provided skew.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ZipfDistribution.#ctor(System.Double,System.Int32)">
            <summary>
            Create a zipf distribution with the provided skew and seed.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ZipfDistribution.Next">
            <summary>
            Returns the next zipfian deviate.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ZipfDistribution.Skew">
            <summary>
            Gets or sets the skew of the zipfian distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation">
            <summary>
            Akima Spline Interpolation Algorithm.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.IInterpolationMethod">
            <summary>
            Interpolation method
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Differentiate(System.Double,System.Double@,System.Double@)"/>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Integrate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolationMethod.SupportsDifferentiation"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolationMethod.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolationMethod.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolationMethod.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.IInterpolationMethod.Integrate(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples and natural boundaries.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.SupportsIntegration"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.DifferentiateThreePoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Three-Point Differentiation Helper.
            </summary>
            <param name="t">The point of the differentiation.</param>
            <param name="t0">First Point t0.</param>
            <param name="x0">Value of first point x0 = x(t0).</param>
            <param name="t1">Second Point t0.</param>
            <param name="x1">Value of second point x1 = x(t1).</param>
            <param name="t2">Third Point t0.</param>
            <param name="x2">Value of third point x2 = x(t2).</param>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.AkimaSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation">
            <summary>
            Barycentric Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor interation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.#ctor">
            <summary>
            Create a barycentric interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
            <param name="w">Barycentric weights w(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.BarycentricInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation">
            <summary>
            Barycentric Polynomial Interpolation where the given sample points are chebyshev nodes of the first kind.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Init(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples on chebyshev nodes
            of the first kind in the interval [a,b].
            </summary>
            <param name="a">Left bound of the sample point interval.</param>
            <param name="b">Right bound of the sample point interval.</param>
            <param name="x">Values x(t) where t are chebyshev nodes over [a,b], i.e. x[i] = x(0.5*(b+a) + 0.5*(b-a)*cos(Pi*(2*i+1)/(2*n)))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.SupportsIntegration"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.GenerateSamplePoints(System.Double,System.Double,System.Int32)">
            <summary>
            Generate a set of chebyshev points of the first kind in the interval [a,b].
            These are the expected points t for the values v(t) to be provided in <see cref="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Init(System.Double,System.Double,System.Collections.Generic.IList{System.Double})"/>.
            </summary>
            <param name="a">Left bound of the interval.</param>
            <param name="b">Right bound of the interval.</param>
            <param name="numberOfPoints">Number of sample nodes to generate.</param>
            <returns>Chebyshev points (first kind) in the interval [a,b], i.e. 0.5*(b+a) + 0.5*(b-a)*cos(Pi*(2*i+1)/(2*n))</returns>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation">
            <summary>
            Barycentric Polynomial Interpolation where the given sample points are chebyshev nodes of the second kind.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Init(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples on chebyshev nodes
            of the second kind in the interval [a,b].
            </summary>
            <param name="a">Left bound of the sample point interval.</param>
            <param name="b">Right bound of the sample point interval.</param>
            <param name="x">Values x(t) where t are chebyshev nodes over [a,b], i.e. x[i] = x(0.5*(b+a) + 0.5*(b-a)*cos(Pi*i/n))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.SupportsIntegration"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.GenerateSamplePoints(System.Double,System.Double,System.Int32)">
            <summary>
            Generate a set of chebyshev points of the second kind in the interval [a,b].
            These are the expected points t for the values v(t) to be provided in <see cref="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Init(System.Double,System.Double,System.Collections.Generic.IList{System.Double})"/>.
            </summary>
            <param name="a">Left bound of the interval.</param>
            <param name="b">Right bound of the interval.</param>
            <param name="numberOfPoints">Number of sample nodes to generate.</param>
            <returns>Chebyshev points (second kind) in the interval [a,b], i.e. 0.5*(b+a) + 0.5*(b-a)*cos(Pi*i/n)</returns>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.ChebyshevSecondKindPolynomialInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation">
            <summary>
            Cubic Hermite Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and interation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
            <param name="d">Derivatives x'(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.InitInternal(System.Double[],System.Double[],System.Double[])">
            <summary>
            Internal Init, skip parameter validation and sorting.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicHermiteSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation">
            <summary>
            Cubic Spline Interpolation Algorithm with continuous first and second derivatives.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples and natural boundaries.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Initialize the interpolation method with the given samples.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.SupportsIntegration"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.SolveTridiagonal(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Tridiagonal Solve Helper.
            </summary>
            <param name="a">a-vector[n].</param>
            <param name="b">b-vector[n], will be modified by this function.</param>
            <param name="c">c-vector[n].</param>
            <param name="d">d-vector[n], will be modified by this function.</param>
            <returns>x-vector[n]</returns>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.CubicSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation">
            <summary>
            Barycentric Polynomial Interpolation where the given sample points are equidistant.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Init(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given equidistant samples in the interval [a,b].
            </summary>
            <param name="a">Left bound of the sample point interval.</param>
            <param name="b">Right bound of the sample point interval.</param>
            <param name="x">Values x(t) where t are equidistant over [a,b], i.e. x[i] = x(a+(b-a)*i/(n-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation">
            <summary>
            Limited Order Lagrange Polynomial Interpolation using Neville's Algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.#ctor">
            <summary>
            Create a polynomial interpolation algorithm with full order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.#ctor(System.Int32)">
            <summary>
            Create a polynomial interpolation algorithm with the given maximum order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Init(MathNet.Numerics.SampleList)">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
            <param name="samples">Sample points t and values x(t).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.MaximumOrder">
            <summary>
            The maxium interpolation order.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.EffectiveOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.EffectiveOrder">
            <summary>
            The interpolation order that is effectively used.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderPolynomialInterpolation.MaximumOrder"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation">
            <summary>
            Limited Order Rational Interpolation (with poles) using Bulirsch &amp; Stoer's Algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.#ctor">
            <summary>
            Create a rational interpolation algorithm with full order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.#ctor(System.Int32)">
            <summary>
            Create a rational interpolation algorithm with the given order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Init(MathNet.Numerics.SampleList)">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
            <param name="samples">Sample points t and values x(t).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.MaximumOrder">
            <summary>
            The maxium interpolation order.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.EffectiveOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.EffectiveOrder">
            <summary>
            The interpolation order that is effectively used.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LimitedOrderRationalInterpolation.MaximumOrder"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation">
            <summary>
            Linear Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and interation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.LinearSplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation">
            <summary>
            Lagrange Polynomial Interpolation using Neville's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports differentiation, but doesn't support integration.
            </para>
            <para>
            Consider to use the <see cref="T:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation"/> or at least 
            one of the specially spaced barycentric alternatives like the 
            <see cref="T:MathNet.Numerics.Interpolation.Algorithms.EquidistantPolynomialInterpolation"/> or 
            <see cref="T:MathNet.Numerics.Interpolation.Algorithms.ChebyshevFirstKindPolynomialInterpolation"/> instead.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.#ctor">
            <summary>
            Create a neville polynomial interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.PolynomialInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation">
            <summary>
            Barycentric Rational Interpolation without poles using Floater and Hormann's Algorithm.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor integration.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.#ctor">
            <summary>
            Create an interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given samples.
            </summary>
            <remarks>
            The interpolation scheme order will be set to 3.
            </remarks>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Initialize the interpolation method with the given samples.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.RationalPoleFreeInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation">
            <summary>
            Rational Interpolation (with poles) using Bulirsch &amp; Stoer's Algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.#ctor">
            <summary>
            Create a neville polynomial interpolation algorithm instance.
            </summary>
            <remarks>
            This algorithm neither supports differentiation nor interation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given sample set.
            </summary>
            <param name="t">Points t</param>
            <param name="x">Values x(t)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.RationalInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation">
            <summary>
            Third-Degree Spline Interpolation Algorithm.
            </summary>
            <remarks>
            This algorithm supports both differentiation and interation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.#ctor">
            <summary>
            Create a spline interpolation algorithm instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Init(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Initialize the interpolation method with the given spline coefficients.
            </summary>
            <param name="t">Points t (length: N)</param>
            <param name="c">Spline Coefficients (length: 4*(N-1))</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <param name="first">Interpolated first derivative at point t.</param>
            <param name="second">Interpolated second derivative at point t.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Integrate(System.Double)">
            <summary>
            Definite Integrate up to point t.
            </summary>
            <param name="t">Right bound of the integration interval [a,t].</param>
            <returns>Interpolated definite integeral over the interval [a,t].</returns>
            <seealso cref="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.SupportsIntegration"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.SupportsDifferentiation">
            <summary>
            True if the alorithm supports differentiation.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Differentiate(System.Double,System.Double@,System.Double@)"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.SupportsIntegration">
            <summary>
            True if the alorithm supports integration.
            </summary>
            <seealso cref="M:MathNet.Numerics.Interpolation.Algorithms.SplineInterpolation.Integrate(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Interpolation">
            <summary>
            Interpolation Facade.
            </summary>
            <remarks>
            For most cases it is recommended to use the default scheme, see <see cref="M:MathNet.Numerics.Interpolation.Interpolation.Create(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.Create(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a rational pole-free interpolation based on arbitrary points. This is the default interpolation scheme.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreatePolynomial(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a polynomial (neville) interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateRational(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a rational (with poles; Bulirsch &amp; Stoer) interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateLinearSpline(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a linear spline interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateCubicSpline(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Create a cubic spline interpolation based on arbitrary points, with specified boundary conditions.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <param name="leftBoundaryCondition">Condition of the left boundary.</param>
            <param name="leftBoundary">Left boundary value. Ignored in the parabolic case.</param>
            <param name="rightBoundaryCondition">Condition of the right boundary.</param>
            <param name="rightBoundary">Right boundary value. Ignored in the parabolic case.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateNaturalCubicSpline(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a natural cubic spline interpolation based on arbitrary points.
            Natural splines are cubic splines with zero second derivative at the boundaries (i.e. straigth lines).
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateAkimaCubicSpline(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create an akima cubic spline interpolation based on arbitrary points.
            Akima splines are cubic splines which are stable to outliers.
            </summary>
            <param name="points">The sample points t. Supports both lists and arrays.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnEquidistantPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a polynomial interpolation based on equidistant sample points.
            </summary>
            <param name="leftBound">The leftmost (smallest) sample point t.</param>
            <param name="rightBound">The rightmost (biggest) sample point t.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnChebyshevFirstKindPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a polynomial interpolation based on chebyshev (first kind) points, that is, "t(i) = 0.5*(b+a) + 0.5*(b-a)*cos(Pi*(2*i+1)/(2*n))".
            </summary>
            <param name="leftBound">The left (smallest) sample point t bound.</param>
            <param name="rightBound">The right (biggest) sample point t bound.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.GenerateChebyshevFirstKindSamplePoints(System.Double,System.Double,System.Int32)">
            <summary>
            Generate a set of chebyshev points of the first kind in the interval [a,b].
            These are the expected points t for the values v(t) to be provided in <see cref="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnChebyshevFirstKindPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})"/>.
            </summary>
            <param name="a">Left bound of the interval.</param>
            <param name="b">Right bound of the interval.</param>
            <param name="numberOfPoints">Number of sample nodes to generate.</param>
            <returns>Chebyshev points (first kind) in the interval [a,b], i.e. 0.5*(b+a) + 0.5*(b-a)*cos(Pi*(2*i+1)/(2*n))</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnChebyshevSecondKindPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a polynomial interpolation based on chebyshev (second kind) points, that is, "t(i) = 0.5*(b+a) + 0.5*(b-a)*cos(Pi*i/n)".
            </summary>
            <param name="leftBound">The left (smallest) sample point t bound.</param>
            <param name="rightBound">The right (biggest) sample point t bound.</param>
            <param name="values">The sample point values x(t). Supports both lists and arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Interpolation.GenerateChebyshevSecondKindSamplePoints(System.Double,System.Double,System.Int32)">
            <summary>
            Generate a set of chebyshev points of the second kind in the interval [a,b].
            These are the expected points t for the values v(t) to be provided in <see cref="M:MathNet.Numerics.Interpolation.Interpolation.CreateOnChebyshevSecondKindPoints(System.Double,System.Double,System.Collections.Generic.IList{System.Double})"/>.
            </summary>
            <param name="a">Left bound of the interval.</param>
            <param name="b">Right bound of the interval.</param>
            <param name="numberOfPoints">Number of sample nodes to generate.</param>
            <returns>Chebyshev points (second kind) in the interval [a,b], i.e. 0.5*(b+a) + 0.5*(b-a)*cos(Pi*i/n)</returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.SplineBoundaryCondition">
            <summary>
            Left and right boundary conditions.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.Natural">
            <summary>
            Natural Boundary (Zero second derivative).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.ParabolicallyTerminated">
            <summary>
            Parabolically Terminated boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.FirstDerivative">
            <summary>
            Fixed first derivative at the boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.SecondDerivative">
            <summary>
            Fixed second derivative at the boundary.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.ComplexMatrix">
            <summary>
            Complex Matrix.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IMatrix`1">
            <summary>
            Generic Matrix
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IMatrix`1.CopyToArray">
            <summary>
            Copy all elements of this matrix to a rectangular 2D array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IMatrix`1.CopyToJaggedArray">
            <summary>
            Copy all elements of this matrix to a jagged array.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IMatrix`1.RowCount">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IMatrix`1.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IMatrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.
            </summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.ComplexMatrix._data">
            <summary>
            Array for internal storage of elements.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an m-by-n matrix of zeros.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.#ctor(System.Int32,MathNet.Numerics.Complex)">
            <summary>
            Constructs a m-by-m square matrix.
            </summary>
            <param name="m">Size of the square matrix.</param>
            <param name="s">Diagonal value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.#ctor(System.Int32,System.Int32,MathNet.Numerics.Complex)">
            <summary>
            Construct an m-by-n constant matrix.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="s">Fill the matrix with this scalar value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.#ctor(MathNet.Numerics.Complex[][])">
            <summary>
            Constructs a matrix from a jagged 2-D array,
            directly using the provided array as internal data structure.
            </summary>
            <param name="A">Two-dimensional jagged array of complex numbers.</param>
            <exception cref="T:System.ArgumentException">All rows must have the same length.</exception>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.Complex[][])"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.Complex[0:,0:])"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.#ctor(MathNet.Numerics.Complex[],System.Int32)">
            <summary>
            Construct a matrix from a one-dimensional packed array.
            </summary>
            <param name="vals">One-dimensional array of complex numbers, packed by columns (ala Fortran).</param>
            <param name="m">Number of rows.</param>
            <exception cref="T:System.ArgumentException">Array length must be a multiple of m.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.Complex[][])">
            <summary>
            Constructs a matrix from a copy of a 2-D array by deep-copy.
            </summary>
            <param name="A">Two-dimensional array of complex numbers.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.Complex[0:,0:])">
            <summary>
            Constructs a matrix from a copy of a 2-D array by deep-copy.
            </summary>
            <param name="A">Two-dimensional array of complex numbers.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Create(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Construct a matrix from a real matrix by deep-copy.
            </summary>
            <param name="realMatrix">The real matrix to copy from.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CreateFromColumns(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.ComplexVector})">
            <summary>
            Construct a complex matrix from a set of complex column vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CreateFromRows(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.ComplexVector})">
            <summary>
            Construct a complex matrix from a set of complex row vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Identity(System.Int32,System.Int32)">
            <summary>
            Generates the identity matrix.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Diagonal(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},System.Int32,System.Int32)">
            <summary>
            Creates a new diagonal m-by-n matrix based on the diagonal vector.
            </summary>
            <param name="diagonalVector">The values of the matrix diagonal.</param>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Diagonal(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Creates a new square diagonal matrix based on the diagonal vector.
            </summary>
            <param name="diagonalVector">The values of the matrix diagonal.</param>
            <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Ones(System.Int32)">
            <summary>
            Generates an m-by-m matrix filled with 1.
            </summary>
            <param name="m">Number of rows = Number of columns</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Zeros(System.Int32)">
            <summary>
            Generates an m-by-m matrix filled with 0.
            </summary>
            <param name="m">Number of rows = Number of columns</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Random(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Generates matrix with random real and imaginary elements.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="randomDistribution">Continuous Random Distribution or Source</param>
            <returns>An m-by-n matrix with real and imaginary elements distributed according to the provided distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.RandomReal(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Generates matrix with random real and zero imaginary elements.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="realRandomDistribution">Continuous Random Distribution or Source for the real part.</param>
            <returns>An m-by-n matrix with real parts distributed according to the provided distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.RandomPolar(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Generates matrix with random modulus and argument elements.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="modulusRandomDistribution">Continuous Random Distribution or Source for the modulus part (must be non-negative!).</param>
            <param name="argumentRandomDistribution">Continuous Random Distribution or Source for the argument part.</param>
            <returns>An m-by-n matrix with imaginary parts distributed according to the provided distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.RandomUnitCircle(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Generates a matrix of complex numbers on the unit circle with random argument.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="argumentRandomDistribution">Continuous random distribution or source for the complex number arguments.</param>
            <returns>An m-by-n matrix with complex arguments distributed according to the provided distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CopyToArray">
            <summary>
            Copies the internal data structure to a 2-dimensional array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CopyToJaggedArray">
            <summary>
            Copies the internal data structure to a jagged rectangular array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetArray">
            <summary>
            Returns the internal data structure array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Implicit(MathNet.Numerics.LinearAlgebra.ComplexMatrix)~MathNet.Numerics.Complex[][]">
            <summary>Implicit convertion to a <c>Complex[][]</c> array.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Explicit(MathNet.Numerics.LinearAlgebra.ComplexMatrix)~MathNet.Numerics.Complex[]">
            <summary>
            Explicit convertion to a <c>Complex[]</c> array of a single column matrix.
            </summary>
            <param name="m">Exactly one column expected.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Explicit(MathNet.Numerics.LinearAlgebra.ComplexMatrix)~MathNet.Numerics.Complex">
            <summary>
            Excplicit conversion to a <c>Complex</c> scalar of a single column and row (1-by-1) matrix.
            </summary>
            <param name="m">1-by-1 Matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CreateMatrixData(System.Int32,System.Int32)">
            <summary>
            Create the internal matrix data structure for a matrix of the given size.
            Initializing matrices directly on the internal structure may be faster
            than accessing the cells through the matrix class.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CloneMatrixData(MathNet.Numerics.Complex[][])">
            <summary>
            Creates a copy of a given internal matrix data structure.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetRowColumnCount(MathNet.Numerics.Complex[][],System.Int32@,System.Int32@)">
            <summary>
            Tries to find out the row column count of a given internal matrix data structure.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetColumnVector(System.Int32)">
            <summary>
            Copies a specified column of this matrix to a new vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetRowVector(System.Int32)">
            <summary>
            Copies a specified row of this matrix to a new vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SetColumnVector(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},System.Int32)">
            <summary>
            Copies a column vector to a specified column of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SetRowVector(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},System.Int32)">
            <summary>
            Copies a row vector to a specified row of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <returns>A(i0:i1,j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetMatrix(System.Int32[],System.Int32[])">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <returns>A(r(:),c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetMatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Get a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="c">Array of column indices.</param>
            <returns>A(i0:i1,c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Get a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <returns>A(r(:),j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Set a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <param name="X">A(i0:i1,j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SetMatrix(System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Sets a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(r(:),c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SetMatrix(System.Int32[],System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Sets a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <param name="X">A(r(:),j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SetMatrix(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Set a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(i0:i1,c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Norm1">
            <summary>One norm</summary>
            <returns>Maximum column sum.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Add another complex matrix to this complex matrix.
            </summary>
            <param name="b">The other complex matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] + b[i,j]
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Add another real matrix to this complex matrix.
            </summary>
            <param name="b">The other real matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] + b[i,j]
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.Complex)">
            <summary>
            Add a complex scalar to all elements of this complex matrix.
            </summary>
            <param name="b">The complex scalar.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] + b
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            In place addition of another complex matrix to this complex matrix.
            </summary>
            <param name="b">The other complex matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            In place addition of another real matrix to this complex matrix.
            </summary>
            <param name="b">The other real matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.AddInplace(MathNet.Numerics.Complex)">
            <summary>
            In place addition of a complex scalar to all elements of this complex matrix.
            </summary>
            <param name="b">The complex scalar.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Add(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Subtract another complex matrix from this complex matrix.
            </summary>
            <param name="b">The other complex matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] - b[i,j]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Subtract another real matrix from this complex matrix.
            </summary>
            <param name="b">The other real matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] - b[i,j]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.Complex)">
            <summary>
            Subtract a complex scalar from all elements of this complex matrix.
            </summary>
            <param name="b">The complex scalar.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] - b
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            In place subtraction of another complex matrix from this complex matrix.
            </summary>
            <param name="b">The other complex matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            In place subtraction of another real matrix from this complex matrix.
            </summary>
            <param name="b">The other real matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.SubtractInplace(MathNet.Numerics.Complex)">
            <summary>
            In place subtraction of a complex scalar from all elements of this complex matrix.
            </summary>
            <param name="b">The complex scalar.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Subtract(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Negate">
            <summary>
            Negate this complex matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.NegateInplace">
            <summary>
            In place negation of this complex matrix.
            </summary>
            <remarks>
            This method changes this matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Conjugate">
            <summary>
            Conjugate this complex matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ConjugateInplace">
            <summary>
            In place conjugation of this complex matrix.
            </summary>
            <remarks>
            This method changes this matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Complex matrix multiplication.
            </summary>
            <param name="b">The other complex matrix.</param>
            <returns>
            Matrix ret[i,j] = sum(this[i,k] * b[k,j])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Complex matrix multiplication.
            </summary>
            <param name="b">The other real matrix.</param>
            <returns>
            Matrix ret[i,j] = sum(this[i,k] * b[k,j])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.Complex)">
            <summary>
            Scale this complex matrix with a complex scalar.
            </summary>
            <param name="b">The other complex scalar.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * b
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Inplace complex square matrix multiplication.
            </summary>
            <param name="b">The other square complex matrix.</param>
            <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Inplace complex square matrix multiplication.
            </summary>
            <param name="b">The other square real matrix.</param>
            <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyInplace(MathNet.Numerics.Complex)">
            <summary>
            Inplace scale this matrix by a complex scalar.
            </summary>
            <param name="b">The other complex scalar.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Multiply(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyRightColumn(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Multiply this matrix with a right complex column vector.
            </summary>
            <param name="b">The right complex column vector.</param>
            <returns>
            Vector ret[i] = sum(this[i,k] * b[k])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyRightColumn(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Multiply this matrix with a right real column vector.
            </summary>
            <param name="b">The right real column vector.</param>
            <returns>
            Vector ret[i] = sum(this[i,k] * b[k])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Vector)"/>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyLeftDiagonal(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Muliply a diagonal complex matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The left diagonal complex matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyLeftDiagonal(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Muliply a diagonal real matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The left diagonal real matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyLeftDiagonalInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Inplace muliply a complex diagonal matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The left diagonal complex matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyLeftDiagonalInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Inplace muliply a real diagonal matrix with this matrix. This has the same effect
            as scaling the rows of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The left diagonal real matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyRightDiagonal(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Muliply this matrix with a complex diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The right diagonal complex matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[j]
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyRightDiagonal(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Muliply this matrix with a real diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The right diagonal real matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * diagonal[j]
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyRightDiagonalInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Inplace Muliply this matrix with a complex diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The right diagonal complex matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.MultiplyRightDiagonalInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Inplace Muliply this matrix with a real diagonal matrix. This has the same effect
            as scaling the columns of this matrix by the scalar elements of the diagonal.
            </summary>
            <param name="diagonal">The right diagonal real matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Transpose">
            <summary>
            Transpose this complex matrix. The elements are not conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.HermitianTranspose"/> for conjugated transposing.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.TransposeInplace">
            <summary>
            Inplace transpose this square complex matrix. The elements are not conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.HermitianTransposeInplace"/> for conjugated transposing.
            </summary>
            <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.HermitianTranspose">
            <summary>
            Transpose this complex matrix. The elements conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Transpose"/> for non-conjugated transposing.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.HermitianTransposeInplace">
            <summary>
            Inplace transpose this square complex matrix. The elements are conjugated by this method,
            see <see cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Transpose"/> for non-conjugated transposing.
            </summary>
            <remarks>
            This method changes this matrix. Only square matrices are supported.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.TensorMultiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Tensor Product (Kronecker) of this and another matrix.
            </summary>
            <param name="B">The matrix to operate on.</param>
            <returns>
            Kronecker Product of this and the given matrix.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.KroneckerProduct(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Kronecker Product of two matrices.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Element-by-element multiplication of this matrix with another complex matrix, "ret = this .* b".
            </summary>
            <param name="b">The other complex matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * b[i,j]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Element-by-element multiplication of this matrix with another real matrix, "ret = this .* b".
            </summary>
            <param name="b">The other real matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] * b[i,j]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Inplace element-by-element multiplication of this matrix with another complex matrix, "this .*= b".
            </summary>
            <param name="b">The other complex matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Inplace element-by-element multiplication of this matrix with another real matrix, "this .*= b".
            </summary>
            <param name="b">The other real matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Element-by-element division of this matrix with another complex matrix, "ret = this ./ b".
            </summary>
            <param name="b">The other complex matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] / b[i,j]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Element-by-element division of this matrix with another real matrix, "ret = this ./ b".
            </summary>
            <param name="b">The other real matrix.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] / b[i,j]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Inplace element-by-element division of this matrix with another complex matrix, "this ./= b".
            </summary>
            <param name="b">The other complex matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Inplace element-by-element division of this matrix with another real matrix, "this ./= b". 
            </summary>
            <param name="b">The other real matrix.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayPower(MathNet.Numerics.Complex)">
            <summary>
            Element-by-element raise to power, "ret = this .^ exponent".
            </summary>
            <param name="exponent">The exponent to raise to power to.</param>
            <returns>
            Matrix ret[i,j] = this[i,j] ^ exponent
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayPowerInplace(MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayPowerInplace(MathNet.Numerics.Complex)">
            <summary>
            Inplace element-by-element raise to power, "this .^= exponent".
            </summary>
            <param name="exponent">The exponent to raise to power to.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayPower(MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMap(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})">
            <summary>
            Map an arbitrary function to all elements of this matrix.
            </summary>
            <param name="mapping">The element-by-element mapping.</param>
            <returns>
            Matrix ret[i,j] = mapping(this[i,j])
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMapInplace(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMapInplace(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})">
            <summary>
            Inplace map an arbitrary function to all elements of this matrix.
            </summary>
            <param name="mapping">The element-by-element mapping.</param>
            <remarks>
            This method changes this matrix.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ArrayMap(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Subtraction Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Subtraction Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)">
            <summary>
            Subtraction Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Negation Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Multiplication Operator.
            </summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Multiplication Operator.
            </summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.LinearAlgebra.ComplexMatrix)">
            <summary>
            Multiplication of a matrix by a scalar, C = s*A
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.Complex)">
            <summary>
            Multiplication of a matrix by a scalar, C = s*A
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.ComplexVector)">
            <summary>
            Multiply a complex matrix with a complex column vector.
            </summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexMatrix,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Multiply a complex matrix with a real column vector.
            </summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CheckMatchingMatrixDimensions(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex})">
            <summary>
            Check if size(A) == size(B)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.CheckMatchingMatrixDimensions(MathNet.Numerics.LinearAlgebra.IMatrix{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Check if size(A) == size(B)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Clone">
            <summary>
            Returns a deep copy of this instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.System#ICloneable#Clone">
            <summary>
            Creates an exact copy of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ToString">
            <summary>
            Formats this matrix to a human-readable string
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ResetComputations">
            <summary>
            Reset various internal computations.
            Call this method after you made changes directly
            on the the internal double[][] data structure.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexMatrix.RowCount">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexMatrix.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.
            </summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.ComplexVector">
            <summary>
            Complex Vector.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.IVector`1">
            <summary>
            Generic Vector
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.IVector`1.CopyToArray">
            <summary>
            Copy all elements of this vector to an array.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IVector`1.Length">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.IVector`1.Item(System.Int32)">
            <summary>
            Gets or set the element indexed by <c>i</c>
            in the <c>Vector</c>.
            </summary>
            <param name="i">Dimension index.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.#ctor(System.Int32)">
            <summary>
            Constructs an n-dimensional vector of zeros.
            </summary>
            <param name="n">Dimensionality of vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an n-dimensional unit vector for i'th coordinate.
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="i">Coordinate index.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.#ctor(System.Int32,MathNet.Numerics.Complex)">
            <summary>
            Constructs an n-dimensional constant vector.
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="value">Fill the vector with this scalar value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.#ctor(MathNet.Numerics.Complex[])">
            <summary>
            Constructs a vector from a 1-D array, directly using
            the provided array as internal data structure.
            </summary>
            <param name="components">One-dimensional array of doubles.</param>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Create(MathNet.Numerics.Complex[])"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Create(MathNet.Numerics.Complex[])">
            <summary>
            Constructs a vector from a copy of a 1-D array.
            </summary>
            <param name="components">One-dimensional array of doubles.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Create(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs a complex vector from a real and an imaginary vector.
            </summary>
            <param name="realComponents">One-dimensional array of doubles representing the real part of the vector.</param>
            <param name="imagComponents">One-dimensional array of doubles representing the imaginary part of the vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Ones(System.Int32)">
            <summary>
            Generates an n-dimensional vector filled with 1.
            </summary>
            <param name="n">Dimensionality of vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Zeros(System.Int32)">
            <summary>
            Generates an n-dimensional vector filled with 0.
            </summary>
            <param name="n">Dimensionality of vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.BasisVector(System.Int32,System.Int32)">
            <summary>
            Generates an n-dimensional unit vector for i'th coordinate.
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="i">Coordinate index.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Implicit(MathNet.Numerics.LinearAlgebra.ComplexVector)~MathNet.Numerics.Complex[]">
            <summary>
            Returns a reference to the internel data structure.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Implicit(MathNet.Numerics.Complex[])~MathNet.Numerics.LinearAlgebra.ComplexVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CopyToArray">
            <summary>
            Copies the internal data structure to an array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ToColumnMatrix">
            <summary>
            Create a matrix based on this vector in column form (one single column).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ToRowMatrix">
            <summary>
            Create a matrix based on this vector in row form (one single row).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Add another complex vector to this vector.
            </summary>
            <param name="b">The other complex vector.</param>
            <returns>
            Vector ret[i] = this[i] + b[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Add another real vector to this vector.
            </summary>
            <param name="b">The other real vector.</param>
            <returns>
            Vector ret[i] = this[i] + b[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.Complex)">
            <summary>
            Add a complex scalar to all elements of this vector.
            </summary>
            <param name="b">The complex scalar.</param>
            <returns>
            Vector ret[i] = this[i] + b
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            In place addition of a complex vector to this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            In place addition of a real vector to this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.AddInplace(MathNet.Numerics.Complex)">
            <summary>
            In place addition of a complex scalar to all elements of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Add(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Subtract a complex vector from this vector.
            </summary>
            <param name="b">The other complex vector.</param>
            <returns>
            Vector ret[i] = this[i] - b[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Subtract a real vector from this vector.
            </summary>
            <param name="b">The other real vector.</param>
            <returns>
            Vector ret[i] = this[i] - b[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.Complex)">
            <summary>
            Subtract a complex scalar from all elements of this vector.
            </summary>
            <param name="b">The complex scalar.</param>
            <returns>
            Vector ret[i] = this[i] - b
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            In place subtraction of a complex vector from this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            In place subtraction of a real vector from this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.SubtractInplace(MathNet.Numerics.Complex)">
            <summary>
            In place subtraction of a complex scalar from all elements of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Subtract(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Negate">
            <summary>
            Negate this vector.
            </summary>
            <returns>
            Vector ret[i] = -this[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.NegateInplace"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.NegateInplace">
            <summary>
            In place unary minus of the <c>Vector</c>.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Negate"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Conjugate">
            <summary>
            Conjugate this vector.
            </summary>
            <returns>
            Vector ret[i] = real(this[i]) - imag(this[i])
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ConjugateInplace"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ConjugateInplace">
            <summary>
            In place conjugation of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Conjugate"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Multiply(MathNet.Numerics.Complex)">
            <summary>
            Scale this complex vector with a complex scalar.
            </summary>
            <param name="scalar">The scalar to scale with</param>
            <returns>
            Vector ret[i] = this[i] * scalar
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.MultiplyInplace(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.MultiplyInplace(MathNet.Numerics.Complex)">
            <summary>
            Multiplies in place this <c>Vector</c> by a scalar.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Multiply(MathNet.Numerics.Complex)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Scalar product of two vectors.
            </summary>
            <returns>
            Scalar ret = sum(u[i] * v[i])
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Scalar product of two vectors.
            </summary>
            <returns>
            Scalar ret = sum(u[i] * v[i])
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Scalar product of this vector with another complex vector.
            </summary>
            <param name="b">The other complex vector.</param>
            <returns>
            Scalar ret = sum(this[i] * b[i])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Scalar product of this vector with another real vector.
            </summary>
            <param name="b">The other real vector.</param>
            <returns>
            Scalar ret = sum(this[i] * b[i])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.DyadicProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Dyadic Product of two vectors.
            </summary>
            <returns>
            Matrix M[i,j] = u[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.TensorMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.TensorMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Tensor Product (Dyadic) of this and another vector.
            </summary>
            <param name="b">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.DyadicProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CrossProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Cross product of two 3-dimensional vectors.
            </summary>
            <returns>
            Vector ret = (u[2]v[3] - u[3]v[2], u[3]v[1] - u[1]v[3], u[1]v[2] - u[2]v[1]).
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CrossMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CrossMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Cross product of this vector with another vector.
            </summary>
            <param name="b">The other vector.</param>
            <returns>
            Vector ret = (this[2]b[3] - this[3]b[2], this[3]b[1] - this[1]b[3], this[1]b[2] - this[2]b[1]).
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CrossProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Array (element-by-element) product of two vectors.
            </summary>
            <returns>
            Vector ret[i] = u[i] * v[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) product of two vectors.
            </summary>
            <returns>
            Vector ret[i] = u[i] * v[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Array (element-by-element) product of this vector and another vector.
            </summary>
            <returns>
            Vector ret[i] = this[i] * b[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) product of this vector and another vector.
            </summary>
            <returns>
            Vector ret[i] = this[i] * b[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Multiply in place (element-by-element) another vector to this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Multiply in place (element-by-element) another vector to this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayPower(MathNet.Numerics.Complex)">
            <summary>
            Array (element-by-element) raise to power.
            </summary>
            <returns>
            Vector ret[i] = this[i] ^ exponent
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayPowerInplace(MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayPowerInplace(MathNet.Numerics.Complex)">
            <summary>
            In place array (element-by-element) raise to power.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayPower(MathNet.Numerics.Complex)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Array (element-by-element) quotient of two vectors.
            </summary>
            <returns>
            Vector ret[i] = u[i] / v[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) quotient of two vectors.
            </summary>
            <returns>
            Vector ret[i] = u[i] / v[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Array (element-by-element) quotient of this vector and another complex vector.
            </summary>
            <returns>
            Vector ret[i] = this[i] / b[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) quotient of this vector and another real vector.
            </summary>
            <returns>
            Vector ret[i] = this[i] / b[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>
            Divide in place (element-by-element) this vector by another complex vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Divide in place (element-by-element) this vector by another real vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMap(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})">
            <summary>
            Map an arbitrary function to all elements of this vector.
            </summary>
            <returns>
            Vector ret[i] = mapping(this[i])
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMapInplace(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMapInplace(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})">
            <summary>
            In place map an arbitrary function to all elements of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ArrayMap(System.Converter{MathNet.Numerics.Complex,MathNet.Numerics.Complex})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Norm1">
            <summary>
            1-Norm also known as Manhattan Norm or Taxicab Norm.
            </summary>
            <returns>
            Scalar ret = sum(abs(this[i]))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)">
            <summary>
            Addition Operator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Addition Operator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Addition(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)">
            <summary>
            Addition Operator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)">
            <summary>
            Subtraction Operator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Subtraction Operator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)">
            <summary>
            Subtraction Operator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.ComplexVector)">
            <summary>
            Negate a vectors
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.LinearAlgebra.ComplexVector)">
            <summary>
            Scaling a vector by a scalar.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)">
            <summary>
            Scaling a vector by a scalar.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Division(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.Complex)">
            <summary>
            Scaling a vector by the inverse of a scalar.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.ComplexVector)">
            <summary>
            Scalar/dot product of two vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.op_Multiply(MathNet.Numerics.LinearAlgebra.ComplexVector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Scalar/dot product of two vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CheckMatchingVectorDimensions(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex})">
            <summary>Check if size(A) == size(B) *</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.CheckMatchingVectorDimensions(MathNet.Numerics.LinearAlgebra.IVector{MathNet.Numerics.Complex},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>Check if size(A) == size(B) *</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.Clone">
            <summary>Returns a deep copy of this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#ICloneable#Clone">
            <summary>
            Creates an exact copy of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.ToString">
            <summary>
            Formats this vector to a human-readable string
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#IList{MathNet#Numerics#Complex}#IndexOf(MathNet.Numerics.Complex)">
            <summary>
            Index of an element.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#Contains(MathNet.Numerics.Complex)">
            <summary>
            True if the vector contains some element.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#CopyTo(MathNet.Numerics.Complex[],System.Int32)">
            <summary>
            Copy all elements to some array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#IEnumerable{MathNet#Numerics#Complex}#GetEnumerator">
            <summary>
            Get a typed enumerator over all elements.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get a non-typed enumerator over all elements.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#Add(MathNet.Numerics.Complex)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#IList{MathNet#Numerics#Complex}#Insert(System.Int32,MathNet.Numerics.Complex)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#Remove(MathNet.Numerics.Complex)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#IList{MathNet#Numerics#Complex}#RemoveAt(System.Int32)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#Clear">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexVector.Length">
            <summary>
            Gets dimensionality of the vector.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexVector.Item(System.Int32)">
            <summary>
            Gets or sets the element indexed by <c>i</c>
            in the <c>Vector</c>.
            </summary>
            <param name="i">Dimension index.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#Count">
            <summary>
            Length.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.ComplexVector.System#Collections#Generic#ICollection{MathNet#Numerics#Complex}#IsReadOnly">
            <summary>
            False.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Vector">
            <summary>
            Real vector.
            </summary>
            <remarks>
            The class <c>Vector</c> provides the elementary 
            algebraic and conversion operations.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.#ctor(System.Int32)">
            <summary>
            Constructs an n-dimensional vector of zeros.
            </summary>
            <param name="n">Dimensionality of vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an n-dimensional unit vector for i'th coordinate.
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="i">Coordinate index.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs an n-dimensional constant vector.
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="value">Fill the vector with this scalar value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.#ctor(System.Double[])">
            <summary>
            Constructs a vector from a 1-D array, directly using
            the provided array as internal data structure.
            </summary>
            <param name="components">One-dimensional array of doubles.</param>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Create(System.Double[])"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Create(System.Double[])">
            <summary>
            Constructs a vector from a copy of a 1-D array.
            </summary>
            <param name="components">One-dimensional array of doubles.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Random(System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Generates vector with random elements
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="randomDistribution">Continuous Random Distribution or Source</param>
            <returns>
            An n-dimensional vector with random elements distributed according
            to the specified random distribution.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Random(System.Int32)">
            <summary>
            Generates vector with random elements
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <returns>
            An n-dimensional vector with uniformly distributed
            random elements in <c>[0, 1)</c> interval.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Ones(System.Int32)">
            <summary>
            Generates an n-dimensional vector filled with 1.
            </summary>
            <param name="n">Dimensionality of vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Zeros(System.Int32)">
            <summary>
            Generates an n-dimensional vector filled with 0.
            </summary>
            <param name="n">Dimensionality of vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.BasisVector(System.Int32,System.Int32)">
            <summary>
            Generates an n-dimensional unit vector for i'th coordinate.
            </summary>
            <param name="n">Dimensionality of vector.</param>
            <param name="i">Coordinate index.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Implicit(MathNet.Numerics.LinearAlgebra.Vector)~System.Double[]">
            <summary>
            Returns a reference to the internel data structure.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Implicit(System.Double[])~MathNet.Numerics.LinearAlgebra.Vector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.CopyToArray">
            <summary>
            Copies the internal data structure to an array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ToColumnMatrix">
            <summary>
            Create a matrix based on this vector in column form (one single column).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ToRowMatrix">
            <summary>
            Create a matrix based on this vector in row form (one single row).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Add(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Add another vector to this vector.
            </summary>
            <param name="b">The other vector.</param>
            <returns>
            Vector ret[i] = this[i] + b[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Add(System.Double)">
            <summary>
            Add a real scalar to all elements of this vector.
            </summary>
            <param name="b">The real scalar.</param>
            <returns>
            Vector ret[i] = this[i] + b
            </returns>
            <remarks>
            This method has the same effect as the overloaded + operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.AddInplace(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.AddInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            In place addition of a real vector to this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Add(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.AddInplace(System.Double)">
            <summary>
            In place addition of real scalar to all elements of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Add(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Subtract another vector from this vector.
            </summary>
            <param name="b">The other vector.</param>
            <returns>
            Vector ret[i] = this[i] - b[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Subtract(System.Double)">
            <summary>
            Subtract a real scalar from all elements of this vector.
            </summary>
            <param name="b">The real scalar.</param>
            <returns>
            Vector ret[i] = this[i] - b
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.SubtractInplace(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.SubtractInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            In place subtraction of a real vector from this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Subtract(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.SubtractInplace(System.Double)">
            <summary>
            In place subtraction of a real scalar from all elements of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Subtract(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Negate">
            <summary>
            Negate this vector.
            </summary>
            <returns>
            Vector ret[i] = -this[i]
            </returns>
            <remarks>
            This method has the same effect as the overloaded - operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.NegateInplace"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.NegateInplace">
            <summary>
            In place unary minus of this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Negate"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Scale(System.Double)">
            <summary>
            Scale this vector with a scalar.
            </summary>
            <param name="scalar">The scalar to scale with</param>
            <returns>
            Vector ret[i] = this[i] * scalar
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ScaleInplace(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ScaleInplace(System.Double)">
            <summary>
            Multiplies in place this <c>Vector</c> by a scalar.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.Scale(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Scalar product of two vectors.
            </summary>
            <returns>
            Scalar ret = sum(u[i] * v[i])
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ScalarMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Scalar product of this vector with another vector.
            </summary>
            <param name="b">The other vector.</param>
            <returns>
            Scalar ret = sum(this[i] * b[i])
            </returns>
            <remarks>
            This method has the same effect as the overloaded * operator.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ScalarProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.DyadicProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Dyadic Product of two vectors.
            </summary>
            <returns>
            Matrix M[i,j] = u[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.TensorMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.TensorMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Tensor Product (Dyadic) of this and another vector.
            </summary>
            <param name="b">The vector to operate on.</param>
            <returns>
            Matrix M[i,j] = this[i] * v[j].
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.DyadicProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.CrossProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Cross product of two 3-dimensional vectors.
            </summary>
            <returns>
            Vector ret = (u[2]v[3] - u[3]v[2], u[3]v[1] - u[1]v[3], u[1]v[2] - u[2]v[1]).
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.CrossMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.CrossMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Cross product of this vector with another vector.
            </summary>
            <param name="b">The other vector.</param>
            <returns>
            Vector ret = (this[2]b[3] - this[3]b[2], this[3]b[1] - this[1]b[3], this[1]b[2] - this[2]b[1]).
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.CrossProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) product of two vectors.
            </summary>
            <returns>
            Vector ret[i] = u[i] * v[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) product of this vector and another vector.
            </summary>
            <returns>
            Vector ret[i] = this[i] * b[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiplyInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Multiply in place (element-by-element) another vector to this vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayProduct(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) quotient of two vectors.
            </summary>
            <returns>
            Vector ret[i] = u[i] / v[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Array (element-by-element) quotient of this vector and another vector.
            </summary>
            <returns>
            Vector ret[i] = this[i] / b[i]
            </returns>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivideInplace(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Divide in place (element-by-element) this vector by another vector.
            </summary>
            <remarks>
            This method changes this vector.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayQuotient(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Vector.ArrayDivide(MathNet.Numerics.LinearAlgebra.IVector{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Norm">
            <summary>
            Euclidean Norm also known as 2-Norm.
            </summary>
            <returns>
            Scalar ret = sqrt(sum(this[i]^2))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.SquaredNorm">
            <summary>
            Squared Euclidean 2-Norm.
            </summary>
            <returns>
            Scalar ret = sum(this[i]^2)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Norm1">
            <summary>
            1-Norm also known as Manhattan Norm or Taxicab Norm.
            </summary>
            <returns>
            Scalar ret = sum(abs(this[i]))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.NormP(System.Int32)">
            <summary>
            p-Norm.
            </summary>
            <returns>
            Scalar ret = (sum(abs(this[i])^p))^(1/p)
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.NormInf">
            <summary>
            Infinity-Norm.
            </summary>
            <returns>
            Scalar ret = max(abs(this[i]))
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Normalize">
            <summary>
            Normalizes this vector to a unit vector with respect to the Eucliden 2-Norm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(MathNet.Numerics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Addition(System.Double,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Addition Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Subtraction Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Subtraction Operator
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Negate a vectors
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Scaling a vector by a scalar.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Scaling a vector by a scalar.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Division(MathNet.Numerics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Scaling a vector by the inverse of a scalar.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.op_Multiply(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Scalar/dot product of two vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.CheckMatchingVectorDimensions(MathNet.Numerics.LinearAlgebra.IVector{System.Double},MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>Check if size(A) == size(B) *</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.Clone">
            <summary>Returns a deep copy of this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#ICloneable#Clone">
            <summary>
            Creates an exact copy of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.AlmostEqual(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Returns true if two vectors are almost equal (with some given relative accuracy).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.AlmostEqual(MathNet.Numerics.LinearAlgebra.Vector,MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>
            Returns true if two vectors are almost equal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.ToString">
            <summary>
            Formats this vector to a human-readable string
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#IList{System#Double}#IndexOf(System.Double)">
            <summary>
            Index of an element.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#Contains(System.Double)">
            <summary>
            True if the vector contains some element.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#CopyTo(System.Double[],System.Int32)">
            <summary>
            Copy all elements to some array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#IEnumerable{System#Double}#GetEnumerator">
            <summary>
            Get a typed enumerator over all elements.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get a non-typed enumerator over all elements.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#Add(System.Double)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#IList{System#Double}#Insert(System.Int32,System.Double)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#Remove(System.Double)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#IList{System#Double}#RemoveAt(System.Int32)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#Clear">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Vector.Length">
            <summary>
            Gets dimensionality of the vector.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Vector.Item(System.Int32)">
            <summary>
            Gets or sets the element indexed by <c>i</c>
            in the <c>Vector</c>.
            </summary>
            <param name="i">Dimension index.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#Count">
            <summary>
            Length.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Vector.System#Collections#Generic#ICollection{System#Double}#IsReadOnly">
            <summary>
            False.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Sorting">
            <summary>
            Sorting algorithms for single, tuple and triple lists.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sort a list of keys, inplace.
            </summary>
            <param name="keys">List to sort.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Sort a list of keys and items with respect to the keys, inplace.
            </summary>
            <param name="keys">List to sort.</param>
            <param name="items">List to permutate the same way as the key list.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, inplace.
            </summary>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permutate the same way as the key list.</param>
            <param name="items2">Second list to permutate the same way as the key list.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, inplace.
            </summary>
            <param name="keys">List to sort.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys and items with respect to the keys, inplace.
            </summary>
            <param name="keys">List to sort.</param>
            <param name="items">List to permutate the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="M:MathNet.Numerics.Sorting.Sort``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort a list of keys, items1 and items2 with respect to the keys, inplace.
            </summary>
            <param name="keys">List to sort.</param>
            <param name="items1">First list to permutate the same way as the key list.</param>
            <param name="items2">Second list to permutate the same way as the key list.</param>
            <param name="comparer">Comparison, defining the sort order.</param>
        </member>
        <member name="T:MathNet.Numerics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentHistogramContainsNot">
            <summary>
              Looks up a localized string similar to The histogram does not contains the value {0}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentInIntervalXYInclusive">
            <summary>
              Looks up a localized string similar to Value is expected to be between {0} and {1} (including {0} and {1})..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The matrix indices must not be out of range of the given matrix..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixNotRankDeficient">
            <summary>
              Looks up a localized string similar to Matrix must not be rank deficient..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixNotSingular">
            <summary>
              Looks up a localized string similar to Matrix must not be singular..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameColumnDimension">
            <summary>
              Looks up a localized string similar to Matrix column dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameDimensions">
            <summary>
              Looks up a localized string similar to Matrix dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSameRowDimension">
            <summary>
              Looks up a localized string similar to Matrix row dimensions must agree..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleColumn">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleColumnRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one column and row, thus have only one cell..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSingleRow">
            <summary>
              Looks up a localized string similar to Matrix must have exactly one row..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSquare">
            <summary>
              Looks up a localized string similar to Matrix must be square..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSymmetric">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentMatrixSymmetricPositiveDefinite">
            <summary>
              Looks up a localized string similar to Matrix must be symmetric positive definite..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNotInfinityNaN">
            <summary>
              Looks up a localized string similar to Value must neither be infinite nor NaN..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNotNegative">
            <summary>
              Looks up a localized string similar to Value must not be negative (zero is ok)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentNull">
            <summary>
              Looks up a localized string similar to {0} is a null reference (Nothing in Visual Basic)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOutOfRangeGreater">
            <summary>
              Looks up a localized string similar to {0} must be greater than {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentOutOfRangeGreaterEqual">
            <summary>
              Looks up a localized string similar to {0} must be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentParameterSetInvalid">
            <summary>
              Looks up a localized string similar to The chosen parameter set is invalid (probably some value is out of range)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentParseComplexNumber">
            <summary>
              Looks up a localized string similar to The given expression does not represent a complex number..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPositive">
            <summary>
              Looks up a localized string similar to Value must be positive (and not zero)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPowerOfTwo">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentPowerOfTwoEveryDimension">
            <summary>
              Looks up a localized string similar to Size must be a Power of Two in every dimension..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentRangeLessEqual">
            <summary>
              Looks up a localized string similar to The range between {0} and {1} must be less than or equal to {2}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentSingleDimensionArray">
            <summary>
              Looks up a localized string similar to Array must have exactly one dimension (and not be null)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTooLarge">
            <summary>
              Looks up a localized string similar to Value is too large..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTooLargeForIterationLimit">
            <summary>
              Looks up a localized string similar to Value is too large for the current iteration limit..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentTypeMismatch">
            <summary>
              Looks up a localized string similar to Type mismatch..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorLengthsMultipleOf">
            <summary>
              Looks up a localized string similar to Array length must be a multiple of {0}..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorsSameLengths">
            <summary>
              Looks up a localized string similar to All vectors must have the same dimensionality..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.ArgumentVectorThreeDimensional">
            <summary>
              Looks up a localized string similar to The vector must have 3 dimensions..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.FeaturePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This feature is not implemented yet (but is planned)..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidLeftBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Left Boundary Condition..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationAccumulatorEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the accumulator is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationHistogramEmpty">
            <summary>
              Looks up a localized string similar to The operation could not be performed because the histogram is empty..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationHistogramNotEnoughPoints">
            <summary>
              Looks up a localized string similar to Not enough points in the distribution..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidOperationNoSamplesProvided">
            <summary>
              Looks up a localized string similar to No Samples Provided. Preparation Required..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.InvalidRightBoundaryCondition">
            <summary>
              Looks up a localized string similar to Invalid Right Boundary Condition..
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Properties.Resources.SpecialCasePlannedButNotImplementedYet">
            <summary>
              Looks up a localized string similar to This special case is not supported yet (but is planned)..
            </summary>
        </member>
        <member name="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource">
            <summary>
            Represents a Additive Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>
            The <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/> type bases upon the implementation in the 
              <a href="http://www.boost.org/libs/random/index.html">Boost Random Number Library</a>.
            It uses the modulus 2<sup>32</sup> and by default the "lags" 418 and 1279, which can be adjusted through the 
              associated <see cref="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.ShortLag"/> and <see cref="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.LongLag"/> properties. Some popular pairs are presented on 
              <a href="http://en.wikipedia.org/wiki/Lagged_Fibonacci_generator">Wikipedia - Lagged Fibonacci generator</a>.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.RandomSources.RandomSource">
            <summary>
            Declares common functionality for all random number generators.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits for future calls, so the random number generator is only invoked once in every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.RandomSource.Reset">
            <summary>
            Resets the random number generator, so that it produces the same random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.RandomSource.CanReset">
            <summary>
            Gets a value indicating whether the random number generator can be reset, so that it produces the same 
              random number sequence again.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._shortLag">
            <summary>
            Stores the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._longLag">
            <summary>
            Stores the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._x">
            <summary>
            Stores an array of <see cref="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._longLag"/> random numbers
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._i">
            <summary>
            Stores an index for the random number array element that will be accessed next.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._bitBuffer"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.IsValidShortLag(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.ShortLag"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than 0; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.IsValidLongLag(System.Int32)">
            <summary>
            Determines whether the specified value is valid for parameter <see cref="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.LongLag"/>.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if value is greater than <see cref="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.ShortLag"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.ResetGenerator">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/>,
            so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.Fill">
            <summary>
            Fills the array <see cref="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._x"/> with <see cref="F:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource._longLag"/> new unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue"/> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than
              or equal to <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.Reset">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/>,
            so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource"/> can be reset,
            so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.ShortLag">
            <summary>
            Gets or sets the short lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>Call <see cref="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.IsValidShortLag(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.LongLag">
            <summary>
            Gets or sets the long lag of the Lagged Fibonacci pseudo-random number generator.
            </summary>
            <remarks>Call <see cref="M:MathNet.Numerics.RandomSources.AdditiveLaggedFibonacciRandomSource.IsValidLongLag(System.Int32)"/> to determine whether a value is valid and therefor assignable.</remarks>
        </member>
        <member name="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource">
            <summary>
            Represents a Mersenne Twister pseudo-random number generator with period 2^19937-1.
            </summary>
            <remarks>
            The <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> type bases upon information and the implementation presented on the
              <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">Mersenne Twister Home Page</a>.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.N">
            <summary>
            Represents the number of unsigned random numbers generated at one time. This field is constant.
            </summary>
            <remarks>The value of this constant is 624.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.M">
            <summary>
            Represents a constant used for generation of unsigned random numbers. This field is constant.
            </summary>
            <remarks>The value of this constant is 397.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.VectorA">
            <summary>
            Represents the constant vector a. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x9908b0dfU.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.UpperMask">
            <summary>
            Represents the most significant w-r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x80000000.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.LowerMask">
            <summary>
            Represents the least significant r bits. This field is constant.
            </summary>
            <remarks>The value of this constant is 0x7fffffff.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._mt">
            <summary>
            Stores the state vector array.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._mti">
            <summary>
            Stores an index for the state vector array element that will be accessed next.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._seedArray">
            <summary>
            Stores the used seed array.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._bitBuffer"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of numbers used to calculate a starting values for the pseudo-random number sequence.
            If negative numbers are specified, the absolute values of them are used. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="seedArray"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> class, using the specified seed array.
            </summary>
            <param name="seedArray">
            An array of unsigned numbers used to calculate a starting values for the pseudo-random number sequence.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="seedArray"/> is NULL (<see langword="Nothing"/> in Visual Basic).
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.ResetGenerator">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/>,
            so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.ResetBySeedArray">
            <summary>
            Extends resetting of the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> using the <see cref="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource._seedArray"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.GenerateNUInts">
            <summary>
            Generates <see cref="F:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.N"/> unsigned random numbers.
            </summary>
            <remarks>
            Generated random numbers are 32-bit unsigned integers greater than or equal to <see cref="F:System.UInt32.MinValue"/> 
              and less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.Reset">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:MathNet.Numerics.RandomSources.MersenneTwisterRandomSource"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.InterpolationMode">
            <summary>
            Interpolation Characteristics
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.InterpolationMode.ExpectNoPoles">
            <summary>
            Polynomial Interpolation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.InterpolationMode.ExpectPoles">
            <summary>
            Rational Interpolation
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.InterpolationMode.Smooth">
            <summary>
            Cubic Spline Interpolation
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.InterpolationSingleDimension">
            <summary>
            Interpolation portal for the single dimension case.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(MathNet.Numerics.SampleList)">
            <summary>
            Initialize the portal with samples from a sample list.
            </summary>
            <remarks>
            Uses the <see cref="T:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm"/>.
            </remarks>
            <param name="samples">Sample Points.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(System.Double[],System.Double[])">
            <summary>
            Initialize the portal with samples from points (t, x(t)).
            </summary>
            <remarks>
            Uses the <see cref="T:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm"/>.
            </remarks>
            <param name="t">keys t, where x=f(t) or (t,x).</param>
            <param name="x">values x, where x=f(t) or (t,x).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(System.Collections.IDictionary)">
            <summary>
            Initialize the portal with samples from a dictionary.
            </summary>
            <remarks>
            Uses the <see cref="T:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm"/>.
            </remarks>
            <param name="samples">Sample Points.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode)">
            <summary>
            Initialize the portal with samples from a sample list and selects an algorithm that fits the chosen interpolation mode.
            </summary>
            <param name="samples">Sample Points.</param>
            <param name="mode">Interpolation Mode.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(System.Double[],System.Double[],MathNet.Numerics.Interpolation.InterpolationMode)">
            <summary>
            Initialize the portal with samples from points (t, x(t)) and selects an algorithm that fits the chosen interpolation mode.
            </summary>
            <param name="t">keys t, where x=f(t) or (t,x).</param>
            <param name="x">values x, where x=f(t) or (t,x).</param>
            <param name="mode">Interpolation Mode.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.InterpolationMode,System.Int32)">
            <summary>
            Initialize the portal with samples from a sample list and selects an algorithm that fits the chosen interpolation mode with the given order.
            </summary>
            <param name="samples">Sample Points.</param>
            <param name="mode">Interpolation Mode.</param>
            <param name="maximumOrder">Maximum Interpolation Order.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(System.Double[],System.Double[],MathNet.Numerics.Interpolation.InterpolationMode,System.Int32)">
            <summary>
            Initialize the portal with samples from points (t, x(t)) and selects an algorithm that fits the chosen interpolation mode with the given order.
            </summary>
            <param name="t">keys t, where x=f(t) or (t,x).</param>
            <param name="x">values x, where x=f(t) or (t,x).</param>
            <param name="mode">Interpolation Mode.</param>
            <param name="maximumOrder">Maximum Interpolation Order.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(MathNet.Numerics.SampleList,MathNet.Numerics.Interpolation.IInterpolationAlgorithm)">
            <summary>
            Initialize the portal with samples from a sample list and uses the specified algorithm.
            </summary>
            <param name="samples">Sample Points.</param>
            <param name="algorithm">Interpolation Algorithm.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.#ctor(System.Double[],System.Double[],MathNet.Numerics.Interpolation.IInterpolationAlgorithm)">
            <summary>
            Initialize the portal with samples from points (t, x(t)) and uses the specified algorithm.
            </summary>
            <param name="t">keys t, where x=f(t) or (t,x).</param>
            <param name="x">values x, where x=f(t) or (t,x).</param>
            <param name="algorithm">Interpolation Algorithm.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.SelectAlgorithm(MathNet.Numerics.Interpolation.InterpolationMode)">
            <summary>
            Override this method to select custom interpolation algorithms.
            </summary>
            <param name="mode">Interpolation Mode.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.Evaluate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.InterpolationSingleDimension.Evaluate(System.Double,System.Double@)">
            <summary>
            Interpolate at point t and return the estimated error as a parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.InterpolationSingleDimension.SupportErrorEstimation">
            <summary>
            True if the selected algorithm supports error estimation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.IInterpolationAlgorithm">
            <summary>
            Interpolation algorithm
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.Prepare(MathNet.Numerics.SampleList)">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.Extrapolate(System.Double)">
            <summary>
            Extrapolate at point t.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.Interpolate(System.Double,System.Double@)">
            <summary>
            Interpolate at point t and return the estimated error as error-parameter.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.MaximumOrder">
            <summary>
            Maximum interpolation order.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.EffectiveOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.EffectiveOrder">
            <summary>
            Effective interpolation order.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.MaximumOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolationAlgorithm.SupportErrorEstimation">
            <summary>
            True if the alorithm supports error estimation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm">
            <summary>
            Lagrange Polynomial Interpolation using Neville's Algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.#ctor">
            <summary>
            Create a polynomial interpolation algorithm with full order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.#ctor(System.Int32)">
            <summary>
            Create a polynomial interpolation algorithm with the given maximum order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.Prepare(MathNet.Numerics.SampleList)">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.Interpolate(System.Double,System.Double@)">
            <summary>
            Interpolate at point t and return the estimated error as error-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.Extrapolate(System.Double)">
            <summary>
            Extrapolate at point t.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.MaximumOrder">
            <summary>
            The maxium interpolation order.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.EffectiveOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.EffectiveOrder">
            <summary>
            The interpolation order that is effectively used.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.MaximumOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.PolynomialInterpolationAlgorithm.SupportErrorEstimation">
            <summary>
            True if the alorithm supports error estimation.
            </summary>
            <remarks>
            Always true for this algorithm.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm">
            <summary>
            Lagrange Rational Interpolation using Bulirsch &amp; Stoer's Algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.#ctor">
            <summary>
            Create a rational interpolation algorithm with full order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.#ctor(System.Int32)">
            <summary>
            Create a rational interpolation algorithm with the given order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.Prepare(MathNet.Numerics.SampleList)">
            <summary>
            Precompute/optimize the algoritm for the given sample set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.Interpolate(System.Double,System.Double@)">
            <summary>
            Interpolate at point t and return the estimated error as error-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.Extrapolate(System.Double)">
            <summary>
            Extrapolate at point t.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.MaximumOrder">
            <summary>
            The maxium interpolation order.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.EffectiveOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.EffectiveOrder">
            <summary>
            The interpolation order that is effectively used.
            </summary>
            <seealso cref="P:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.MaximumOrder"/>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.RationalInterpolationAlgorithm.SupportErrorEstimation">
            <summary>
            True if the alorithm supports error estimation.
            </summary>
            <remarks>
            Always true for this algorithm.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.IRealFunction">
            <summary>
            The interface <c>IRealFunction</c> defines an interface
            of real valued function with one real argument.
            </summary>
            <remarks>
            This interface will typically be implemented for
            distributions. See <see cref="N:MathNet.Numerics.Distributions"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.IRealFunction.ValueOf(System.Double)">
            <summary>Gets the function value associated the provided
            <c>input</c> value.</summary>
            <remarks>The semantic associated to this interface is
            <i>deterministic function</i> (the same input should
            lead to the same returned value).</remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition">
            <summary>Cholesky Decomposition.</summary>
            <remarks>
            For a symmetric, positive definite matrix A, the Cholesky decomposition
            is an lower triangular matrix L so that A = L*L'.
            If the matrix is not symmetric or positive definite, the constructor
            returns a partial decomposition and sets an internal flag that may
            be queried by the <see cref="P:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.IsSPD"/> property.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition._l">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition._isSymmetricPositiveDefinite">
            <summary>Symmetric and positive definite flag.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Cholesky algorithm for symmetric and positive definite matrix.</summary>
            <param name="m">Square, symmetric matrix.</param>
            <returns>Structure to access L and isspd flag.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.GetL">
            <summary>Return triangular factor.</summary>
            <returns>L</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Vector)">
            <summary>Solve A*x = b</summary>
            <param name="b">A Vector with a dimension as high as the number of rows of A.</param>
            <returns>x so that L*L'*x = b</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is not symmetric positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*L'*X = B</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is not symmetric positive definite.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.IsSPD">
            <summary>Is the matrix symmetric and positive definite?</summary>
            <returns><c>true</c> if A is symmetric and positive definite.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.CholeskyDecomposition.TriangularFactor">
            <summary>
            Decomposition Triangular Factor Matrix (L).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V.Multiply(D.Multiply(V.Transpose())) and 
            V.Multiply(V.Transpose()) equals the identity matrix.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.cond().
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.n">
            <summary>Row and column dimension (square matrix).</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.isSymmetric">
            <summary>Symmetry flag.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.d">
            <summary>Arrays for internal storage of eigenvalues.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.e">
            <summary>Arrays for internal storage of eigenvalues.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.V">
            <summary>Array for internal storage of eigenvectors.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.H">
            <summary>Array for internal storage of nonsymmetric Hessenberg form.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Check for symmetry, then construct the eigenvalue decomposition
            </summary>
            <remarks>Provides access to D and V</remarks>
            <param name="Arg">Square matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructs the eigenvalue decomposition from a symmetrical, 
            tridiagonal matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.SymmetricTridiagonalize">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.SymmetricDiagonalize">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.NonsymmetricReduceToHessenberg">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.NonsymmetricReduceHessenberToRealSchur">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.cdiv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Complex scalar division.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.EigenValues">
            <summary>
            Gets the eigenvalues.
            </summary>
            <returns>diag(D)</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.RealEigenvalues">
            <summary>
            Gets the real part of the eigenvalues.
            </summary>
            <returns>real(diag(D))</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.ImagEigenvalues">
            <summary>
            Gets the imaginary part of the eigenvalues.
            </summary>
            <returns>imag(diag(D))</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.BlockDiagonal">
            <summary>
            Gets the block diagonal eigenvalue matrix
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.EigenvalueDecomposition.EigenVectors">
            <summary>
            Returns the eigenvector matrix
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.LUDecomposition">
            <summary>
            LU Decomposition.
            </summary>
            <remarks>
            For an m-by-n matrix A with m >= n, the LU decomposition is an m-by-n
            unit lower triangular matrix L, an n-by-n upper triangular matrix U,
            and a permutation vector pivot of length m so that A(piv,:) = L*U.
            <c> If m &lt; n, then L is m-by-m and U is m-by-n. </c>
            The LU decomposition with pivoting always exists, even if the matrix is
            singular, so the constructor will never fail.  The primary use of the
            LU decomposition is in the solution of square systems of simultaneous
            linear equations.  This will fail if IsNonSingular() returns false.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.LUDecomposition.LU">
            <summary>
            Array for internal storage of decomposition.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.LUDecomposition.pivsign">
            <summary>
            Pivot sign.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.LUDecomposition.piv">
            <summary>
            Internal storage of pivot vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.LUDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            LU Decomposition
            </summary>
            <param name="A">Rectangular matrix</param>
            <returns>Structure to access L, U and piv.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.LUDecomposition.Determinant">
            <summary>
            Determinant
            </summary>
            <returns>det(A)</returns>
            <exception cref="T:System.ArgumentException">Matrix must be square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.LUDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Solve A*X = B
            </summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*U*X = B(piv,:)</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException">Matrix is singular.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.IsNonSingular">
            <summary>
            Indicates whether the matrix is nonsingular.
            </summary>
            <returns><c>true</c> if U, and hence A, is nonsingular.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.L">
            <summary>
            Returns the lower triangular factor.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.U">
            <summary>
            Returns the upper triangular factor.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.Pivot">
            <summary>
            Returns the integer pivot permutation vector.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.PivotVector">
            <summary>
            Returns pivot permutation vector.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.PermutationMatrix">
            <summary>
            Returns the permutation matrix P, such that L*U = P*X.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.LUDecomposition.DoublePivot">
            <summary>
            Returns pivot permutation vector as a one-dimensional double array.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Matrix">
            <summary>
            Real matrix.
            </summary>
            <remarks>
            The class <c>Matrix</c> provides the elementary operations
            on matrices (addition, multiplication, inversion, transposition, ...).
            Helpers to handle sub-matrices are also provided.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Matrix._data">
            <summary>
            Array for internal storage of elements.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an m-by-n matrix of zeros.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a m-by-m square matrix.
            </summary>
            <param name="m">Size of the square matrix.</param>
            <param name="s">Diagonal value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Construct an m-by-n constant matrix.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="s">Fill the matrix with this scalar value.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Double[][])">
            <summary>
            Constructs a matrix from a jagged 2-D array,
            directly using the provided array as internal data structure.
            </summary>
            <param name="A">Two-dimensional jagged array of doubles.</param>
            <exception cref="T:System.ArgumentException">All rows must have the same length.</exception>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[][])"/>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[0:,0:])"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Constructs a matrix from a 2-D array by deep-copying
            the provided array to the internal data structure.
            </summary>
            <param name="A">Two-dimensional array of doubles.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.#ctor(System.Double[],System.Int32)">
            <summary>
            Construct a matrix from a one-dimensional packed array
            </summary>
            <param name="vals">One-dimensional array of doubles, packed by columns (ala Fortran).</param>
            <param name="m">Number of rows.</param>
            <exception cref="T:System.ArgumentException">Array length must be a multiple of m.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[][])">
            <summary>
            Constructs a matrix from a copy of a 2-D array by deep-copy.
            </summary>
            <param name="A">Two-dimensional array of doubles.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Create(System.Double[0:,0:])">
            <summary>
            Constructs a matrix from a copy of a 2-D array by deep-copy.
            </summary>
            <param name="A">Two-dimensional array of doubles.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CreateFromColumns(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.Vector})">
            <summary>
            Construct a complex matrix from a set of real column vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CreateFromRows(System.Collections.Generic.IList{MathNet.Numerics.LinearAlgebra.Vector})">
            <summary>
            Construct a complex matrix from a set of real row vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Identity(System.Int32,System.Int32)">
            <summary>
            Generates identity matrix
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Ones(System.Int32)">
            <summary>
            Generates an m-by-m matrix filled with 1.
            </summary>
            <param name="m">Number of rows = Number of columns</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Zeros(System.Int32)">
            <summary>
            Generates an m-by-m matrix filled with 0.
            </summary>
            <param name="m">Number of rows = Number of columns</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Diagonal(MathNet.Numerics.LinearAlgebra.IVector{System.Double},System.Int32,System.Int32)">
            <summary>
            Creates a new diagonal m-by-n matrix based on the diagonal vector.
            </summary>
            <param name="diagonalVector">The values of the matrix diagonal.</param>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Diagonal(MathNet.Numerics.LinearAlgebra.IVector{System.Double})">
            <summary>
            Creates a new square diagonal matrix based on the diagonal vector.
            </summary>
            <param name="diagonalVector">The values of the matrix diagonal.</param>
            <returns>
            An m-by-n matrix with the values from the diagonal vector on the diagonal and zeros elsewhere.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Random(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousGenerator)">
            <summary>
            Generates matrix with random elements.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <param name="randomDistribution">Continuous Random Distribution or Source</param>
            <returns>An m-by-n matrix with elements distributed according to the provided distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Random(System.Int32,System.Int32)">
            <summary>
            Generates matrix with standard-distributed random elements.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
            <returns>An m-by-n matrix with uniformly distributed
            random elements in <c>[0, 1)</c> interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CopyToArray">
            <summary>
            Copies the internal data structure to a 2-dimensional array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CopyToJaggedArray">
            <summary>
            Copies the internal data structure to a jagged rectangular array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetArray">
            <summary>
            Returns the internal data structure array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix)~System.Double[0:,0:]">
            <summary>Implicit convertion to a <c>double[,]</c> array.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Implicit(MathNet.Numerics.LinearAlgebra.Matrix)~System.Double[][]">
            <summary>Implicit convertion to a <c>double[][]</c> array.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix)~System.Double[]">
            <summary>
            Explicit convertion to a <c>double[]</c> array of a single column matrix.
            </summary>
            <param name="m">Exactly one column expected.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Explicit(MathNet.Numerics.LinearAlgebra.Matrix)~System.Double">
            <summary>
            Excplicit conversion to a <c>double</c> scalar of a single column and row (1-by-1) matrix.
            </summary>
            <param name="m">1-by-1 Matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CreateMatrixData(System.Int32,System.Int32)">
            <summary>
            Create the internal matrix data structure for a matrix of the given size.
            Initializing matrices directly on the internal structure may be faster
            than accessing the cells through the matrix class.
            </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of columns.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CloneMatrixData(System.Double[][])">
            <summary>
            Creates a copy of a given internal matrix data structure.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetRowColumnCount(System.Double[][],System.Int32@,System.Int32@)">
            <summary>
            Tries to find out the row column count of a given internal matrix data structure.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetColumnVector(System.Int32)">
            <summary>
            Copies a specified column of this matrix to a new vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetRowVector(System.Int32)">
            <summary>
            Copies a specified row of this matrix to a new vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetColumnVector(MathNet.Numerics.LinearAlgebra.IVector{System.Double},System.Int32)">
            <summary>
            Copies a column vector to a specified column of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetRowVector(MathNet.Numerics.LinearAlgebra.IVector{System.Double},System.Int32)">
            <summary>
            Copies a row vector to a specified row of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <returns>A(i0:i1,j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32[],System.Int32[])">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <returns>A(r(:),c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Get a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="c">Array of column indices.</param>
            <returns>A(i0:i1,c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Get a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <returns>A(r(:),j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Set a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <param name="X">A(i0:i1,j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32[],System.Int32[],MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Sets a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(r(:),c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32[],System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Sets a submatrix.
            </summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">First column index.</param>
            <param name="j1">Last column index (inclusive).</param>
            <param name="X">A(r(:),j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Set a submatrix.
            </summary>
            <param name="i0">First row index.</param>
            <param name="i1">Last row index (inclusive).</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(i0:i1,c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Norm1">
            <summary>One norm</summary>
            <returns>Maximum column sum.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Norm2">
            <summary>Two norm</summary>
            <returns>Maximum singular value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.NormInf">
            <summary>Infinity norm</summary>
            <returns>Maximum row sum.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.NormF">
            <summary>Frobenius norm</summary>
            <returns>Sqrt of sum of squares of all elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Add(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            In place addition of <c>m</c> to this <c>Matrix</c>.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Multiply(System.Double)">
            <summary>
            Multiplies in place this <c>Matrix</c> by a scalar.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Multiply(System.Double[])">
            <summary>
            In place linear algebraic matrix multiplication, D * A where
            D is the diagonal matrix.
            </summary>
            <param name="diagonal">Diagonal values of D.</param>
            <exception cref="T:System.ArgumentNullException"><c>diagonal</c> must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Multiply(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Linear algebraic matrix multiplication, A * B
            </summary>
            <exception cref="T:System.ArgumentNullException">B must not be null.</exception>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Subtract(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            In place subtraction of <c>m</c> to this <c>Matrix</c>.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.UnaryMinus">
            <summary>
            In place unary minus of the <c>Matrix</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose">
            <summary>In place transposition of this <c>Matrix</c>.</summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
            <remarks>
            In case of non-quadratic matrices, this operation replaces the
            internal data structure. Hence, if you hold a reference to it
            for faster access, you'll need to get a new reference to it
            using <see cref="M:MathNet.Numerics.LinearAlgebra.Matrix.GetArray"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Transpose(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>Gets the transposition of the provided <c>Matrix</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.KroneckerProduct(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Kronecker Product of two matrices.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.TensorMultiply(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Tensor Product (Kronecker) of this and another matrix.</summary>
            <param name="B">The matrix to operate on.</param>
            <returns>Kronecker Product of this and the given matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            In place element-by-element multiplication, <c>A .*= M</c>.
            </summary>
            <remarks>
            This instance and <c>m</c> must have the same dimensions.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Element-by-element multiplication, <c>result = M1 .* M2</c>.
            </summary>
            <remarks>
            <c>m1</c> and <c>m2</c> must have the same dimensions.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMultiply(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            In place element-by-element right division, <c>A ./= M</c>.
            </summary>
            <remarks>
            This instance and <c>m</c> must have the same dimensions.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>
            Element-by-element right division, <c>result = M1 ./ M2</c>.
            </summary>
            <remarks>
            <c>m1</c> and <c>m2</c> must have the same dimensions.
            </remarks>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayDivide(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayPower(System.Double)">
            <summary>
            In place element-by-element raise to power, <c>A[i,j] = A[i,j]^exponent</c>.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayPower(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayPower(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},System.Double)">
            <summary>
            Element-by-element raise to power, <c>result[i,j] = M[i,j]^exponent</c>.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayPower(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMap(System.Converter{System.Double,System.Double})">
            <summary>
            In place element-by-element mapping of an arbitrary function, <c>A[i,j] = mapping(A[i,j])</c>.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMap(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},System.Converter{System.Double,System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMap(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},System.Converter{System.Double,System.Double})">
            <summary>
            Element-by-element mapping of an arbitrary function, <c>result[i,j] = mapping(M[i,j])</c>.
            </summary>
            <seealso cref="M:MathNet.Numerics.LinearAlgebra.Matrix.ArrayMap(System.Converter{System.Double,System.Double})"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.LUD">
            <summary>
            LU Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.LUDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.QRD">
            <summary>
            QR Decomposition
            </summary>
            <returns>QRDecomposition</returns>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.QRDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.chol">
            <summary>
            Cholesky Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.CholeskyDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SVD">
            <summary>
            Singular Value Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.SingularValueDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Eigen">
            <summary>
            Eigenvalue Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenvalueDecomposition"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B against a Least Square (L2) criterion.</summary>
            <param name="B">right hand side</param>
            <returns>solution if A is square, least squares solution otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Matrix rank is deficient.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SolveRobust(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B against a Least Absolute Deviation (L1) criterion.</summary>
            <param name="B">right hand side</param>
            <returns>The implementation relies on the IRLS (iterated Re-weighted Least Square) algorithm.</returns>
            <exception cref="T:System.InvalidOperationException">Matrix rank is deficient.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.SolveTranspose(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Solve X*A = B, which is also A'*X' = B'</summary>
            <param name="B">right hand side</param>
            <returns>solution if A is square, least squares solution otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Inverse">
            <summary>Matrix inverse or pseudoinverse.</summary>
            <returns> inverse(A) if A is square, pseudoinverse otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Determinant">
            <summary>Matrix determinant</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Rank">
            <summary>Matrix rank</summary>
            <returns>effective numerical rank, obtained from SVD.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Condition">
            <summary>Matrix condition (2 norm)</summary>
            <returns>ratio of largest to smallest singular value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Trace">
            <summary>Matrix trace.</summary>
            <returns>sum of the diagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Addition(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Addition of matrices</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Subtraction of matrices</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Negation of a matrix</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Linear algebraic matrix multiplication.</summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Multiplication of a matrix by a scalar, C = s*A</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Matrix,System.Double)">
            <summary>Multiplication of a matrix by a scalar, C = s*A</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.CheckMatchingMatrixDimensions(MathNet.Numerics.LinearAlgebra.IMatrix{System.Double},MathNet.Numerics.LinearAlgebra.IMatrix{System.Double})">
            <summary>Check if size(A) == size(B) *</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.Clone">
            <summary>Returns a deep copy of this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.System#ICloneable#Clone">
            <summary>
            Creates an exact copy of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.AlmostEqual(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Returns true if two matrices are almost equal (with some given relative accuracy).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.AlmostEqual(MathNet.Numerics.LinearAlgebra.Matrix,MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Returns true if two matrices are almost equal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ToString">
            <summary>
            Formats this matrix to a human-readable string
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Matrix.ResetComputations">
            <summary>
            Reset various internal computations.
            Call this method after you made changes directly
            on the the internal double[][] data structure.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.RowCount">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.
            </summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.LUDecomposition">
            <summary>
            LU Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.LUDecomposition"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.QRDecomposition">
            <summary>
            QR Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.QRDecomposition"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.CholeskyDecomposition">
            <summary>
            Cholesky Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.CholeskyDecomposition"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.SingularValueDecomposition">
            <summary>
            Singular Value Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.SingularValueDecomposition"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenvalueDecomposition">
            <summary>
            Eigenvalue Decomposition
            </summary>
            <seealso cref="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenvalueDecomposition"/>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenValues">
            <summary>
            Gets the complex eigen values of this matrix.
            </summary>
            <remarks>
            The eigenvalue decomposition is cached internally..
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Matrix.EigenVectors">
            <summary>
            Gets the complex eigen vectors of this matrix.
            </summary>
            <remarks>
            The eigenvalue decomposition is cached internally.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.QRDecomposition">
            <summary>
            QR Decomposition.
            </summary>
            <remarks>
            For an m-by-n matrix A with m >= n, the QR decomposition is an m-by-n
            orthogonal matrix Q and an n-by-n upper triangular matrix R so that
            A = Q*R.<br/>
            
            The QR decomposition always exists, even if the matrix does not have
            full rank, so the constructor will never fail.  The primary use of the
            QR decomposition is in the least squares solution of non-square systems
            of simultaneous linear equations.  This will fail if <c>IsFullRank()</c>
            returns false.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.QRDecomposition.QR">
            <summary>
            Array for internal storage of decomposition.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.QRDecomposition.Rdiag">
            <summary>
            Array for internal storage of diagonal of R.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.QRDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            QR Decomposition, computed by Householder reflections.
            </summary>
            <remarks>Provides access to R, the Householder vectors and computes Q.</remarks>
            <param name="A">Rectangular matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.QRDecomposition.Solve(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>
            Least squares solution of A*X = B.
            </summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X that minimizes the two norm of Q*R*X-B.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.SystemException"> Matrix is rank deficient.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.m">
            <summary>
            Row dimensions.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.n">
            <summary>
            Column dimensions.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.FullRank">
            <summary>
            Indicates whether the matrix is full rank.
            </summary>
            <returns><c>true</c> if R, and hence A, has full rank.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.IsFullRank">
            <summary>
            Indicates whether the matrix is full rank.
            </summary>
            <returns><c>true</c> if R, and hence A, has full rank.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.H">
            <summary>
            Gets the Householder vectors.
            </summary>
            <returns>Lower trapezoidal matrix whose columns define the reflections.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.R">
            <summary>
            Gets the upper triangular factor
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.QRDecomposition.Q">
            <summary>
            Gets the (economy-sized) orthogonal factor.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition">
             <summary>Singular Value Decomposition.</summary>
             <remarks>
             <p>For an m-by-n matrix A with m >= n, the singular value decomposition 
             is an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
             an n-by-n orthogonal matrix V so that A = U*S*V'.</p>
            
             <p>The singular values, sigma[k] = S[k, k], are ordered so that
             sigma[0] >= sigma[1] >= ... >= sigma[n-1].</p>
             
             <p>The singular value decomposition always exists, so the constructor will
             never fail.  The matrix condition number and the effective numerical
             rank can be computed from this decomposition.</p>
             </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition._singular">
            <summary>Array for internal storage of singular values.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.transpose">
            <summary>Indicates whether all the results provided by the
            method or properties should be transposed.</summary>
            <remarks>
            (vermorel) The initial implementation was assuming that
            m &gt;= n, but in fact, it is easy to handle the case m &lt; n
            by transposing all the results.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.#ctor(MathNet.Numerics.LinearAlgebra.Matrix)">
            <summary>Construct the singular value decomposition.</summary>
            <remarks>Provides access to U, S and V.</remarks>
            <param name="Arg">Rectangular matrix</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.Norm2">
            <summary>Two norm.</summary>
            <returns>max(S)</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.Condition">
            <summary>Two norm condition number.</summary>
            <returns>max(S)/min(S)</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.Rank">
            <summary>Effective numerical matrix rank - Number of nonnegligible singular values.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.SingularValues">
            <summary>Gets the one-dimensional array of singular values.</summary>
            <returns>diagonal of S.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.S">
            <summary>Get the diagonal matrix of singular values.</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.LeftSingularVectors">
            <summary>Gets the left singular vectors (U matrix).</summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.SingularValueDecomposition.RightSingularVectors">
            <summary>Gets the right singular vectors (V matrix).</summary>
        </member>
        <member name="T:MathNet.Numerics.Natural">
            <summary>
            [STUB] The mathematical set of natural numbers (including zero), supporting an arbitrary number of digits.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Normalize">
            <summary>
            Normalizes the bound to get rid of leading zeros.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.ExtendCapacity(System.UInt32)">
            <summary>
            Resizes the coefficient array if required.
            </summary>
            <param name="requiredBound">The bound that has to be supported.</param>
        </member>
        <member name="M:MathNet.Numerics.Natural.From(System.UInt64)">
            <summary>
            Create a natural number from an unsigned long integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.From(System.UInt32)">
            <summary>
            Create a natural number from an unsigned integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_Addition(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Add a natural number to a natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Add(MathNet.Numerics.Natural)">
            <summary>
            Add a natural number to this natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Add(MathNet.Numerics.Natural,System.UInt32)">
            <summary>
            Add an unsigned integer to this natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_Subtraction(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Subtract a natural number from a natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Subtract(MathNet.Numerics.Natural)">
            <summary>
            Subtract a natural number from this natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Subtract(MathNet.Numerics.Natural,System.Boolean@)">
            <summary>
            Subtract a natural number from this number, and returns the underfow state with the <c>underflow</c>-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Subtract(MathNet.Numerics.Natural,System.UInt32,System.Boolean@)">
            <summary>
            Subtract a natural number with a carry-over unsigned integer from this number, and returns the underfow state with the <c>underflow</c>-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.ShiftUp(System.UInt32)">
            <summary>
            Multiplies this number with the <seealso cref="P:MathNet.Numerics.Natural.Radix"/> to the power of the given exponent (fast shifting operation)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.ShiftDown(System.UInt32)">
            <summary>
            Divides this number by the <seealso cref="P:MathNet.Numerics.Natural.Radix"/> to the power of the given exponent (fast shifting operation)
            </summary>
            <param name="exponent">The exponent to raise the power to.</param>
        </member>
        <member name="M:MathNet.Numerics.Natural.Restrict(System.UInt32)">
            <summary>
            Set all coefficients of exponents higher than or equal to the given exponent to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_Multiply(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Multiply a natural number with another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Multiply(System.UInt32)">
            <summary>
            Stretch this natural number by an integer factor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Multiply(MathNet.Numerics.Natural)">
            <summary>
            Multiply this natural number with another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.MultiplySmall(MathNet.Numerics.Natural)">
            <summary>
            Multiplies two small naturals with the school book algorithm; O(n^2)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.MultiplyLarge(MathNet.Numerics.Natural)">
            <summary>
            Multiplies two large naturals with the karatsuba algorithm; O(n^1.59).
            Could be extended with FFT based algorithms by Schönhage/Strassen in future versions; O(nlognloglogn).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Equals(MathNet.Numerics.Natural)">
            <summary>
            Checks whether this natural number is equal to another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.CompareTo(MathNet.Numerics.Natural)">
            <summary>
            Compares this natural number with another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_LessThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Check whether a natural number is smaller than another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_GreaterThan(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Check whether a natural number is bigger than another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_LessThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Check whether a natural number is smaller than or equal to another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.op_GreaterThanOrEqual(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Check whether a natural number is bigger than or equal to another natural number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Min(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Returns the smaller of two natural numbers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Natural.Max(MathNet.Numerics.Natural,MathNet.Numerics.Natural)">
            <summary>
            Returns the bigger of two natural numbers.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Natural.Degree">
            <summary>
            The biggest <seealso cref="P:MathNet.Numerics.Natural.Radix"/> exponent with a non-zero coefficient.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Natural.Radix">
            <summary>
            The number system/base of this number.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Natural.Zero">
            <summary>
            Natural number representing zero.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Natural.One">
            <summary>
            Natural number representing one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Natural.Two">
            <summary>
            Natural number representing two.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Natural.IsZero">
            <summary>
            True if this natural number represents zero.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Number">
            <summary>
            Helper functions for dealing with floating point numbers.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Number.SmallestNumberGreaterThanZero">
            <summary>2^(-1074)</summary>
        </member>
        <member name="F:MathNet.Numerics.Number.RelativeAccuracy">
            <summary>2^(-53)</summary>
        </member>
        <member name="F:MathNet.Numerics.Number.PositiveRelativeAccuracy">
            <summary>2^(-52)</summary>
        </member>
        <member name="F:MathNet.Numerics.Number.DefaultRelativeAccuracy">
            <summary>10 * 2^(-52)</summary>
        </member>
        <member name="M:MathNet.Numerics.Number.EpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <returns>Relative Epsilon (positive double or NaN).</returns>
            <remarks>Evaluates the <b>negative</b> epsilon. The more common positive epsilon is equal to two times this negative epsilon.</remarks>
            <seealso cref="M:MathNet.Numerics.Number.PositiveEpsilonOf(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Number.PositiveEpsilonOf(System.Double)">
            <summary>
            Evaluates the minimum distance to the next distinguishable number near the argument value.
            </summary>
            <returns>Relative Epsilon (positive double or NaN)</returns>
            <remarks>Evaluates the <b>positive</b> epsilon. See also <see cref="M:MathNet.Numerics.Number.EpsilonOf(System.Double)"/></remarks>
            <seealso cref="M:MathNet.Numerics.Number.EpsilonOf(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Number.Increment(System.Double)">
            <summary>
            Increments a floating point number to the next bigger number representable by the data type.
            </summary>
            <remarks>
            The incrementation step length depends on the provided value.
            Increment(double.MaxValue) will return positive infinity.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Number.Decrement(System.Double)">
            <summary>
            Decrements a floating point number to the next smaller number representable by the data type.
            </summary>
            <remarks>
            The decrementation step length depends on the provided value.
            Decrement(double.MinValue) will return negative infinity.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Number.NumbersBetween(System.Double,System.Double)">
            <summary>
            Evaluates the count of numbers between two double numbers
            </summary>
            <remarks>The second number is included in the number, thus two equal numbers evaluate to zero and two neighbour numbers evaluate to one. Therefore, what is returned is actually the count of numbers between plus 1.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Number.ToLexicographicalOrderedUInt64(System.Double)">
            <summary>
            Maps a double to an unsigned long integer which provides lexicographical ordering.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Number.ToLexicographicalOrderedInt64(System.Double)">
            <summary>
            Maps a double to an signed long integer which provides lexicographical ordering.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Number.SignedMagnitudeToTwosComplementUInt64(System.Int64)">
            <summary>
            Converts a long integer in signed-magnitude format to an unsigned long integer in two-complement format.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Number.SignedMagnitudeToTwosComplementInt64(System.Int64)">
            <summary>
            Converts an unsigned long integer in two-complement to a long integer in signed-magnitude format format.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqual(System.Double,System.Double,System.Int32)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the two numbers plus one ([a,a] -> 0, [a,a+e] -> 1, [a,a+2e] -> 2, ...).</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqual(System.Double,System.Double,System.UInt64)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <param name="maxNumbersBetween">The maximum count of numbers between the two numbers plus one ([a,a] -> 0, [a,a+e] -> 1, [a,a+2e] -> 2, ...).</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqualNorm(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <param name="diff">The difference of the two numbers according to the Norm</param>
            <param name="relativeAccuracy">The relative accuracy required for being almost equal.</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqualNorm(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <param name="diff">The difference of the two numbers according to the Norm</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
            <param name="relativeAccuracy">The relative accuracy required for being almost equal.</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqual(System.Double,System.Double)">
            <summary>
            Checks whether two real numbers are almost equal.
            </summary>
            <param name="a">The first number</param>
            <param name="b">The second number</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostEqual(System.Double[],System.Double[])">
            <summary>
            Checks whether two real arrays are almost equal.
            </summary>
            <param name="x">The first vector</param>
            <param name="y">The second vector</param>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostZero(System.Double,System.Double)">
            <summary>
            True if the given number is almost equal to zero, according to the specified absolute accuracy.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Number.AlmostZero(System.Double)">
            <summary>
            True if the given number is almost equal to zero.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Polynomial">
            <summary>
            Polynomial represents a finite order polynomial
            with positive powers and constant real coefficients.
            </summary>
            <remarks>The polynomial coefficients are ordered such that
            c[0] is the constant term and c[n] is the coefficient of z^n,
            that is y = c[0]*x^0+c[1]*x^1+c[2]*x^2+...</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.#ctor(System.Int32)">
            <summary>
            Create a new polynomial by order
            </summary>
            <param name="order">The highest power. Example: 2*x^3+x-3 has order 3.</param>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.#ctor(System.Double[])">
            <summary>
            Create a new polynomial by coefficients
            </summary>
            <param name="coefficients">The coefficients vector. The coefficient index denotes the related power (c[0]*x^0+c[1]*x^1+..)</param>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.#ctor(MathNet.Numerics.Polynomial)">
            <summary>
            Create a new polynomial by copy
            </summary>
            <param name="copy">A polynomial to copy from.</param>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Normalize">
            <summary>
            Normalizes the polynomial's order and resizes its data structure to that order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Equality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check whether two polynomials have the same coefficients.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Inequality(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check whether two polynomials have different coefficients.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_GreaterThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check wether a polynomial is bigger than another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_LessThan(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check wether a polynomial is smaller than another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_GreaterThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check wether a polynomial is bigger than or equal to another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_LessThanOrEqual(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check wether a polynomial is smaller than or equal to another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Add a polynomials to a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Addition(MathNet.Numerics.Polynomial,System.Double)">
            <summary>
            Add a real number to a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Addition(System.Double,MathNet.Numerics.Polynomial)">
            <summary>
            Add a polynomial to a real number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_UnaryPlus(MathNet.Numerics.Polynomial)">
            <summary>
            (nop)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Subtract a polynomial from another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Subtraction(MathNet.Numerics.Polynomial,System.Double)">
            <summary>
            Subtract a real number from a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Subtraction(System.Double,MathNet.Numerics.Polynomial)">
            <summary>
            Subtract a polynomial from a real number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_UnaryNegation(MathNet.Numerics.Polynomial)">
            <summary>
            Negate a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Multiply/Convolute two polynomials.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Multiply(MathNet.Numerics.Polynomial,System.Double)">
            <summary>
            Stretch a polynomial with a real number factor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Multiply(System.Double,MathNet.Numerics.Polynomial)">
            <summary>
            Stretch a polynomial with a real number factor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.op_Division(MathNet.Numerics.Polynomial,System.Double)">
            <summary>
            Stretch a polynomial with a real number quotient.
            </summary>
            <remarks>
            The quotient must not be null.
            </remarks>
            <exception cref="T:System.DivideByZeroException"/>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.AddInplace(MathNet.Numerics.Polynomial)">
            <summary>Add anoter polynomial inplace to this polynomial.</summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.AddInplace(System.Double)">
            <summary>Add a real number inplace to this polynomial.</summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.SubtractInplace(MathNet.Numerics.Polynomial)">
            <summary>Subtract anoter polynomial inplace from this polynomial.</summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.SubtractInplace(System.Double)">
            <summary>Subtract a real number inplace from this polynomial.</summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.NegateInplace">
            <summary>Negate this polynomial inplace.</summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.MultiplySlow(MathNet.Numerics.Polynomial)">
            <summary>
            Multiply two small polynomials.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Multiply(MathNet.Numerics.Polynomial)">
            <summary>
            Multiply two polynomials.
            </summary>
            <remarks>
            If both polynomials have an order > 3, the faster karatsua algorithm is used.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.MultiplyInplace(System.Double)">
            <summary>
            Multiplies this polynomial with a real number.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.MultiplyShiftInplace(System.Int32)">
            <summary>
            Multiplies this polynomial with its base x^n, n>0, resulting in a coefficient shift.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.MultiplySyntheticInplace(System.Double)">
            <summary>
            Multiplies this polynomial with x-a
            where x is its base and c0 a constant.
            This process is the counterpart to synthetic division.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.MultiplyLinearInplace(System.Double,System.Double)">
            <summary>
            Multiplies this polynomial with a linear factor c1*x+c0.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Divide(MathNet.Numerics.Polynomial)">
            <summary>
            Divides this polynomial with anoter polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.DivideInplace(System.Double)">
            <summary>
            Divides this polynomial with a real number.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.DivideShiftInplace(System.Int32,System.Double[]@)">
            <summary>
            Divides this polynomial with its base x^n, n>0, resulting in a coefficient shift.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.DivideSyntheticInplace(System.Double,System.Double@)">
            <summary>
            Divides this polynomial with x-a
            where x is its base and c0 a constant.
            This process is often called synthetic division.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.DivideLinearInplace(System.Double,System.Double,System.Double@)">
            <summary>
            Divides this polynomial with a linear factor c1*x+c0.
            </summary>
            <remarks>This method operates inplace and thus alters this instance.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluates the real result of the polynomial to the given value. 
            </summary>
            <param name="value">The polynomial base, x.</param>
            <returns>The real result.</returns>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Evaluate(System.Double,System.Double@)">
            <summary>
            Evaluates the real result of the polynomial and its first
            derivative to the given value. 
            </summary>
            <param name="value">The polynomial base, x.</param>
            <param name="derivative">The real result of the derivative.</param>
            <returns>The real result of the original polynomial.</returns>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Evaluate(System.Double,System.Int32)">
            <summary>
            Evaluates the real result of the polynomial and its first
            few derivatives to the given value. 
            </summary>
            <param name="value">The polynomial base, x.</param>
            <param name="derivativeOrderMax">The highest derivative order. Example: '2' evaluates the first and the second derivatives.</param>
            <returns>A real array with the result of the i-th derivate in cell c[i], thus the result of the original polynomial in c[0].</returns>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.ToString(System.String)">
            <summary>
            Format a human-readable string of this polynomial with the given string as base variable (e.g. "x").
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.ToString">
            <summary>
            Format a human-readable string of this polynomial with "x" as base variable.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.GetHashCode">
            <summary>
            Serves as a hash function for polynomials.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Equals(System.Object)">
            <summary>
            Check whether this polynomial is equal to another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Equals(MathNet.Numerics.Polynomial)">
            <summary>
            Check whether this polynomial is equal to another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Equals(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Check whether two polynomials are equal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.CompareTo(System.Object)">
            <summary>
            Compare this polynomial to another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.CompareTo(MathNet.Numerics.Polynomial)">
            <summary>
            Compare this polynomial to another polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.System#ICloneable#Clone">
            <summary>
            Create a copy of this polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Polynomial.Clone">
            <summary>
            Create a copy of this polynomial.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Polynomial.Size">
            <summary>
            The size of the internal coefficients data structure.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Polynomial.Order">
            <summary>
            The order of this polynomial.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Polynomial.Item(System.Int32)">
            <summary>
            Get/set the coefficient for the given power.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Quaternion">
            <summary>Quaternion Number.</summary>
            <remarks>
            http://en.wikipedia.org/wiki/Quaternion
            http://de.wikipedia.org/wiki/Quaternion
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a quarternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a quarternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Scalar">
            <summary>
            Returns a new Quaternion q with the Scalar part only.
            If you need a Double, use the Real-Field instead.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Vector">
            <summary>
            Returns a new Quaternion q with the Vectorpart only.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.UnitVector">
            <summary>
            Returns a new normalized Quaternion u with the Vectorpart only, such that ||u|| = 1.
            Q may then be represented as q = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where r is the absolute and phi the argument of q.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Sign">
            <summary>
            Returns a new normalized Quaternion q with the direction of this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_UnaryPlus(MathNet.Numerics.Quaternion)">
            <summary>
            (nop)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_UnaryNegation(MathNet.Numerics.Quaternion)">
            <summary>
            Negate a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Addition(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion)">
            <summary>
            Add a quaternion to a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Addition(MathNet.Numerics.Quaternion,System.Double)">
            <summary>
            Add a floating point number to a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Subtraction(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion)">
            <summary>
            Subtract a quaternion from a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Subtraction(MathNet.Numerics.Quaternion,System.Double)">
            <summary>
            Subtract a floating point number from a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Multiply(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion)">
            <summary>
            Multiplay a quaternion with a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Multiply(MathNet.Numerics.Quaternion,System.Double)">
            <summary>
            Multiplay a floating point number with a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Division(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion)">
            <summary>
            Divide a quaternion by a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Division(MathNet.Numerics.Quaternion,System.Double)">
            <summary>
            Divide a quaternion by a floating point number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_ExclusiveOr(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion)">
            <summary>
            Raise a quaternion to a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_ExclusiveOr(MathNet.Numerics.Quaternion,System.Double)">
            <summary>
            Raise a quaternion to a floating point number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.op_Implicit(System.Double)~MathNet.Numerics.Quaternion">
            <summary>
            Convert a floating point number to a quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Add(MathNet.Numerics.Quaternion)">
            <summary>
            Add a quaternion to this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Add(System.Double)">
            <summary>
            Add a floating point number to this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Subtract(MathNet.Numerics.Quaternion)">
            <summary>
            SUbtract a quaternion from this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Subtract(System.Double)">
            <summary>
            Subtract a floating point number from this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Negate">
            <summary>
            Negate this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Multiply(MathNet.Numerics.Quaternion)">
            <summary>
            Multiply a quaternion with this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Multiply(System.Double)">
            <summary>
            Multiply a floating point number to this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Divide(MathNet.Numerics.Quaternion)">
            <summary>
            Multiplies a Quaternion with the inverse of another
            Quaternion (q*q<sup>-1</sup>). Note that for Quaternions
            q*q<sup>-1</sup> is not the same then q<sup>-1</sup>*q,
            because this will lead to a rotation in the other direction.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Divide(System.Double)">
            <summary>
            Multiplies a Quaterion with the inverse of a real number.
            </summary>
            <remarks>
            Its also Possible to cast a double to a Quaternion
            and make the division afterwards. But this is less
            performant.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Inverse">
            <summary>
            Inverts this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Distance(MathNet.Numerics.Quaternion,MathNet.Numerics.Quaternion)">
            <summary>
            Returns the distance |a-b| of two quaternions, forming a metric space.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Conjugate">
            <summary>
            Conjugate this quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Log(System.Double)">
            <summary>
            Logarithm to a given base.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Ln">
            <summary>
            Natural Logrithm to base E.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Lg">
            <summary>
            Common Logarithm to base 10.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Exp">
            <summary>
            Exponential Function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Pow(System.Double)">
            <summary>
            Raise the quaternion to a given power.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Pow(MathNet.Numerics.Quaternion)">
            <summary>
            Raise the quaternion to a given power.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Sqr">
            <summary>
            Square of the Quaternion q: q^2.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Sqrt">
            <summary>
            Square root of the Quaternion: q^(1/2).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.CompareTo(System.Object)">
            <summary>
            Compares this quaternion with another quaternion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Quaternion.Clone">
            <summary>
            Creates a copy of this quaternion.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.Real">
            <summary>Gets the real part of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.ImagX">
            <summary>Gets the imaginary X part (coefficient of complex I) of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.ImagY">
            <summary>Gets the imaginary Y part (coefficient of complex J) of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.ImagZ">
            <summary>Gets the imaginary Z part (coefficient of complex K) of the quaternion.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.Abs">
            <summary>G
            ets the standard euclidean length |q| = sqrt(||q||) of the quaternion q: the square root of the sum of the squares of the four components.
            Q may then be represented as q = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where u is the unit vector and phi the argument of q.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.Norm">
            <summary>Gets the norm ||q|| = |q|^2 of the quaternion q: the sum of the squares of the four components.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.Arg">
            <summary>Gets the argument phi = arg(q) of the quaternion q, such that q = r*(cos(phi) + u * sin(phi)) = r*exp(phi*u) where r is the absolute and u the unit vector of q.</summary>
        </member>
        <member name="P:MathNet.Numerics.Quaternion.IsUnitQuaternion">
            <summary>True if the quaternion q is of lenght |q| = 1.</summary>
            <remarks>To normalize a quaternion to a length of 1, use the <see cref="M:MathNet.Numerics.Quaternion.Sign"/> method. All unit quaternions form a 3-sphere.</remarks>
        </member>
        <member name="T:MathNet.Numerics.RandomSources.SystemRandomSource">
            <summary>
            Represents a simple pseudo-random number generator.
            </summary>
            <remarks>
            The <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/> type internally uses an instance of the <see cref="T:System.Random"/> type 
              to generate pseudo-random numbers.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.SystemRandomSource._generator">
            <summary>
            Stores an instance of <see cref="T:System.Random"/> type that is used to generate random numbers.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.SystemRandomSource._seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.SystemRandomSource._bitBuffer">
            <summary>
            Stores an <see cref="T:System.Int32"/> used to generate up to 31 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.SystemRandomSource._bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:MathNet.Numerics.RandomSources.SystemRandomSource._bitBuffer"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.ResetGenerator">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to zero. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to zero, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes zero but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            Buffers 31 random bits (1 int) for future calls, so a new random number is only generated every 31 calls.
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to zero, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.SystemRandomSource.Reset">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.SystemRandomSource.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:MathNet.Numerics.RandomSources.SystemRandomSource"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.RandomSources.XorShiftRandomSource">
            <summary>
            Represents a xorshift pseudo-random number generator with period 2^128-1.
            </summary>
            <remarks>
            The <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/> type bases upon the implementation presented in the CP article
              "<a href="http://www.codeproject.com/csharp/fastrandom.asp">A fast equivalent for System.Random</a>"
              and the theoretical background on xorshift random number generators published by George Marsaglia 
              in this paper "<a href="http://www.jstatsoft.org/v08/i14/xorshift.pdf">Xorshift RNGs</a>".
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource.SeedY">
            <summary>
            Represents the seed for the <see cref="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._y"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 362436069.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource.SeedZ">
            <summary>
            Represents the seed for the <see cref="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._z"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 521288629.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource.SeedW">
            <summary>
            Represents the seed for the <see cref="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._w"/> variable. This field is constant.
            </summary>
            <remarks>The value of this constant is 88675123.</remarks>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource.IntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0 when it gets applied to a nonnegative 32-bit signed integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource.UIntToDoubleMultiplier">
            <summary>
            Represents the multiplier that computes a double-precision floating point number greater than or equal to 0.0 
              and less than 1.0  when it gets applied to a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._x">
            <summary>
            Stores the last but three unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._y">
            <summary>
            Stores the last but two unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._z">
            <summary>
            Stores the last but one unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._w">
            <summary>
            Stores the last generated unsigned random number. 
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._seed">
            <summary>
            Stores the used seed value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._bitBuffer">
            <summary>
            Stores an <see cref="T:System.UInt32"/> used to generate up to 32 random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._bitCount">
            <summary>
            Stores how many random <see cref="T:System.Boolean"/> values still can be generated from <see cref="F:MathNet.Numerics.RandomSources.XorShiftRandomSource._bitBuffer"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/> class, using a time-dependent default 
              seed value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used. 
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            An unsigned number used to calculate a starting value for the pseudo-random number sequence.
            </param>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.ResetGenerator">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/>,
            so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextUInt">
            <summary>
            Returns an unsigned random number.
            </summary>
            <returns>
            A 32-bit unsigned integer greater than or equal to <see cref="F:System.UInt32.MinValue"/> and 
              less than or equal to <see cref="F:System.UInt32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextInclusiveMaxValue">
            <summary>
            Returns a nonnegative random number less than or equal to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than or equal to <see cref="F:System.Int32.MaxValue"/>; 
              that is, the range of return values includes 0 and <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.Next">
            <summary>
            Returns a nonnegative random number less than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <see cref="F:System.Int32.MaxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to 0, and less than <paramref name="maxValue"/>; that is, 
              the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>. 
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextDouble">
            <summary>
            Returns a nonnegative floating point random number less than 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0; that is, 
              the range of return values includes 0.0 but not 1.0.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextDouble(System.Double)">
            <summary>
            Returns a nonnegative floating point random number less than the specified maximum.
            </summary>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to 0.0. 
            </param>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than <paramref name="maxValue"/>; 
              that is, the range of return values includes 0 but not <paramref name="maxValue"/>. 
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxValue"/> is less than 0. 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a floating point random number within the specified range. 
            </summary>
            <param name="minValue">
            The inclusive lower bound of the random number to be generated. 
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>
            </param>
            <param name="maxValue">
            The exclusive upper bound of the random number to be generated. 
            <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> must be less than or equal to
              <see cref="F:System.Double.MaxValue"/>.
            </param>
            <returns>
            A double-precision floating point number greater than or equal to <paramref name="minValue"/>, and less than 
              <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but 
              not <paramref name="maxValue"/>. 
            If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.  
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The range between <paramref name="minValue"/> and <paramref name="maxValue"/> is greater than
              <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextBoolean">
            <summary>
            Returns a random Boolean value.
            </summary>
            <remarks>
            <remarks>
            Buffers 32 random bits (1 uint) for future calls, so a new random number is only generated every 32 calls.
            </remarks>
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers. 
            </summary>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or 
              equal to <see cref="F:System.Byte.MaxValue"/>.
            </remarks>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is a null reference (<see langword="Nothing"/> in Visual Basic). 
            </exception>
        </member>
        <member name="M:MathNet.Numerics.RandomSources.XorShiftRandomSource.Reset">
            <summary>
            Resets the <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/>, so that it produces the same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.RandomSources.XorShiftRandomSource.CanReset">
            <summary>
            Gets a value indicating whether the <see cref="T:MathNet.Numerics.RandomSources.XorShiftRandomSource"/> can be reset, so that it produces the 
              same pseudo-random number sequence again.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Rational">
            <summary>
            Rational represents a finite order rational with positive
            powers and constant real coefficients for both numerator and denominator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(MathNet.Numerics.Polynomial,MathNet.Numerics.Polynomial)">
            <summary>
            Create a new rational by polynomials (directly linked, clone them manually before applying if needed)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new rational by orders
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(System.Double[],System.Double[])">
            <summary>
            Create a new rational by coefficients
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.#ctor(MathNet.Numerics.Rational)">
            <summary>
            Create a new rational by copy
            </summary>
            <param name="copy">A rational to copy from.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.Normalize">
            <summary>
            Normalize both numerator and denominator polynomials.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Equality(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check whether two rationals have the same coefficients.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Inequality(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check whether two rationals have different coefficients.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_GreaterThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check wether a rational is bigger than another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_LessThan(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check wether a rational is smaller than another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_GreaterThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check wether a rational is bigger than or equal to another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_LessThanOrEqual(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check wether a rational is smaller than or equal to another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Add a rational to a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Addition(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial)">
            <summary>
            Add a polynomial to a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Addition(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational)">
            <summary>
            Add a rational to a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Addition(MathNet.Numerics.Rational,System.Double)">
            <summary>
            Add a real number to a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Addition(System.Double,MathNet.Numerics.Rational)">
            <summary>
            Add a rational to a real number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_UnaryPlus(MathNet.Numerics.Rational)">
            <summary>
            (nop)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Subtract a rational from a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Subtraction(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial)">
            <summary>
            Subtract a polynomial from a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Subtraction(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational)">
            <summary>
            Subtract a rational from a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Subtraction(MathNet.Numerics.Rational,System.Double)">
            <summary>
            Subtract a real number from a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Subtraction(System.Double,MathNet.Numerics.Rational)">
            <summary>
            Subtract a rational from a real number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_UnaryNegation(MathNet.Numerics.Rational)">
            <summary>
            Negate a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Multiply/Convolute two rationals.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Multiply(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial)">
            <summary>
            Multiply/Convolute a rationals with a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Multiply(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational)">
            <summary>
            Multiply/Convolute a polynomial with a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Multiply(MathNet.Numerics.Rational,System.Double)">
            <summary>
            Stretch a rational with a real number factor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Multiply(System.Double,MathNet.Numerics.Rational)">
            <summary>
            Stretch a polynomial with a real number factor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Divide two rationals.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Division(MathNet.Numerics.Rational,MathNet.Numerics.Polynomial)">
            <summary>
            Divide a rational to a polynomial.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Division(MathNet.Numerics.Polynomial,MathNet.Numerics.Rational)">
            <summary>
            Divide a polynomial to a rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Division(MathNet.Numerics.Rational,System.Double)">
            <summary>
            Stretch a rational with a real number quotient.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.op_Division(System.Double,MathNet.Numerics.Rational)">
            <summary>
            Stretch a the inverse of a rational with a real number quotient.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Add(MathNet.Numerics.Rational)">
            <summary>
            Create a new rational as the result of adding a rational to this rational.
            </summary>
            <param name="rational">The rational to add</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.AddInplace(MathNet.Numerics.Polynomial)">
            <summary>
            Add a polynomial directly inplace to this rational.
            </summary>
            <param name="polynomial">The polynomial to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.AddInplace(System.Double)">
            <summary>
            Add a floating point number directly inplace to this rational.
            </summary>
            <param name="n">The floating point number to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.Subtract(MathNet.Numerics.Rational)">
            <summary>
            Create a new rational as the result of subtracting a rational from this rational.
            </summary>
            <param name="rational">The rational to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.SubtractInplace(MathNet.Numerics.Polynomial)">
            <summary>
            Subtract a polynomial directly inplace from this rational.
            </summary>
            <param name="polynomial">The polynomial to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.SubtractInplace(System.Double)">
            <summary>
            Subtract a floating point number directly inplace from this rational.
            </summary>
            <param name="n">The floating point number to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.NegateInplace">
            <summary>
            Negate this rational directly inplace.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Multiply(MathNet.Numerics.Rational)">
            <summary>
            Create a new rational as the result of multiplying a rational to this rational.
            </summary>
            <param name="rational">The rational to multiply with.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.Multiply(MathNet.Numerics.Polynomial)">
            <summary>
            Create a new rational as the result of multiplying a polynomial to this rational.
            </summary>
            <param name="polynomial">The polynomial to multiply with.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.MultiplyInplace(System.Double)">
            <summary>
            Multiply a floating point number directly inplace to this rational.
            </summary>
            <param name="n">The floating point number to multiply with.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.Divide(MathNet.Numerics.Rational)">
            <summary>
            Create a new rational as the result of dividing a rational from this rational.
            </summary>
            <param name="rational">The rational to divide with.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.Divide(MathNet.Numerics.Polynomial)">
            <summary>
            Create a new rational as the result of dividing a polynomial from this rational.
            </summary>
            <param name="polynomial">The polynomial to divide with.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.DivideInplace(System.Double)">
            <summary>
            Divide a floating point number directly inplace from this rational.
            </summary>
            <param name="n">The floating point number to divide with.</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.InvertInplace">
            <summary>
            Invert this rational directly inplace.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Evaluate(System.Double)">
            <summary>
            Evaluate the value of this rational at a given point.
            </summary>
            <param name="value">The point where to evaluate the rational</param>
        </member>
        <member name="M:MathNet.Numerics.Rational.ToString(System.String)">
            <summary>
            Format a human-readable string of this rational with the given string as base variable (e.g. "x").
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.ToString">
            <summary>
            Format a human-readable string of this rational with "x" as base variable.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.GetHashCode">
            <summary>
            Serves as a hash function for rationals.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Equals(System.Object)">
            <summary>
            Check whether this rational is equal to another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Equals(MathNet.Numerics.Rational)">
            <summary>
            Check whether this rational is equal to another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Equals(MathNet.Numerics.Rational,MathNet.Numerics.Rational)">
            <summary>
            Check whether two rationals are equal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compare this rational to another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.CompareTo(MathNet.Numerics.Rational)">
            <summary>
            Compare this rational to another rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.System#ICloneable#Clone">
            <summary>
            Create a copy of this rational.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Rational.Clone">
            <summary>
            Create a copy of this rational.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Rational.Numerator">
            <summary>
            The numerator polynomial.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Rational.Denominator">
            <summary>
            The denominator polynomial.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Rational.NumeratorOrder">
            <summary>
            The order of the numerator polynomial.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Rational.DenominatorOrder">
            <summary>
            The order of the denominator polynomial.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Ratios">
            <summary>
            Neper/Decibel ratio expression toolkit.
            </summary>
            <remarks>
            <p>See <a href="http://en.wikipedia.org/wiki/Neper">Wikipedia - Neper</a>
            and <a href="http://en.wikipedia.org/wiki/Decibel">Wikipedia - Decibel</a></p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.RatioToNeper(System.Double)">
            <summary>
            Given a ratio, express it in Neper (Np).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.RatioToNeper(System.Double,System.Double)">
            <summary>
            Given an effective value and a fixed base value, express the ratio in Neper (Np).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.NeperToRatio(System.Double)">
            <summary>
            Given a ratio in Neper (Np), evaluate the effective ratio.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.NeperToValue(System.Double,System.Double)">
            <summary>
            Given a ratio in Neper (Np) and the fixed base value, evaluate the effective value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.RatioToDecibel(System.Double)">
            <summary>
            Given a ratio, express it in Decibel (dB).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.RatioToDecibel(System.Double,System.Double)">
            <summary>
            Given an effective value and a fixed base value, express the ratio in Decibel (dB).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.DecibelToRatio(System.Double)">
            <summary>
            Given a ratio in Decibel (dB), evaluate the effective ratio.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.DecibelToValue(System.Double,System.Double)">
            <summary>
            Given a ratio in Decibel (dB) and the fixed base value, evaluate the effective value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.RatioToPowerDecibel(System.Double)">
            <summary>
            Given a ratio, express it in Decibel (dB, representing a power gain, while the compared values are not powers, e.g. amplitude, ampère, volts).
            </summary>
            <remarks>
            Power Decibel indicates that the method takes care of squaring the compared values to get a power gain mesure.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.RatioToPowerDecibel(System.Double,System.Double)">
            <summary>
            Given an effective value and a fixed base value, express the ratio in Decibel (dB, representing a power gain, while the compared values are not powers, e.g. amplitude, ampère, volts).
            </summary>
            <remarks>
            Power Decibel indicates that the method takes care of squaring the compared values to get a power gain mesure.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.PowerDecibelToRatio(System.Double)">
            <summary>
            Given a ratio in Decibel (dB, representing a power gain, while the compared values are not powers, e.g. amplitude, ampère, volts), evaluate the effective ratio.
            </summary>
            <remarks>
            Power Decibel indicates that the method takes care of squaring the compared values to get a power gain mesure.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.PowerDecibelToValue(System.Double,System.Double)">
            <summary>
            Given a ratio in Decibel (dB, representing a power gain, while the compared values are not powers, e.g. amplitude, ampère, volts) and the fixed base value, evaluate the effective value.
            </summary>
            <remarks>
            Power Decibel indicates that the method takes care of squaring the compared values to get a power gain mesure.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.PowerDecibelToNeper(System.Double)">
            <summary>
            Convert a ratio in Decibel (dB, representing a power gain, while the compared values are not powers, e.g. amplitude, ampère, volts) to Neper (Np).
            </summary>
            <remarks>
            Power Decibel indicates that the method takes care of squaring the compared values to get a power gain mesure.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.NeperToPowerDecibel(System.Double)">
            <summary>
            Convert a ratio in Neper (Np, representing a power gain, while the compared values are not powers, e.g. amplitude, ampère, volts) to Decibel (dB).
            </summary>
            <remarks>
            Power Decibel indicates that the method takes care of squaring the compared values to get a power gain mesure.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Ratios.DecibelToNeper(System.Double)">
            <summary>
            Converts a ratio in Decibel (dB, not representing a power gain, or both compared values are already powers) to Neper (Np).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Ratios.NeperToDecibel(System.Double)">
            <summary>
            Converts a ration in Neper (Np, not representing a power gain, or both compared values are already powers) to Decibel (dB).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.SampleList">
            <summary>
            SampleList is a sorted list in ascending order for discrete function samples x=f(t) or value pairs (t,x).
            Multiple values x for the same t are replaced with the mean.
            </summary>
            <remarks>
            This list is designed for rare additions and removals only and is slow when adding
            items in not-ascending order. Better fill it directly in the constructor.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.SampleList.#ctor">
            <summary>
            Create a new sample list.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.#ctor(System.Int32)">
            <summary>
            Create a new sample list.
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:MathNet.Numerics.SampleList.#ctor(System.Collections.IDictionary)">
            <summary>
            Create a new sample list.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.#ctor(System.Collections.IDictionary,System.Int32)">
            <summary>
            Create a new sample list.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a new sample list based on a copy of two arrays.
            </summary>
            <param name="t">keys t, where x=f(t) or (t,x).</param>
            <param name="x">values x, where x=f(t) or (t,x).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensionality of the two arrays doesn't match.</exception>
        </member>
        <member name="M:MathNet.Numerics.SampleList.EnsureCapacity(System.Int32)">
            <summary>
            Doubles the capacity. Do not use this method directly, use <see cref="M:MathNet.Numerics.SampleList.Add(System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.AppendMean(System.Int32,System.Double)">
            <summary>
            Append a sample to existing samples. Do not use this method directly, use <see cref="M:MathNet.Numerics.SampleList.Add(System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Insert(System.Int32,System.Double,System.Double)">
            <summary>
            Insert a new sample. Do not use this method directly, use <see cref="M:MathNet.Numerics.SampleList.Add(System.Double,System.Double)"/> instead.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Add(System.Double,System.Double)">
            <summary>
            Add a new sample to the list. 
            </summary>
            <param name="t">key t, where x=f(t) or (t,x).</param>
            <param name="x">value x, where x=f(t) or (t,x).</param>
        </member>
        <member name="M:MathNet.Numerics.SampleList.RemoveAt(System.Int32)">
            <summary>
            Remove the sample at the given index.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Remove(System.Double)">
            <summary>
            Remove all samples with a key exactly equal to t, where x=f(t) or (t,x).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Clear">
            <summary>
            Remove all samples from the list.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.IndexOfT(System.Double)">
            <summary>
            The index of the sample with a key exactly equal to t.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.IndexOfX(System.Double)">
            <summary>
            The index of the first sample with a value exactly equal to x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.SetX(System.Double,System.Double)">
            <summary>
            Sets the X matching the given T (and sets its count to 1) or inserts a new sample.
            Do not use this to add a sample to the list!
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.GetT(System.Int32)">
            <summary>
            Get the key t stored at the given index, where x=f(t) or (t,x).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.GetX(System.Int32)">
            <summary>
            Get the value x stored at the given index, where x=f(t) or (t,x).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Locate(System.Double)">
            <summary>
            Find the index i of a sample near t such that t[i] &lt;= t &lt;= t[i+1]. 
            </summary>
            <returns>The lower bound index of the interval, -1 or Size-1 if out of bounds.</returns>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Locate(System.Double,System.Int32)">
            <summary>
            Find the index i of a sample near t such that t[i] &lt;= t &lt;= t[i+1]. 
            </summary>
            <remarks>This method is faster if the expected index is near nearIndex (compared to the list size) but may be slower otherwise (worst case: factor 2 slower, best case: log2(n) faster).</remarks>
            <returns>The lower bound index of the interval, -1 or Size-1 if out of bounds.</returns>
        </member>
        <member name="M:MathNet.Numerics.SampleList.LocateBisection(System.Double,System.Int32,System.Int32)">
            <summary>
            Bisection Search Helper. Do not use this method directly, use <see cref="M:MathNet.Numerics.SampleList.Locate(System.Double)"/> instead.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.System#ICloneable#Clone">
            <summary>
            Create a copy of this sample list.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.Clone">
            <summary>
            Create a copy of this sample list.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.ContainsT(System.Double)">
            <summary>
            True if this sample list contains a sample at t
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.ContainsX(System.Double)">
            <summary>
            True if this sample list contains a sample value x
            </summary>
        </member>
        <member name="E:MathNet.Numerics.SampleList.SampleAltered">
            <summary>
            Event which notifies when a sample has been altered.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SampleList.MinT">
            <summary>
            The smallest key t in the sample list, where x=f(t) or (t,x).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SampleList.MaxT">
            <summary>
            The biggest key t in the sample list, where x=f(t) or (t,x).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SampleList.Capacity">
            <summary>
            The count of unique samples supported.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SampleList.Count">
            <summary>
            The count of unique samples stored.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SampleList.SampleListEnumerator.EnumerationMode.Keys">
            <summary>Enumerate the keys.</summary>
        </member>
        <member name="F:MathNet.Numerics.SampleList.SampleListEnumerator.EnumerationMode.Values">
            <summary>Enumerate the values.</summary>
        </member>
        <member name="F:MathNet.Numerics.SampleList.SampleListEnumerator.EnumerationMode.DictEntry">
            <summary>Enumerate the dictionary entries.</summary>
        </member>
        <member name="T:MathNet.Numerics.SampleList.SampleAlteredEventArgs">
            <summary>
            Event Argument for <see cref="E:MathNet.Numerics.SampleList.SampleAltered"/> Event.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.SampleList.SampleAlteredEventArgs.#ctor(System.Double)">
            <summary>
            Instantiate new event arguments.
            </summary>
            <param name="t">The t-value of the x=f(t) or (t,x) samples.</param>
        </member>
        <member name="P:MathNet.Numerics.SampleList.SampleAlteredEventArgs.T">
            <summary>
            he t-value of the x=f(t) or (t,x) samples.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.ISet`1">
            <summary>
            A generic typed set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.ToArray">
            <summary>
            Create an array with all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.IsSubset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether <c>c</c> is a subset of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.IsSuperset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether this set is a subset of <c>c</c>, or if <c>c</c> is a superset of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.HasEqualElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether this set has elements that are also in <c>c</c>.
            </summary>
            <remarks>Ingnores duplicate elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.Exists(System.Predicate{`0})">
            <summary>
            Check whether this set has an element witch matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.Exists(System.Predicate{`0},`0@)">
            <summary>
            Check whether this set has an element witch matches the predicate, and returns it as foundItem-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Checks wether all elements of this set match the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.ForEach(System.Action{`0})">
            <summary>
            Executes the action for all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.Find(System.Predicate{`0})">
            <summary>
            Finds an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (after startIndex) of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (between startIndex and startIndex+count-1) of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (after startIndex) of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (between startIndex and startIndex+count-1) of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.LastIndexOf(`0)">
            <summary>
            Finds the last index of element <c>item</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all elements of this set which match the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Maps <c>convert</c> to all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements in <c>range</c> to this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.AddDistinct(`0)">
            <summary>
            Add <c>item</c> to this set, except if its already there.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.AddRangeDistinct(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements in <c>range</c> to this set, but skips duplicates.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.RemoveDuplicates">
            <summary>
            Remove al duplicate items from this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Remove all elements that match the predicate from this set.
            </summary>
            <returns>The number of removed items.</returns>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort all elements of this set with respect to the comparer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ISet`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the elements between index and index+count-1 of this set with respect to the comparer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Set`1">
            <summary>
            A generic typed writeable set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.#ctor">
            <summary>
            Create a new set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.#ctor(`0[])">
            <summary>
            Create a new set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a new set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.#ctor(System.Int32)">
            <summary>
            Create a new set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.CreateNewSet">
            <summary>
            Override this when you derive from this class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.CreateNewReadOnlyWrapper(System.Collections.Generic.IList{`0})">
            <summary>
            Override this when you derive from this class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.ToArray">
            <summary>
            Create an array with all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements in <c>range</c> to this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.AddDistinct(`0)">
            <summary>
            Add <c>item</c> to this set, except if its already there.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.AddRangeDistinct(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements in <c>range</c> to this set, but skips duplicates.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.RemoveDuplicates">
            <summary>
            Remove al duplicate items from this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.ReplaceRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replace elements starting from the first element with all elements in <c>range</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.InsertItem(System.Int32,`0)">
            <summary>
            Called whenever an item is insert into this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.RemoveItem(System.Int32)">
            <summary>
            Called whenever an item is removed from this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.SetItem(System.Int32,`0)">
            <summary>
            Called whenever an item is reset in this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.IsSubset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether <c>c</c> is a subset of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.IsSuperset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether this set is a subset of <c>c</c>, or if <c>c</c> is a superset of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.HasEqualElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether this set has elements that are also in <c>c</c>.
            </summary>
            <remarks>Ingnores duplicate elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Concatenate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the concatenation with the items of <c>c</c>.
            </summary>
            <remarks>Not distinct: the resulting collection may contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.ConcatenateInplace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Concatenates this set with the items of <c>c</c>, by directly modifing this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Concatenate(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the concatenation
            from <c>c1</c> and <c>c2</c>.
            </summary>
            <remarks>Not distinct: the resulting collection may contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the union with the items of <c>c</c>.
            </summary>
            <remarks>Distinct: the resulting collection may not contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.UnionInplace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the union of this set with the items of <c>c</c>, by directly modifing this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Union(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the union of the items
            of <c>c1</c> and <c>c2</c>.
            </summary>
            <remarks>Distinct: the resulting collection may not contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the intersection with the items of <c>c</c>.
            </summary>
            <remarks>Distinct: the resulting collection may not contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.IntersectInplace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the intersection of this set with the items of <c>c</c>, by directly modifing this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Intersect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the intersection of the items
            of <c>c1</c> and <c>c2</c>.
            </summary>
            <remarks>Distinct: the resulting collection may not contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Subtract(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the subtraction of the items of <c>c</c>.
            </summary>
            <remarks>Not distinct: the resulting collection may contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.SubtractInplace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the subtraction of this set with the items of <c>c</c>, by directly modifing this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Subtract(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a collection resulting from the subtraction of the items
            of <c>c2</c> to the collection <c>c1</c>.
            </summary>
            <remarks>Not distinct: the resulting collection may contain several identical elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Exists(System.Predicate{`0})">
            <summary>
            Check whether this set has an element witch matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Exists(System.Predicate{`0},`0@)">
            <summary>
            Check whether this set has an element witch matches the predicate, and returns it as foundItem-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Checks wether all elements of this set match the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.ForEach(System.Action{`0})">
            <summary>
            Executes the action for all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Find(System.Predicate{`0})">
            <summary>
            Finds an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (after startIndex) of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (between startIndex and startIndex+count-1) of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (after startIndex) of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (between startIndex and startIndex+count-1) of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.LastIndexOf(`0)">
            <summary>
            Finds the last index of element <c>item</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all elements of this set which match the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Remove all elements that match the predicate from this set.
            </summary>
            <returns>The number of removed items.</returns>
        </member>
        <member name="M:MathNet.Numerics.Set`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Maps <c>convert</c> to all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort all elements of this set with respect to the comparer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Set`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the elements between index and index+count-1 of this set with respect to the comparer.
            </summary>
        </member>
        <member name="E:MathNet.Numerics.Set`1.OnSetChanged">
            <summary>
            Event that notifies whenever the set changes.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Set`1.AsReadOnly">
            <summary>
            Provides a read-only wrapper to this set. The wrapper will stay connected to this set's items but can't change them.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.ReadOnlySet`1">
            <summary>
            A generic typed set which is read-only.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a read-only set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.ToArray">
            <summary>
            Create an array with all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.CreateNewSet">
            <summary>
            Override this when you derive from this class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.IsSubset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether <c>c</c> is a subset of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.IsSuperset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether this set is a subset of <c>c</c>, or if <c>c</c> is a superset of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.HasEqualElements(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks whether this set has elements that are also in <c>c</c>.
            </summary>
            <remarks>Ingnores duplicate elements.</remarks>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.Exists(System.Predicate{`0})">
            <summary>
            Check whether this set has an element witch matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.Exists(System.Predicate{`0},`0@)">
            <summary>
            Check whether this set has an element witch matches the predicate, and returns it as foundItem-parameter.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Checks wether all elements of this set match the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.ForEach(System.Action{`0})">
            <summary>
            Executes the action for all elements of this set.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.Find(System.Predicate{`0})">
            <summary>
            Finds an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (after startIndex) of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (between startIndex and startIndex+count-1) of an element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (after startIndex) of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index (between startIndex and startIndex+count-1) of the last element of this set that matches the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.LastIndexOf(`0)">
            <summary>
            Finds the last index of element <c>item</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.FindAll(System.Predicate{`0})">
            <summary>
            Finds all elements of this set which match the predicate.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements in <c>range</c> to this set.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#AddDistinct(`0)">
            <summary>
            Add <c>item</c> to this set, except if its already there.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#AddRangeDistinct(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all elements in <c>range</c> to this set, but skips duplicates.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#RemoveDuplicates">
            <summary>
            Remove al duplicate items from this set.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#RemoveAll(System.Predicate{`0})">
            <summary>
            Remove all elements that match the predicate from this set.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort all elements of this set with respect to the comparer.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.MathNet#Numerics#ISet{T}#Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the elements between index and index+count-1 of this set with respect to the comparer.
            </summary>
            <remarks>
            This is not supported by this implementation.
            </remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:MathNet.Numerics.ReadOnlySet`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Maps <c>convert</c> to all elements of this set.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.SetElementOperation">
            <summary>
            Set Element Operations
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SetElementOperation.Added">
            <summary>
            Add elements to the set
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SetElementOperation.Removed">
            <summary>
            Remove elements to the set
            </summary>
        </member>
        <member name="F:MathNet.Numerics.SetElementOperation.Moved">
            <summary>
            Move elements inside of the set
            </summary>
        </member>
        <member name="T:MathNet.Numerics.SetChangedEventArgs`1">
            <summary>
            Event argument used for notifying about changes in a set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MathNet.Numerics.SetChangedEventArgs`1.Moved(`0,System.Int32,System.Int32)">
            <summary>
            Build changed event args when elevents have been moved inside of a set.
            </summary>
            <param name="element">The element which has been moved.</param>
            <param name="indexBefore">The previous index of the moved element.</param>
            <param name="indexAfter">The new index of the moved element.</param>
        </member>
        <member name="M:MathNet.Numerics.SetChangedEventArgs`1.Added(`0,System.Int32)">
            <summary>
            Build changed event args when elevents have been added to a set.
            </summary>
            <param name="element">The element which as been added.</param>
            <param name="index">The index where the element was added.</param>
        </member>
        <member name="M:MathNet.Numerics.SetChangedEventArgs`1.Removed(`0,System.Int32)">
            <summary>
            Build changed event args when elevents have been removed from a set.
            </summary>
            <param name="element">The element which has been removed.</param>
            <param name="index">The previous index of the removed element.</param>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.Element">
            <summary>
            The element that changed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.Operation">
            <summary>
            The operation that was applied to the element.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.ElementAdded">
            <summary>
            True if the element was added to the set.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.ElementRemoved">
            <summary>
            True if the element was removed from the set.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.ElementMoved">
            <summary>
            True if the element was moved inside of the set.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.IndexBefore">
            <summary>
            The index of the element before the operation.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.SetChangedEventArgs`1.IndexAfter">
            <summary>
            The index of the element after the operation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.SiConstants">
            <summary>
            Scientific Constants
            </summary>
            <seealso cref="T:MathNet.Numerics.Constants"/>
            <seealso cref="T:MathNet.Numerics.SiPrefixes"/>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.SpeedOfLight">
            <summary>Speed of Light in Vacuum: c_0 = 2.99792458e8 [m s^-1] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MagneticPermeability">
            <summary>Magnetic Permeability in Vacuum: mu_0 = 4*Pi * 10^-7 [N A^-2 = kg m A^-2 s^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElectricPermittivity">
            <summary>Electric Permittivity in Vacuum: epsilon_0 = 1/(mu_0*c_0^2) [F m^-1 = A^2 s^4 kg^-1 m^-3] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.CharacteristicImpedanceVacuum">
            <summary>Characteristic Impedance of Vacuum: Z_0 = mu_0*c_0 [Ohm = m^2 kg s^-3 A^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.GravitationalConstant">
            <summary>Newtonian Constant of Gravitation: G = 6.67429e-11 [m^3 kg^-1 s^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.PlancksConstant">
            <summary>Planck's constant: h = 6.62606896e-34 [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.DiracsConstant">
            <summary>Reduced Planck's constant: h_bar = h / (2*Pi) [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.PlancksMass">
            <summary>Planck mass: m_p = (h_bar*c_0/G)^(1/2) [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.PlancksTemperature">
            <summary>Planck temperature: T_p = (h_bar*c_0^5/G)^(1/2)/k [K] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.PlancksLength">
            <summary>Planck length: l_p = h_bar/(m_p*c_0) [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.PlancksTime">
            <summary>Planck time: t_p = l_p/c_0 [s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElementaryCharge">
            <summary>Elementary Electron Charge: e = 1.602176487e-19 [C = A s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MagneticFluxQuantum">
            <summary>Magnetic Flux Quantum: theta_0 = h/(2*e) [Wb = m^2 kg s^-2 A^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ConductanceQuantum">
            <summary>Conductance Quantum: G_0 = 2*e^2/h [S = m^-2 kg^-1 s^3 A^2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.JosephsonConstant">
            <summary>Josephson Constant: K_J = 2*e/h [Hz V^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.VonKlitzingConstant">
            <summary>Von Klitzing Constant: R_K = h/e^2 [Ohm = m^2 kg s^-3 A^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.BohrMagneton">
            <summary>Bohr Magneton: mu_B = e*h_bar/2*m_e [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NuclearMagneton">
            <summary>Nuclear Magneton: mu_N = e*h_bar/2*m_p [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.FineStructureConstant">
            <summary>Fine Structure Constant: alpha = e^2/4*Pi*e_0*h_bar*c_0 [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.RydbergConstant">
            <summary>Rydberg Constant: R_infty = alpha^2*m_e*c_0/2*h [m^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.BohrRadius">
            <summary>Bor Radius: a_0 = alpha/4*Pi*R_infty [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.HartreeEnergy">
            <summary>Hartree Energy: E_h = 2*R_infty*h*c_0 [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.QuantumOfCirculation">
            <summary>Quantum of Circulation: h/2*m_e [m^2 s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.FermiCouplingConstant">
            <summary>Fermi Coupling Constant: G_F/(h_bar*c_0)^3 [GeV^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.WeakMixingAngle">
            <summary>Weak Mixin Angle: sin^2(theta_W) [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElectronMass">
            <summary>Electron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElectronMassEnergyEquivalent">
            <summary>Electron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElectronMolarMass">
            <summary>Electron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ComptonWavelength">
            <summary>Electron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ClassicalElectronRadius">
            <summary>Classical Electron Radius: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ThomsonCrossSection">
            <summary>Tomson Cross Section: [m^2] (2002 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElectronMagneticMoment">
            <summary>Electron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ElectronGFactor">
            <summary>Electon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MuonMass">
            <summary>Muon Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MuonMassEnegryEquivalent">
            <summary>Muon Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MuonMolarMass">
            <summary>Muon Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MuonComptonWavelength">
            <summary>Muon Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MuonMagneticMoment">
            <summary>Muon Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.MuonGFactor">
            <summary>Muon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.TauMass">
            <summary>Tau Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.TauMassEnergyEquivalent">
            <summary>Tau Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.TauMolarMass">
            <summary>Tau Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.TauComptonWavelength">
            <summary>Tau Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonMass">
            <summary>Proton Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonMassEnergyEquivalent">
            <summary>Proton Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonMolarMass">
            <summary>Proton Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonComptonWavelength">
            <summary>Proton Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonMagneticMoment">
            <summary>Proton Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonGFactor">
            <summary>Proton G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ShieldedProtonMagneticMoment">
            <summary>Proton Shielded Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ProtonGyromagneticRatio">
            <summary>Proton Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.ShieldedProtonGyromagneticRatio">
            <summary>Proton Shielded Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronMass">
            <summary>Neutron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronMassEnegryEquivalent">
            <summary>Neutron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronMolarMass">
            <summary>Neutron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronComptonWavelength">
            <summary>Neuron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronMagneticMoment">
            <summary>Neutron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronGFactor">
            <summary>Neutron G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.NeutronGyromagneticRatio">
            <summary>Neutron Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.DeuteronMass">
            <summary>Deuteron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.DeuteronMassEnegryEquivalent">
            <summary>Deuteron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.DeuteronMolarMass">
            <summary>Deuteron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.DeuteronMagneticMoment">
            <summary>Deuteron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.HelionMass">
            <summary>Helion Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.HelionMassEnegryEquivalent">
            <summary>Helion Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.SiConstants.HelionMolarMass">
            <summary>Helion Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="T:MathNet.Numerics.SiPrefixes">
            <summary>
            Scientific Unit prefix factors.
            </summary>
            <seealso cref="T:MathNet.Numerics.SiConstants"/>
            <seealso cref="T:MathNet.Numerics.Constants"/>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Yotta">
            <summary>1 000 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Zetta">
            <summary>1 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Exa">
            <summary>1 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Peta">
            <summary>1 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Tera">
            <summary>1 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Giga">
            <summary>1 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Mega">
            <summary>1 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Kilo">
            <summary>1 000</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Hecto">
            <summary>100</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Deca">
            <summary>10</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Deci">
            <summary>0.1</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Centi">
            <summary>0.01</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Milli">
            <summary>0.001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Micro">
            <summary>0.000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Nano">
            <summary>0.000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Pico">
            <summary>0.000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Femto">
            <summary>0.000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Atto">
            <summary>0.000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Zepto">
            <summary>0.000 000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.SiPrefixes.Yocto">
            <summary>0.000 000 000 000 000 000 000 001</summary>
        </member>
        <member name="T:MathNet.Numerics.Fn">
            <summary>
            Double-precision special functions toolkit.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.Hypot(System.Double,System.Double)">
            <summary> Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> 
            without underflow/overflow.</summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.IntPow(System.Int64,System.UInt32)">
            <summary>
            Integer Power
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.IntPow2(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Fn.IntLog2(System.Int32)">
            <summary>
            Evaluates the logarithm to base 2 of the provided integer value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.CeilingToPowerOf2(System.Int32)">
            <summary>
            Returns the smallest integer power of two bigger or equal to the value. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.FloorToPowerOf2(System.Int32)">
            <summary>
            Returns the biggest integer power of two smaller or equal to the value. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.Gcd(System.Int64,System.Int64)">
            <summary>
            Returns the greatest common divisor of two integers using euclids algorithm.
            </summary>
            <returns>gcd(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.Fn.Gcd(System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = gcd(a,b).
            </summary>
            <returns>gcd(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.Gcd(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The gcd of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:MathNet.Numerics.Fn.Lcm(System.Int64,System.Int64)">
            <summary>
            Returns the least common multiple of two integers using euclids algorithm.
            </summary>
            <returns>lcm(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.Fn.Sinc(System.Double)">
            <summary>
            Normalized Sinc (sinus cardinalis) Function.
            </summary>
            <remarks>sinc(x) = sin(pi * x) / (pi * x)</remarks>
        </member>
        <member name="M:MathNet.Numerics.Fn.FactorialLn(System.Int32)">
            <summary>
            Returns the natural logarithm of the factorial (n!) for an integer value > 0.
            </summary>
            <returns>A value ln(value!) for value > 0</returns>
        </member>
        <member name="M:MathNet.Numerics.Fn.Factorial(System.Int32)">
            <summary>
            Returns the factorial (n!) of an integer number &gt; 0. Consider using <see cref="M:MathNet.Numerics.Fn.FactorialLn(System.Int32)"/> instead.
            </summary>
            <returns>A value value! for value &gt; 0</returns>
            <remarks>
            If you need to multiply or divide various such factorials, consider
            using the logarithmic version <see cref="M:MathNet.Numerics.Fn.FactorialLn(System.Int32)"/> instead
            so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)"/>.
            This will also completely circumvent the problem that factorials
            easily become very large.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Fn.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Returns the binomial coefficient of n and k as a double precision number.
            </summary>
            <remarks>
            If you need to multiply or divide various such coefficients, consider
            using the logarithmic version <see cref="M:MathNet.Numerics.Fn.BinomialCoefficientLn(System.Int32,System.Int32)"/> instead
            so you can add instead of multiply and subtract instead of divide, and
            then exponentiate the result using <see cref="M:System.Math.Exp(System.Double)"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Fn.BinomialCoefficientLn(System.Int32,System.Int32)">
            <summary>
            Returns the natural logarithm of the binomial coefficient of n and k as a double precision number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of Gamma for a real value &gt; 0.
            </summary>
            <returns>A value ln|Gamma(value))| for value &gt; 0</returns>
        </member>
        <member name="M:MathNet.Numerics.Fn.Gamma(System.Double)">
            <summary>
            Returns the gamma function for real values (except at 0, -1, -2, ...).
            For numeric stability, consider to use GammaLn for positive values.
            </summary>
            <returns>A value Gamma(value) for value != 0,-1,-2,...</returns>
        </member>
        <member name="M:MathNet.Numerics.Fn.IncompleteGammaRegularized(System.Double,System.Double)">
            <summary>
            Obsolete. Please use GammaRegularized instead, with the same parameters (method was renamed).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.GammaRegularized(System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete gamma function
            P(a,x) = 1/Gamma(a) * int(exp(-t)t^(a-1),t=0..x) for real a &gt; 0, x &gt; 0.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.Digamma(System.Double)">
            <summary>
            Returns the digamma (psi) function of real values (except at 0, -1, -2, ...).
            Digamma is the logarithmic derivative of the <see cref="M:MathNet.Numerics.Fn.Gamma(System.Double)"/> function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.Beta(System.Double,System.Double)">
            <summary>
            Returns the Euler Beta function of real valued z > 0, w > 0.
            Beta(z,w) = Beta(w,z).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.BetaLn(System.Double,System.Double)">
            <summary>
            Returns the natural logarithm of the Euler Beta function of real valued z > 0, w > 0.
            BetaLn(z,w) = BetaLn(w,z).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.IncompleteBetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Obsolete. Please use BetaRegularized instead, with the same parameters (method was renamed).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.BetaRegularized(System.Double,System.Double,System.Double)">
            <summary>
            Returns the regularized lower incomplete beta function
            I_x(a,b) = 1/Beta(a,b) * int(t^(a-1)*(1-t)^(b-1),t=0..x) for real a &gt; 0, b &gt; 0, 1 &gt;= x &gt;= 0.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.Erf(System.Double)">
            <summary>
            Returns the error function erf(x) = 2/sqrt(pi) * int(exp(-t^2),t=0..x)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fn.ErfInverse(System.Double)">
            <summary>
            Returns the inverse error function erf^-1(x).
            </summary>
            <remarks>
            <p>The algorithm uses a minimax approximation by rational functions
            and the result has a relative error whose absolute value is less
            than 1.15e-9.</p>
            
            <p>See the page <see href="http://home.online.no/~pjacklam/notes/invnorm/"/>
            for more details.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Fn.HarmonicNumber(System.Int32)">
            <summary>
            Evaluates the n-th harmonic number Hn = sum(1/k,k=1..n).
            </summary>
            <param name="n">n >= 0</param>
            <remarks>
            See <a http="http://en.wikipedia.org/wiki/Harmonic_Number">Wikipedia - Harmonic Number</a>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Accumulator">
            <summary>
            The <c>Accumulator</c> provides online algorithms to computes the first
            statistical moments and their derivatives.
            </summary>
            <remarks>
            <p>The <c>Accumulator</c> provides memory efficient online algorithms
            to compute the first statistical moments (mean, variance) and their
            derivatives (sigma, error estimate).</p>
            <p>The memory required by the accumulator is <c>O(1)</c> independent
            from the distribution size. All methods are executed in a <c>O(1)</c>
            computational time.
            </p>
            <p>The <c>Accumulator</c> is not thread safe.</p>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Accumulator.sum">
            <summary>
            Sum of the values added to the accumulator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Accumulator.squaredSum">
            <summary>
            Sum of the square of the values added to the accumulator.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Accumulator.count">
            <summary>
            Number of values added to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor">
            <summary>
            Creates an empty <c>Accumulator</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor(System.Double[])">
            <summary>
            Creates an <c>Accumulator</c> that contains the provided values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor(System.Collections.ICollection)">
            <summary>
            Creates an <c>Accumulator</c> that contains the provided values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates an <c>Accumulator</c> that contains the provided values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.Add(System.Double)">
            <summary>
            Adds a real value to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.AddRange(System.Double[])">
            <summary>
            Adds a range of values to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a range of values to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.AddRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds a range of values to the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.Clear">
            <summary>
            Clears (re-initialize) the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.Remove(System.Double)">
            <summary>
            Removes a value from the accumulator.
            </summary>
            <remarks>
            <p>Caution: the <c>Accumulator</c> does not explicitly records the
            added values. Therefore, no exception will be thrown if an attempt
            is made to remove a value that have not been previously added to
            the accumulator.</p>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.RemoveRange(System.Double[])">
            <summary>
            Removes a range of values from the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes a range of values from the accumulator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Accumulator.RemoveRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Removes a range of values from the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Count">
            <summary>
            Gets the number of values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Sum">
            <summary>
            Gets the sum of the values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.SquaredSum">
            <summary>
            Gets the sum of the squared values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Mean">
            <summary>
            Gets the arithmetic mean of the values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.MeanSquared">
            <summary>
            Gets the arithmetic mean of the squared values added to the accumulator. Note that this is not equal to the squared mean of the values.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Variance">
            <summary>
            Gets the variance of the values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.Sigma">
            <summary>
            Gets the standard deviation of the values added to the accumulator.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Accumulator.ErrorEstimate">
            <summary>
            Gets the mean error estimate defined as the square root of the ratio of 
            the standard deviation to the number of values added to the accumulator.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Histogram">
            <summary>Base class for the <i>histogram</i> algorithms.</summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Histogram.buckets">
            <summary>
            Contains all the <c>Bucket</c>s of the <c>Histogram</c>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Histogram.areBucketsSorted">
            <summary>
            Indicates whether the elements of <c>buckets</c> are
            currently sorted.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.#ctor">
            <summary>
            Constructs an empty <c>Histogram</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.Add(MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Adds a <c>Bucket</c> to the <c>Histogram</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.GetContainerOf(System.Double)">
            <summary>
            Returns the <c>Bucket</c> that contains the value <c>v</c>. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.GetContainerIndexOf(System.Double)">
            <summary>
            Returns the index in the <c>Histogram</c> of the <c>Bucket</c>
            that contains the value <c>v</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.JoinBuckets">
            <summary>
            Joins the boundaries of the successive buckets.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.Sort">
            <summary>
            Sort the buckets.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.ToString">
            <summary>
            Prints the buckets contained in the <see cref="T:MathNet.Numerics.Statistics.Histogram"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.OptimalDispersion(System.Int32,System.Collections.ICollection)">
            <summary>
            Returns the optimal dispersion histogram.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.OptimalVariance(System.Int32,System.Collections.ICollection)">
            <summary>
            Returns the optimal variance histogram.
            </summary>
            <param name="bucketCount">The number of buckets in the histogram.</param>
            <param name="distribution"><c>double</c> elements expected.</param>
            <remarks>Requires a computations time quadratic to 
            <c>distribution.Length</c>.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.OptimalFreedom(System.Int32,System.Collections.ICollection)">
            <summary>
            Returns the optimal freedom histogram.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Histogram.OptimalSquaredFreedom(System.Int32,System.Collections.ICollection)">
            <summary>
            Returns the optimal squared freedom histogram.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Gets the <c>Bucket</c> indexed by <c>index</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.Count">
            <summary>
            Gets the number of buckets.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Histogram.TotalDepth">
            <summary>
            Gets the sum of the bucket depths.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Bucket">
            <summary>
            A <see cref="T:MathNet.Numerics.Statistics.Histogram"/> consists of a series of <see cref="T:MathNet.Numerics.Statistics.Bucket"/>s, 
            each representing a region limited by an upper and a lower bound.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Bucket.lowerBound">
            <summary>Lower boundary of the <c>Bucket</c>.</summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Bucket.upperBound">
            <summary>Upper boundary of the <c>Bucket</c>.</summary>
        </member>
        <member name="F:MathNet.Numerics.Statistics.Bucket.depth">
            <summary>Number of points inside the <c>Bucket</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double)">
            <summary>
            Create a new Bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new Bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.#ctor(MathNet.Numerics.Statistics.Bucket)">
            <summary>
            Deep copy constructor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.CompareTo(System.Object)">
            <summary>
            Comparison of two disjoint buckets.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Clone">
            <summary>
            Creates a deep copy of this bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.Equals(System.Object)">
            <summary>
            Checks whether two Buckets are equal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.GetHashCode">
            <summary>
            Provides a hash code for this bucket.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.ToString">
            <summary>
            Formats a human-readable string for this bucket.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.LowerBound">
            <summary>
            Lower Bound of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.UpperBound">
            <summary>
            Upper Bound of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.Width">
            <summary>
            Width of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.Depth">
            <summary>
            Depth of the Bucket.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Statistics.Bucket.DefaultPointComparer">
            <summary>
            Default comparer.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Statistics.Bucket.PointComparer">
            <summary>
            This <c>IComparer</c> performs comparisons between a
            <c>double</c> and a <c>Bucket</c> objet.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Statistics.Bucket.PointComparer.Compare(System.Object,System.Object)">
            <summary>Compares a <c>double</c> and <c>Bucket</c>.</summary>
            <returns>Zero if the <c>double</c> is included
            in the bucket.</returns>
        </member>
        <member name="T:MathNet.Numerics.Transformations.ComplexFourierTransformation">
            <summary>
            <para>The <c>ComplexFourierTransformation</c> provides algorithms
            for one, two and three dimensional fast fourier transformations
            (FFT) on complex vectors.</para>
            <para>This class caches precomputations locally, thus consider reusing/caching it.</para>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.#ctor">
            <summary>
            Construct a complex fourier transformation instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.#ctor(MathNet.Numerics.Transformations.TransformationConvention)">
            <summary>
            Construct a complex fourier transformation instance with a given convention.
            </summary>
            <param name="convention">Fourier Transformation Convention</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.GenerateTimeScale(System.Double,System.Int32)">
            <summary>
            Generate the expected sample points in time space.
            </summary>
            <param name="sampleRate">The sampling rate of the time-space data.</param>
            <param name="numberOfSamplePairs">The real &amp; complex numbers count together as only one sample.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.GenerateFrequencyScale(System.Double,System.Int32)">
            <summary>
            Generate the expected sample points in frequency space.
            </summary>
            <param name="sampleRate">The sampling rate of the time-space data.</param>
            <param name="numberOfSamplePairs">The real &amp; complex numbers count together as only one sample.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformForward(System.Double[])">
            <summary>
            Inplace Forward Transformation in one dimension. Size must be Power of Two.
            </summary>
            <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformForward(MathNet.Numerics.Complex[])">
            <summary>
            Inplace Forward Transformation in one dimension. Size must be Power of Two.
            </summary>
            <param name="samples">Complex samples. Length must be a power of two.</param>
            <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex"/> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformBackward(System.Double[])">
            <summary>
            Inplace Backward Transformation in one dimension. Size must be Power of Two.
            </summary>
            <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformBackward(MathNet.Numerics.Complex[])">
            <summary>
            Inplace Backward Transformation in one dimension. Size must be Power of Two.
            </summary>
            <param name="samples">Complex samples. Length must be a power of two.</param>
            <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex"/> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformForward(System.Double[],System.Int32[])">
            <summary>
            Inplace Forward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
            <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two in each dimension.</param>
            <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformForward(MathNet.Numerics.Complex[],System.Int32[])">
            <summary>
            Inplace Forward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
            <param name="samples">Complex samples. Length must be a power of two in each dimension.</param>
            <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex"/> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
            <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformBackward(System.Double[],System.Int32[])">
            <summary>
            Inplace Backward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
            <param name="samplePairs">Complex samples (even = real, odd = imaginary). Length must be a power of two in each dimension.</param>
            <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.ComplexFourierTransformation.TransformBackward(MathNet.Numerics.Complex[],System.Int32[])">
            <summary>
            Inplace Backward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
            <param name="samples">Complex samples. Length must be a power of two.</param>
            <remarks>
            This method provides a simple shortcut if your data is already available as
            <see cref="T:MathNet.Numerics.Complex"/> type instances. However, if not, consider using the
            overloaded method with double pairs instead, it requires less internal copying.
            </remarks>
            <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        </member>
        <member name="P:MathNet.Numerics.Transformations.ComplexFourierTransformation.Convention">
            <summary>
            Fourier Transformation Convention
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.InternalFFT">
            <summary>
            Internal FFT Implementation and Helper Function. This class caches precomputations locally, thus consider reusing it.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.ReorderSamples(System.Double[])">
            <summary>
            Reorder the samples (single dimension case).
            </summary>
            <param name="samples">Complex samples (even = real, odd = imaginary). Length must be a power of two.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.ReorderSamplesMultiDim(System.Double[],System.Int32,System.Int32)">
            <summary>
            Reorder the samples (multi dimension case).
            </summary>
            <param name="samples">Complex samples (even = real, odd = imaginary). Length must be a power of two in every dimension.</param>
            <param name="stride">Current dimension lengths * steps (steps: next method parameter).</param>
            <param name="step">2 * Product of all previous dimension lengths. (times 2 because of the complex sample pairs)</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.DanielsonLanczosTransform(System.Double[],System.Boolean,MathNet.Numerics.Transformations.TransformationConvention)">
            <summary>
            Apply the danielson lanczos transform.
            </summary>
            <param name="samples">Reordered complex samples (even = real, odd = imaginary). Length must be a power of two.</param>
            <param name="forward">true for forward transformation, false for (unscaled) backward/inverse transform.</param>
            <param name="convention">FFT Convention to be used</param>
            <remarks>The returned results in backward/inverse mode are not scaled yet; scale them using <see cref="M:MathNet.Numerics.Transformations.InternalFFT.Rescale(System.Double[],System.Boolean,MathNet.Numerics.Transformations.TransformationConvention)"/> afterwards.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.ReverseBits(System.Int32)">
            <summary>
            Permutates <c>numberOfBits</c> in ascending order
            and reverses each element's bits afterwards.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.RealCosineCoefficients(System.Int32,System.Boolean)">
            <summary>
            Evaluates complex rotation coefficients if not already available
            and returns the (real) cosine lookup table.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.ImaginarySineCoefficients(System.Int32,System.Boolean)">
            <summary>
            Evaluates complex rotation coefficients if not already available
            and returns the (imaginary) sine lookup table.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.InternalFFT.BuildCoefficientsForLevels(System.Int32)">
            <summary>
            Evaluates complex rotation coefficients if not already available.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.RealFourierTransformation">
            <summary>
            <para>The <c>RealFourierTransformation</c> provides algorithms
            for one, two and three dimensional fast fourier transformations
            (FFT) on real vectors.</para>
            <para>This class caches precomputations locally, thus consider reusing/caching it.</para>
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.#ctor">
            <summary>
            Construct a real fourier transformation instance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.#ctor(MathNet.Numerics.Transformations.TransformationConvention)">
            <summary>
            Construct a real fourier transformation instance with a given convention.
            </summary>
            <param name="convention">Fourier Transformation convention</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.GenerateTimeScale(System.Double,System.Int32)">
            <summary>
            Generate the expected sample points in time space.
            </summary>
            <param name="sampleRate">The sampling rate of the time-space data.</param>
            <param name="numberOfSamples">Number of data samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.GenerateFrequencyScale(System.Double,System.Int32)">
            <summary>
            Generate the expected sample points in frequency space.
            </summary>
            <param name="sampleRate">The sampling rate of the time-space data.</param>
            <param name="numberOfSamples">Number of data samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformForward(System.Double[],System.Double[],System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Outplace Forward Transformation in one dimension for two vectors with the same length.
            Size must be Power of Two.
            </summary>
            <param name="samples1">Real samples. Length must be a power of two.</param>
            <param name="samples2">Real samples. Length must be a power of two.</param>
            <param name="fftReal1">Output for the first sample set, real part.</param>
            <param name="fftImag1">Output for the first sample set, imaginary part</param>
            <param name="fftReal2">Output for the second sample set, real part.</param>
            <param name="fftImag2">Output for the second sample set, imaginary part.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformBackward(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Outplace Backward Transformation in one dimension for two vectors with the same length.
            Size must be Power of Two.
            </summary>
            <param name="fftReal1">Real part of the first vector in frequency space. Length must be a power of two.</param>
            <param name="fftImag1">Imaginary part of the first vector in frequency space. Length must be a power of two.</param>
            <param name="fftReal2">Real part of the second vector in frequency space. Length must be a power of two.</param>
            <param name="fftImag2">Imaginary part of the second vector in frequency space. Length must be a power of two.</param>
            <param name="samples1">Output samples for the first vector.</param>
            <param name="samples2">Output samples for te second vector.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformForward(System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Outplace Forward Transformation in one dimension.
            Size must be Power of Two.
            </summary>
            <param name="samples">Real samples. Length must be a power of two.</param>
            <param name="fftReal">Output of the sample set, real part.</param>
            <param name="fftImag">Output of the sample set, imaginary part.</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformBackward(System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Outplace Backward Transformation in one dimension.
            Size must be Power of Two.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformForward(System.Double[],System.Double[]@,System.Double[]@,System.Int32[])">
            <summary>
            Outplace Forward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
            <param name="samples">Real samples. Length must be a power of two in each dimension.</param>
            <param name="fftReal">Output of the sample set, real part.</param>
            <param name="fftImag">Output of the sample set, imaginary part.</param>
            <param name="dimensionLengths">Sizes, must be Power of Two in each dimension</param>
        </member>
        <member name="M:MathNet.Numerics.Transformations.RealFourierTransformation.TransformBackward(System.Double[],System.Double[],System.Double[]@,System.Int32[])">
            <summary>
            Outplace Backward Transformation in multiple dimensions.
            Size must be Power of Two in each dimension.
            The Data is expected to be ordered such that the last index changes most rapidly (in 2D this means row-by-row when indexing as [y,x]).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Transformations.RealFourierTransformation.Convention">
            <summary>
            Fourier Transformation Convention
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Transformations.TransformationConvention">
            <summary>
            FFT Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.TransformationConvention.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.TransformationConvention.InverseExponent">
            <summary>
            Inverse integrand exponent (forward: positive sign; inverse: negative sign).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.TransformationConvention.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.TransformationConvention.Default">
            <summary>
            Universal; Symmetric scaling and common exponent (used in Maple).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.TransformationConvention.Matlab">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction (used in Matlab). [= AsymmetricScaling]
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Transformations.TransformationConvention.NumericalRecipes">
            <summary>
            Inverse integrand exponent; No scaling at all (used in all Numerical Recipes based implementations). [= InverseExponent | NoScaling]
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Trig">
            <summary>
            Double-precision trigonometry toolkit.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a degree (360-periodic) angle.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.GradToRadian(System.Double)">
            <summary>
            Converts a newgrad (400-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a newgrad (400-periodic) angle.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToGrad(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a newgrad (400-periodic) angle.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.GradToDegree(System.Double)">
            <summary>
            Converts a newgrad (400-periodic) angle to a degree (360-periodic) angle.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sine(System.Double)">
            <summary>
            Trigonometric Sine (Sinus) of an angle in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosine(System.Double)">
            <summary>
            Trigonometric Cosine (Cosinus) of an angle in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tangent(System.Double)">
            <summary>
            Trigonometric Tangent (Tangens) of an angle in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cotangent(System.Double)">
            <summary>
            Trigonometric Cotangent (Cotangens) of an angle in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Secant(System.Double)">
            <summary>
            Trigonometric Secant (Sekans) of an angle in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosecant(System.Double)">
            <summary>
            Trigonometric Cosecant (Cosekans) of an angle in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSine(System.Double)">
            <summary>
            Trigonometric Arcus Sine (Arkussinus) in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosine(System.Double)">
            <summary>
            Trigonometric Arcus Cosine (Arkuscosinus) in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseTangent(System.Double)">
            <summary>
            Trigonometric Arcus Tangent (Arkustangens) in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseTangentFromRational(System.Double,System.Double)">
            <summary>
            The principal argument (in radian) of the complex number x+I*y
            </summary>
            <param name="nominator">y</param>
            <param name="denominator">x</param>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCotangent(System.Double)">
            <summary>
            Trigonometric Arcus Cotangent (Arkuscotangens) in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseSecant(System.Double)">
            <summary>
            Trigonometric Arcus Secant (Arkussekans) in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseCosecant(System.Double)">
            <summary>
            Trigonometric Arcus Cosecant (Arkuscosekans) in radian
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Sine (Sinus hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cosine (Cosinus hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicTangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Tangent (Tangens hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCotangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cotangent (Cotangens hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicSecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Secant (Sekans hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.HyperbolicCosecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Cosecant (Cosekans hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Sine (Areasinus hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosine(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Cosine (Areacosinus hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicTangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Tangent (Areatangens hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCotangent(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Cotangent (Areacotangens hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicSecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Secant (Areasekans hyperbolicus)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.InverseHyperbolicCosecant(System.Double)">
            <summary>
            Trigonometric Hyperbolic Area Cosecant (Areacosekans hyperbolicus)
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Tuple`2">
            <summary>
            A generic vector of two values, useful e.g. to return two values
            in a function without using out-parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Tuple`2.#ctor(`0,`1)">
            <summary>
            Construct a tuple
            </summary>
            <param name="first">The first tuple value</param>
            <param name="second">The second tuple value</param>
        </member>
        <member name="M:MathNet.Numerics.Tuple`2.Equals(MathNet.Numerics.Tuple{`0,`1})">
            <summary>
            True if the the first values of both tuples match and the second valus of both tuples match.
            </summary>
            <param name="other">The other tuple to compare with.</param>
        </member>
        <member name="P:MathNet.Numerics.Tuple`2.First">
            <summary>
            The first tuple value
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Tuple`2.Second">
            <summary>
            The second tuple value
            </summary>
        </member>
    </members>
</doc>
