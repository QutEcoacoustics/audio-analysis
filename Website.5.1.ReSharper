<Configuration>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <AgentSmithCSharpStyleSettings version="1">
      <CodeStyleSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <CustomDictionaries>
          <Dictionaries />
        </CustomDictionaries>
        <StringsDictionary>en-US</StringsDictionary>
        <IdentifierDictionary>en-US</IdentifierDictionary>
        <LastSelectedCustomDictionary>en-US</LastSelectedCustomDictionary>
        <CommentsSettings>
          <DictionaryName>en-US</DictionaryName>
          <CommentMatch>
            <Match>
              <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
              <Declaration>Any</Declaration>
              <IsReadOnly>Maybe</IsReadOnly>
              <IsStatic>Maybe</IsStatic>
              <ParamDirection>Any</ParamDirection>
            </Match>
          </CommentMatch>
          <SuppressIfBaseHasComment>false</SuppressIfBaseHasComment>
          <MaxLineLength>80</MaxLineLength>
        </CommentsSettings>
        <NamingConventionSettings>
          <Rules>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Non private properties, methods, events should be in pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Private properties, methods, events should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Fields should be underscore camel.</Description>
              <MustHavePrefixes>
                <string>_</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Variable</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Variable should be declared in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Parameter</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Function parameters should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Namespaces should be in Pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Constants should be in capital.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>UpperCase</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Acronyms should not have more than 2 characters.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>MatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>None</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Names should not have underscore character</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;_)</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>TestFixtures should end with Test.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Test</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Test</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Test methods should start with Test.</Description>
              <MustHavePrefixes>
                <string>Test</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Test</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Enumerations should not end with Enum.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Enum</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Do not name enumerations reserved.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Event</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Event should not have Before or After prefix.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Before</string>
                <string>After</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Flags enums should have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>s</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>true</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Enums that are not flags should not have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>s</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Attribute</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Attribute should end with Attribute.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Attribute</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.EventArgs</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>EventArgs should end with EventArgs.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>EventArgs</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Exception</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Exceptions should end with Exception.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Exception</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Stack should end with Collection or Stack.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Stack</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Collections should end with Collection.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Dictionary should end with Dictionary.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Dictionary</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Queue should end with Collection or Queue.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Queue</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Interface</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Interfaces should be in Pascal and start with I.</Description>
              <MustHavePrefixes>
                <string>I</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
          </Rules>
          <Exclusions />
        </NamingConventionSettings>
        <IdentifiersToSpellCheck>
          <Match>
            <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
            <Declaration>Any</Declaration>
            <IsReadOnly>Maybe</IsReadOnly>
            <IsStatic>Maybe</IsStatic>
            <ParamDirection>Any</ParamDirection>
          </Match>
        </IdentifiersToSpellCheck>
        <PatternsToIgnore>
          <string>(?#email)\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</string>
          <string>(?#url)http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</string>
        </PatternsToIgnore>
      </CodeStyleSettings>
    </AgentSmithCSharpStyleSettings>
    <CSharp>
      <FormatSettings>
        <ALIGN_MULTILINE_ARGUMENT>False</ALIGN_MULTILINE_ARGUMENT>
        <BLANK_LINES_AROUND_SINGLE_LINE_FIELD>1</BLANK_LINES_AROUND_SINGLE_LINE_FIELD>
        <BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE>1</BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE>
        <BLANK_LINES_BETWEEN_USING_GROUPS>1</BLANK_LINES_BETWEEN_USING_GROUPS>
        <FORCE_ATTRIBUTE_STYLE>SEPARATE</FORCE_ATTRIBUTE_STYLE>
        <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
        <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
        <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
        <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
        <INDENT_ANONYMOUS_METHOD_BLOCK>False</INDENT_ANONYMOUS_METHOD_BLOCK>
        <INDENT_EMBRACED_INITIALIZER_BLOCK>False</INDENT_EMBRACED_INITIALIZER_BLOCK>
        <KEEP_BLANK_LINES_IN_CODE>1</KEEP_BLANK_LINES_IN_CODE>
        <KEEP_BLANK_LINES_IN_DECLARATIONS>1</KEEP_BLANK_LINES_IN_DECLARATIONS>
        <KEEP_USER_LINEBREAKS>False</KEEP_USER_LINEBREAKS>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>False</PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>
        <PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>False</PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>
        <PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE>False</PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE>
        <PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE>False</PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE>
        <PLACE_WHILE_ON_NEW_LINE>True</PLACE_WHILE_ON_NEW_LINE>
        <REDUNDANT_THIS_QUALIFIER_STYLE>ALWAYS_USE</REDUNDANT_THIS_QUALIFIER_STYLE>
        <SIMPLE_EMBEDDED_STATEMENT_STYLE>ON_SINGLE_LINE</SIMPLE_EMBEDDED_STATEMENT_STYLE>
        <SPACE_AFTER_TYPECAST_PARENTHESES>False</SPACE_AFTER_TYPECAST_PARENTHESES>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
        <SPACE_BEFORE_SIZEOF_PARENTHESES>False</SPACE_BEFORE_SIZEOF_PARENTHESES>
        <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
        <SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>True</SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>
        <STICK_COMMENT>False</STICK_COMMENT>
        <WRAP_AFTER_DECLARATION_LPAR>True</WRAP_AFTER_DECLARATION_LPAR>
        <WRAP_AFTER_INVOCATION_LPAR>True</WRAP_AFTER_INVOCATION_LPAR>
        <WRAP_ARGUMENTS_STYLE>CHOP_IF_LONG</WRAP_ARGUMENTS_STYLE>
        <WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT>True</WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT>
        <WRAP_EXTENDS_LIST_STYLE>CHOP_IF_LONG</WRAP_EXTENDS_LIST_STYLE>
        <WRAP_PARAMETERS_STYLE>CHOP_IF_LONG</WRAP_PARAMETERS_STYLE>
      </FormatSettings>
      <UsingsSettings>
        <AddImportsToDeepestScope>True</AddImportsToDeepestScope>
        <QualifiedUsingAtNestedScope>True</QualifiedUsingAtNestedScope>
      </UsingsSettings>
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
        <ExceptionName IsNull="False">
        </ExceptionName>
        <OverrideDefaultSettings>True</OverrideDefaultSettings>
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
        <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
        <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="LocalConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
        <Abbreviation Text="ID" />
        <Abbreviation Text="UI" />
        <Abbreviation Text="CSV" />
        <Abbreviation Text="XML" />
      </Naming2>
      <CustomMemberReorderingPatterns><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns">

    <!-- Do not reorder COM interfaces -->
    <Pattern>
        <Match>
            <And Weight="2000">
                <Kind Is="interface"/>
                <HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute"
                              Inherit="true"/>
            </And>
        </Match>
    </Pattern>

    <!-- Do not reorder P/Invoke structs -->
    <Pattern>
        <Match>
            <And Weight="2000">
                <Or>
                    <Kind Is="struct"/>
                    <Kind Is="class"/>
                </Or>
                <HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute"
                              Inherit="true"/>
            </And>
        </Match>
    </Pattern>

    <!-- Do not reorder P/Invoke classes (called xxxNativeMethods) -->
    <Pattern>
        <Match>
            <And Weight="2000">
                <Kind Is="class"/>
                <Name Is=".*NativeMethods" />
            </And>
        </Match>
    </Pattern>

    <!-- StyleCop pattern -->
    <Pattern RemoveAllRegions="true">
        <Match>
            <Or Weight="1000" >
                <Kind Is="class" />
                <Kind Is="struct" />
                <Kind Is="interface"/>
            </Or>
        </Match>

        <!-- constants and fields -->
        <Entry>
            <Match>
                <Or>
                    <Kind Is="constant"/>
                    <Kind Is="field"/>
                </Or>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private"/>
                <Kind Order="constant field"/>
                <Readonly/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Constants and Fields"/>
        </Entry>

        <!-- constructors -->
        <Entry>
            <Match>
                <Or Weight="200">
                    <Kind Is="constructor"/>
                    <Kind Is="destructor"/>
                </Or>
            </Match>
            <Sort>
                <Static/>
                <Kind Order="constructor destructor"/>
                <Access Order="public internal protected-internal protected private"/>
            </Sort>
            <Group Region="Constructors and Destructors"/>
        </Entry>

        <!-- delegates -->
        <Entry>
            <Match>
                <Kind Is="delegate"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static />
                <Name/>
            </Sort>
            <Group Region="Delegates"/>
        </Entry>

        <!-- events -->
        <Entry>
            <Match>
                <Kind Is="event"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static />
                <Name/>
            </Sort>
            <Group Region="Events"/>
        </Entry>

        <!-- enum -->
        <Entry>
            <Match>
                <Kind Is="enum"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
            <Group Region="Enums"/>
        </Entry>

        <!-- interfaces -->
        <Entry>
            <Match>
                <Kind Is="interface" />
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
            <Group Region="Interfaces"/>
        </Entry>

        <!-- properties -->
        <Entry>
            <Match>
                <Kind Is="property"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Properties"/>
        </Entry>

        <!-- indexers -->
        <Entry>
            <Match>
                <Kind Is="indexer"
                      Weight="300" />
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Indexers"/>
        </Entry>

        <!-- operator -->
        <Entry>
            <Match>
                <Kind Is="operator"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private" />
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Operators"/>
        </Entry>

        <!-- public methods -->
        <Entry>
            <Match>
                <And>
                    <Kind Is="method"/>
                    <Access Is="public"/>
                </And>
            </Match>
            <Sort>
                <Access Order="public"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Public Methods"/>
        </Entry>

        <!-- Implemented Interfaces -->
        <Entry>
            <Match>
                <And Weight="500">
                    <Kind Is="method"/>
                    <ImplementsInterface CLRName=".*"/>
                </And>
            </Match>
            <Sort>
                <ImplementsInterface />
                <Access Order="public internal protected-internal protected private"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Implemented Interfaces">
                <ImplementsInterface Region="${ImplementsInterface}" />
            </Group>
        </Entry>

        <!-- other methods -->
        <Entry>
            <Match>
                <Kind Is="method"/>
            </Match>
            <Sort>
                <Access Order="public internal protected-internal protected private"/>
                <Static/>
                <Name/>
            </Sort>
            <Group Region="Methods"/>
        </Entry>

        <!-- Nested structs -->
        <Entry>
            <Match>
                <Kind Is="struct"
                      Weight="600" />
            </Match>
            <Sort>
                <Static />
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
        </Entry>

        <!-- Nested classes -->
        <Entry>
            <Match>
                <Kind Is="class"
                      Weight="700" />
            </Match>
            <Sort>
                <Static />
                <Access Order="public internal protected-internal protected private" />
                <Name/>
            </Sort>
        </Entry>

        <!-- all other members -->
        <Entry/>

    </Pattern>
</Patterns>
]]></CustomMemberReorderingPatterns>
    </CSharp>
    <VB>
      <FormatSettings />
      <ImportsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </VB>
    <Web>
      <Naming2 />
    </Web>
    <Xaml>
      <Naming2>
        <UserRule Name="XAML_FIELD" Inspect="True" Prefix="_" Suffix="" Style="aaBb" />
        <UserRule Name="NAMESPACE_ALIAS" Inspect="True" Prefix="" Suffix="" Style="AaBb" />
        <UserRule Name="XAML_RESOURCE" Inspect="True" Prefix="" Suffix="" Style="AaBb" />
      </Naming2>
    </Xaml>
    <XML>
      <FormatSettings />
    </XML>
    <GenerateMemberBody />
    <Naming2>
      <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
      <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      <ExceptionName IsNull="False">
      </ExceptionName>
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="False" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="False" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
    </Naming2>
  </CodeStyleSettings>
  <Daemon.SolutionSettings>
    <SkipFilesAndFolders>
      <Item>BDAEA7B5-28BE-45D5-952E-76820E474649/d:Linq/f:DB.designer.cs</Item>
    </SkipFilesAndFolders>
  </Daemon.SolutionSettings>
</Configuration>