utils:::menuInstallLocal()
q()
##################################################################################
####                        CANETOAD RECOGNITION
##################################################################################
setwd("C:/projects/Mixophyes")
##################################################################################
####                        CANETOAD PARAMETER
##################################################################################
#################################################################################
#                 set the parameter for producing spectrogram
#################################################################################
TFRAME <- frameSize <- 1024
hamming <- 0.54-0.46*cos(2 * pi * c(1:frameSize) / (frameSize - 1))
library(tuneR)
library(audio)
sig.a <- load.wave('Mixophyes.wav')
samp.rate <- sig.a$rate
len <- length(sig.a)
recordingDuration <- len / samp.rate
window.power <- sum(hamming ^ 2)
epsilon <- (1 / 2) ^ (16 - 1)
min.dc <- 10 * log10(epsilon ^ 2 / window.power / samp.rate)
min.freq <- 10 * log10(epsilon ^ 2 / window.power / samp.rate * 2)
# source("CalculateRequiredFrameOverlap.R")  # LOAD FUNCTION
# windowOverlap <- CalculateRequiredFrameOverlap(samp.rate,
#                                                frameSize,
#                                                CANETOAD_MAX_OSCI_FREQ)
windowOverlap <- 0.5
overlap <- windowOverlap
#nrow <- frameSize
Shift <- frameSize * (1-overlap)
ncol <- floor((len - frameSize) / Shift + 1)
amp <- matrix(0, (frameSize/2+1), ncol)
for(i in 1:ncol){
frame.a <- (i-1)*Shift + 1
frame.b <- frame.a + (frameSize - 1)
sig <- sig.a[frame.a:frame.b]
sig <- sig * hamming
amp.a <- Mod(fft(sig))
amp.a <- amp.a[1:(frameSize/2+1)]
# cat("ss",length(amp.a))
fq.row <- amp.a[1 : length(amp.a)]
fq.row[which(fq.row <  epsilon)] <- min.freq
fq.row[which(fq.row >= epsilon)] <- 10 * log10(fq.row[which(fq.row >= epsilon)] ^
2 / window.power / samp.rate)
#  fq.row <- 10 * log10(fq.row)
amp[1:(frameSize/2+1),i] <- fq.row
}
#################################################################################
# amp <- floor((amp - min(amp))/(max(amp) - min(amp))*256)
# library(pixmap)
# x <- pixmapGrey(amp, nrow = nrow(amp),ncol = ncol(amp))
# plot(x)
#################################################################################
#                  Smooth data ----amp
#################################################################################
sig <- amp
first.temp <- sig[1, ]
sig <- filter(sig, rep(1 / 3, 3))
sig[1, ] <- first.temp
amp <- sig[c(1:(TFRAME / 2 )), ]
##################################################################################
####            Calculate some needed parameters
##################################################################################
recordingDuration <- (len / samp.rate)
source("fBinWidth.R")
FBinWidth <- fBinWidth(samp.rate,
TFRAME / 2)
source("framePerSecond.R")
FramePerSecond <- framePerSecond(samp.rate,
frameSize,
windowOverlap)
#write.table(log2(t(amp1)),file="outfile1.xls",sep="\t", col.names = F, row.names = F)
##################################################################################
####                        CANETOAD RECOGNITION
##################################################################################
setwd("C:/projects/Mixophyes")
##################################################################################
####                        CANETOAD PARAMETER
##################################################################################
#################################################################################
#                 set the parameter for producing spectrogram
#################################################################################
TFRAME <- frameSize <- 1024
hamming <- 0.54-0.46*cos(2 * pi * c(1:frameSize) / (frameSize - 1))
library(tuneR)
library(audio)
sig.a <- load.wave('20 Mixophyes fasciolatus.wav')
samp.rate <- sig.a$rate
len <- length(sig.a)
recordingDuration <- len / samp.rate
window.power <- sum(hamming ^ 2)
epsilon <- (1 / 2) ^ (16 - 1)
min.dc <- 10 * log10(epsilon ^ 2 / window.power / samp.rate)
min.freq <- 10 * log10(epsilon ^ 2 / window.power / samp.rate * 2)
# source("CalculateRequiredFrameOverlap.R")  # LOAD FUNCTION
# windowOverlap <- CalculateRequiredFrameOverlap(samp.rate,
#                                                frameSize,
#                                                CANETOAD_MAX_OSCI_FREQ)
windowOverlap <- 0.5
overlap <- windowOverlap
#nrow <- frameSize
Shift <- frameSize * (1-overlap)
ncol <- floor((len - frameSize) / Shift + 1)
amp <- matrix(0, (frameSize/2+1), ncol)
for(i in 1:ncol){
frame.a <- (i-1)*Shift + 1
frame.b <- frame.a + (frameSize - 1)
sig <- sig.a[frame.a:frame.b]
sig <- sig * hamming
amp.a <- Mod(fft(sig))
amp.a <- amp.a[1:(frameSize/2+1)]
# cat("ss",length(amp.a))
fq.row <- amp.a[1 : length(amp.a)]
fq.row[which(fq.row <  epsilon)] <- min.freq
fq.row[which(fq.row >= epsilon)] <- 10 * log10(fq.row[which(fq.row >= epsilon)] ^
2 / window.power / samp.rate)
#  fq.row <- 10 * log10(fq.row)
amp[1:(frameSize/2+1),i] <- fq.row
}
#################################################################################
# amp <- floor((amp - min(amp))/(max(amp) - min(amp))*256)
# library(pixmap)
# x <- pixmapGrey(amp, nrow = nrow(amp),ncol = ncol(amp))
# plot(x)
#################################################################################
#                  Smooth data ----amp
#################################################################################
sig <- amp
first.temp <- sig[1, ]
sig <- filter(sig, rep(1 / 3, 3))
sig[1, ] <- first.temp
amp <- sig[c(1:(TFRAME / 2 )), ]
##################################################################################
####            Calculate some needed parameters
##################################################################################
recordingDuration <- (len / samp.rate)
source("fBinWidth.R")
FBinWidth <- fBinWidth(samp.rate,
TFRAME / 2)
source("framePerSecond.R")
FramePerSecond <- framePerSecond(samp.rate,
frameSize,
windowOverlap)
#write.table(log2(t(amp1)),file="outfile1.xls",sep="\t", col.names = F, row.names = F)
##################################################################################
####                        CANETOAD RECOGNITION
##################################################################################
setwd("C:/projects/Mixophyes")
##################################################################################
####                        CANETOAD PARAMETER
##################################################################################
#################################################################################
#                 set the parameter for producing spectrogram
#################################################################################
TFRAME <- frameSize <- 1024
hamming <- 0.54-0.46*cos(2 * pi * c(1:frameSize) / (frameSize - 1))
library(tuneR)
library(audio)
sig.a <- load.wave('20 Mixophyes fasciolatus_test.wav')
samp.rate <- sig.a$rate
len <- length(sig.a)
recordingDuration <- len / samp.rate
window.power <- sum(hamming ^ 2)
epsilon <- (1 / 2) ^ (16 - 1)
min.dc <- 10 * log10(epsilon ^ 2 / window.power / samp.rate)
min.freq <- 10 * log10(epsilon ^ 2 / window.power / samp.rate * 2)
# source("CalculateRequiredFrameOverlap.R")  # LOAD FUNCTION
# windowOverlap <- CalculateRequiredFrameOverlap(samp.rate,
#                                                frameSize,
#                                                CANETOAD_MAX_OSCI_FREQ)
windowOverlap <- 0.5
overlap <- windowOverlap
#nrow <- frameSize
Shift <- frameSize * (1-overlap)
ncol <- floor((len - frameSize) / Shift + 1)
amp <- matrix(0, (frameSize/2+1), ncol)
for(i in 1:ncol){
frame.a <- (i-1)*Shift + 1
frame.b <- frame.a + (frameSize - 1)
sig <- sig.a[frame.a:frame.b]
sig <- sig * hamming
amp.a <- Mod(fft(sig))
amp.a <- amp.a[1:(frameSize/2+1)]
# cat("ss",length(amp.a))
fq.row <- amp.a[1 : length(amp.a)]
fq.row[which(fq.row <  epsilon)] <- min.freq
fq.row[which(fq.row >= epsilon)] <- 10 * log10(fq.row[which(fq.row >= epsilon)] ^
2 / window.power / samp.rate)
#  fq.row <- 10 * log10(fq.row)
amp[1:(frameSize/2+1),i] <- fq.row
}
#################################################################################
# amp <- floor((amp - min(amp))/(max(amp) - min(amp))*256)
# library(pixmap)
# x <- pixmapGrey(amp, nrow = nrow(amp),ncol = ncol(amp))
# plot(x)
#################################################################################
#                  Smooth data ----amp
#################################################################################
sig <- amp
first.temp <- sig[1, ]
sig <- filter(sig, rep(1 / 3, 3))
sig[1, ] <- first.temp
amp <- sig[c(1:(TFRAME / 2 )), ]
##################################################################################
####            Calculate some needed parameters
##################################################################################
recordingDuration <- (len / samp.rate)
source("fBinWidth.R")
FBinWidth <- fBinWidth(samp.rate,
TFRAME / 2)
source("framePerSecond.R")
FramePerSecond <- framePerSecond(samp.rate,
frameSize,
windowOverlap)
#write.table(log2(t(amp1)),file="outfile1.xls",sep="\t", col.names = F, row.names = F)
min(amp)
max(amp)
library(seewave)
duration <- recordingDuration
samp.freq <- 22.05
x <- seq(0, duration, duration / (nframe-1))
y <- seq(0, samp.freq / 2, samp.freq / 2 / 511)
filled.contour(x,y,t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(0,20),20))
library(seewave)
install.packages("seewave")
library(seewave)
#library(seewave)
duration <- recordingDuration
samp.freq <- 22.05
x <- seq(0, duration, duration / (TFRAME-1))
y <- seq(0, samp.freq / 2, samp.freq / 2 / 511)
filled.contour(x,y,t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(0,20),20))
#library(seewave)
duration <- recordingDuration
samp.freq <- 22.05
x <- seq(0, duration, duration / (ncol(amp)-1))
y <- seq(0, samp.freq / 2, samp.freq / 2 / 511)
filled.contour(x,y,t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(0,20),20))
filled.contour(x,y,t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(-20,0),20))
t(abs(amp) / max(abs(amp)) *20 )
filled.contour(x,y,t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(0,20),20))
filled.contour(x,y,10-t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(0,20),20))
filled.contour(x,y,20-t(abs(amp) / max(abs(amp)) *20 ),col=gray(seq(1,0,-1/19)),levels=pretty(c(0,20),20))
