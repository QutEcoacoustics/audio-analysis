TRAINING:

1) The user select the samples of the event(s) to be detected by selecting a window in the spectrogram.
   
2) One-second samples of silence will be automatically extracted from the samples. 

3) Create a dictionary file 'dict' that looks like this: (This file is automatically created by our application)

CURRAWONG	[CURRAWONG]		CURRAWONG
SENT_END	[]			SP
SENT_START	[]			SP
SP		[SP]			SP

Events are in alphabetical order.

NOTE: This file is automatically created by our application.

4) Create a 'prompts' files (list of events to link to the wave files). 
	E.g. one prompt file for the Currawong; one for the Silence. I put them under the same './Database/<Event>/DataSet' folder

 
5) Create the Master Label File words.mlf
	$ perl prompts2mlf ./Currawong6/words.mlf ./Database2/TrainingSet1/prompts

6) Create the phone level transcription 'phones.mlf':
	./HLEd -A -D -T 1 -l '*' -d ./Currawong6/dict -i ./Currawong6/phones.mlf ./Currawong6/sp_rules.led ./Currawong6/words.mlf
   
   where sp_rules.led is a script of rules. 
   This produces the file 'phones.mlf' in which each word in 'words.mlf' is surrounded by the model SIL.


NOTE: In our implementation the file 'phones.mlf' is automatically built from the training set and the label files produced by
      our segmentation tool. Points (4), (5) and (6) are for manually build the phonetic transcription.


7) Create the config file 'config_mfcc'. (This is the file 'config' specified by the user)

8) Create the mapping file 'codetrain.scp' from .wav to .mfc (This file is automatically created by our application)

9) Extract feature vectors (mfc files) by typing:
	./HCopy -A -D -T 1 -C ./Currawong6/config_mfcc -S ./Currawong6/codetrain.scp

10) Create lists 'train.scp' of feature vectors extracted at step (9) (This file is automatically created by our application)

11) Create the file 'config_train' (This file is automatically created by our application)

12) Create the prototype HMM file 'proto'. Set the correct vector dimension, MFCC_D_A takes 36 values; MFCC_E_D takes 26 values; MFCC takes 12 values.
   Initialize <Mean>, <Variance> and <TransP>. (Here we use a 5-state model for the Currawong)
   (This file is automatically created by our application)

13) Create a folder hmm0 and run the command:	
	./HCompV -A -D -T 1 -C ./Currawong6/config_train -f 0.01 -m -S ./Currawong6/train.scp -M ./Currawong6/hmm0 ./Currawong6/proto
   
    hmm0 contains the Flat Start model in which the global mean and variance as been computed for some trining data (the whole set in our experiments).
    All models now share the same mean, variance and transition probability matrix. This latter is still the same as the initial 'proto' model.

14) Create the file 'monophones' which lists the events to be trained (including 'SP'). 
    (This is the file 'bcplist' that our application creates and puts in the folder 'lists')

15) Copy the 'monophones' file into the hmm0 folder and rename it to 'hmmdefs'

16) Copy and paste the content of 'proto' under hmm0 from the 5 row onwards under each word in 'hmmdefs'.
    Doublequote the word and put ~h in front of them.

17) Modify the SP model to make it a 3-state model.
		- remove states from 5 onwards in the "SP" model
		- change <NUMSTATES> to 5
		- change <TRANSP> to 5 
		- change matrix in <TRANSP> to 3 by 3 array:
0.000000e+000 1.000000e+000 0.000000e+000 0.000000e+000 0.000000e+000
0.000000e+000 4.000000e-001 2.000000e-001 4.000000e-001 0.000000e+000
0.000000e+000 0.000000e+000 6.000000e-001 4.000000e-001 0.000000e+000
0.000000e+000 4.000000e-001 0.000000e+000 3.000000e-001 3.000000e-001
0.000000e+000 0.000000e+000 0.000000e+000 0.000000e+000 0.000000e+000

NOTE: steps 15, 16 and 17 are performed by our application. The user can decide on the topolgy of the HMMS.


18) Create a 'macros' file. 
	Copy the content of 'vfloors' to 'macros'.
	Copy the first 3 lines of 'proto' in hmm0 and past them at the top of the 'macros' file. 

19) Create new folders named 'hmmx' with x ranging from 1 to 3 (or so). 


20) Reestimate the model parameters
With standard 'beam searh mechanism' (pruning) parameters:
./HERest -A -D -T 1 -C ./Currawong6/config_train -I ./Currawong6/phones.mlf -t 250.0 150.0 1000.0 -S ./Currawong6/train.scp -H ./Currawong6/hmm0/macros -H ./Currawong6/hmm0/hmmdefs -M ./Currawong6/hmm1 ./Currawong6/monophones
./HERest -A -D -T 1 -C ./Currawong6/config_train -I ./Currawong6/phones.mlf -t 250.0 150.0 1000.0 -S ./Currawong6/train.scp -H ./Currawong6/hmm1/macros -H ./Currawong6/hmm1/hmmdefs -M ./Currawong6/hmm2 ./Currawong6/monophones
./HERest -A -D -T 1 -C ./Currawong6/config_train -I ./Currawong6/phones.mlf -t 250.0 150.0 1000.0 -S ./Currawong6/train.scp -H ./Currawong6/hmm2/macros -H ./Currawong6/hmm2/hmmdefs -M ./Currawong6/hmm3 ./Currawong6/monophones

NOTE: Steps 18, 19 and 20 are permormed by our application in a more flexible manner. Regardless the number of iterations used to re-estimate the model, 
      the result from the last iteration will always be put in 'hmms\hmm.2\hmmdefs'