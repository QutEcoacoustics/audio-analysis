<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord.Audio</name>
    </assembly>
    <members>
        <member name="T:Accord.Audio.Filters.EnvelopeFilter">
            <summary>
             Time-domain envelope detector.
            </summary>
            
            <remarks>
             <para>
             To extract the envelope of a time-domain signal, we must first compute
             the absolute signal values and then pass it through a low-pass filter.</para>
            </remarks>
            
        </member>
        <member name="T:Accord.Audio.Filters.BaseFilter">
            <summary>
              Base signal processing filter
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Filters.IFilter">
            <summary>
            Audio processing filter interface.
            </summary>
            
            <remarks>The interface defines the set of methods, which should be
            provided by all signal processing filters. Methods of this interface
            keep the source signal unchanged and returt the result of signal processing
            filter as new signal.</remarks>
            
        </member>
        <member name="M:Accord.Audio.Filters.IFilter.Apply(Accord.Audio.Signal)">
             <summary>
               Apply filter to an audio signal.
             </summary>
             
             <param name="signal">Source signal to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source sample.</returns>
             
             <remarks>The method keeps the source sample unchanged and returns the
             the result of the signal processing filter as new sample.</remarks> 
            
        </member>
        <member name="M:Accord.Audio.Filters.IFilter.Apply(Accord.Audio.Signal[])">
             <summary>
               Apply filter to a windowed audio signal.
             </summary>
             
             <param name="signal">Source signal to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source sample.</returns>
             
             <remarks>The method keeps the source sample unchanged and returns the
             the result of the signal processing filter as new sample.</remarks> 
            
        </member>
        <member name="M:Accord.Audio.Filters.BaseFilter.Apply(Accord.Audio.Signal)">
            <summary>
              Applies the filter to a signal.
            </summary>
        </member>
        <member name="M:Accord.Audio.Filters.BaseFilter.Apply(Accord.Audio.Signal[])">
            <summary>
              Applies the filter to a windowed signal.
            </summary>
        </member>
        <member name="M:Accord.Audio.Filters.BaseFilter.ProcessFilter(Accord.Audio.Signal,Accord.Audio.Signal)">
            <summary>
              Processes the filter.
            </summary>
        </member>
        <member name="P:Accord.Audio.Filters.BaseFilter.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            <value>The format translations.</value>
            <remarks>
              The dictionary defines which sample formats are supported for
              source signals and which sample format will be used for resulting signal.
            </remarks>
        </member>
        <member name="M:Accord.Audio.Filters.EnvelopeFilter.#ctor(System.Single)">
            <summary>
              Constructs a new Envelope filter
            </summary>
        </member>
        <member name="M:Accord.Audio.Filters.EnvelopeFilter.ProcessFilter(Accord.Audio.Signal,Accord.Audio.Signal)">
            <summary>
              Processes the filter.
            </summary>
        </member>
        <member name="P:Accord.Audio.Filters.EnvelopeFilter.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            <value>The format translations.</value>
            <remarks>
              The dictionary defines which sample formats are supported for
              source signals and which sample format will be used for resulting signal.
            </remarks>
        </member>
        <member name="P:Accord.Audio.Filters.EnvelopeFilter.Alpha">
            <summary>
              Alpha
            </summary>
        </member>
        <member name="T:Accord.Audio.ComplexFilters.CombFilter">
            <summary>
              Comb filter.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.ComplexFilters.BaseComplexFilter">
            <summary>
              Base complex signal processing filter.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.ComplexFilters.IComplexFilter">
            <summary>
              Audio processing filter, which operates with Fourier transformed
              complex audio signal.
            </summary>
            
            <remarks>The interface defines the set of methods, which should be
            provided by all signal processing filter, which operate with Fourier
            transformed complex image.</remarks>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.IComplexFilter.Apply(Accord.Audio.ComplexSignal)">
            <summary>
              Apply filter to complex signal.
            </summary>
            
            <param name="complexSignal">Complex signal to apply filter to.</param>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.IComplexFilter.Apply(Accord.Audio.ComplexSignal[])">
            <summary>
              Apply filter to a windowed complex signal.
            </summary>
            
            <param name="complexSignal">Complex signal to apply filter to.</param>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.BaseComplexFilter.Apply(Accord.Audio.ComplexSignal)">
            <summary>
              Applies the filter to a signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.BaseComplexFilter.Apply(Accord.Audio.ComplexSignal[])">
            <summary>
              Applies the filter to a windowed signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.BaseComplexFilter.ProcessFilter(Accord.Audio.ComplexSignal,Accord.Audio.ComplexSignal)">
            <summary>
              Processes the filter.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.CombFilter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new Comb filter.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.CombFilter.ProcessFilter(Accord.Audio.ComplexSignal,Accord.Audio.ComplexSignal)">
            <summary>
            Processes the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.ComplexFilters.CombFilter.BeatsPerMinute">
            <summary>
              Gets or sets the current BPM for the underlying impulse generator.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.ComplexFilters.CombFilter.Length">
            <summary>
              Gets or sets the legth of the comb filter.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.ComplexFilters.CombFilter.Channels">
            <summary>
              Gets or sets the number of channels for the filter.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.IAudioOutput">
            <summary>
              Audio Output Device Interface
            </summary>
            
        </member>
        <member name="M:Accord.Audio.IAudioOutput.Play">
            <summary>
              Starts playing the buffer
            </summary>
            
        </member>
        <member name="M:Accord.Audio.IAudioOutput.Stop">
            <summary>
              Stops playing the buffer
            </summary>
            
        </member>
        <member name="M:Accord.Audio.IAudioOutput.SignalToStop">
            <summary>
              Signals audio output to stop its work.
            </summary>
            
            <remarks>Signals audio output to stop its background thread, stop to
            request new frames and free resources.</remarks>
            
        </member>
        <member name="M:Accord.Audio.IAudioOutput.WaitForStop">
            <summary>
              Wait until audio output has stopped.
            </summary>
            
            <remarks>Waits for audio output stopping after it was signalled to stop using
            <see cref="M:Accord.Audio.IAudioOutput.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioOutput.Output">
            <summary>
              Audio output.
            </summary>
            
            <remarks>
              <para>
              The meaning of the property depends on particular audio output.
              Depending on audio source it may be a file name, driver guid, URL
              or any other string describing the audio source.</para>
            </remarks>
            
        </member>
        <member name="E:Accord.Audio.IAudioOutput.FramePlayingStarted">
            <summary>
              Indicates a block of frames have started execution.
            </summary>
            
        </member>
        <member name="E:Accord.Audio.IAudioOutput.Stopped">
            <summary>
              Indicates all frames have been played and the audio finished.
            </summary>
            
        </member>
        <member name="E:Accord.Audio.IAudioOutput.NewFrameRequested">
            <summary>
              Indicates the audio output is requesting a new sample.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.IAudioOutput.IsRunning">
            <summary>
              Gets a value indicating whether this instance is playing audio.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="E:Accord.Audio.IAudioOutput.AudioOutputError">
            <summary>
              Audio output error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            audio output object, for example internal exceptions.</remarks>
            
        </member>
        <member name="T:Accord.Audio.Filters.HighPassFilter">
            <summary>
              High-pass band filter
            </summary>
        </member>
        <member name="M:Accord.Audio.Filters.HighPassFilter.#ctor(System.Single)">
            <summary>
              Constructs a new High-Pass filter using the given alpha.
            </summary>
            <param name="alpha">Band pass alpha.</param>
        </member>
        <member name="M:Accord.Audio.Filters.HighPassFilter.ProcessFilter(Accord.Audio.Signal,Accord.Audio.Signal)">
            <summary>
              Processes the filter.
            </summary>
        </member>
        <member name="P:Accord.Audio.Filters.HighPassFilter.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            <value>The format translations.</value>
            <remarks>
              The dictionary defines which sample formats are supported for
              source signals and which sample format will be used for resulting signal.
            </remarks>
        </member>
        <member name="P:Accord.Audio.Filters.HighPassFilter.Alpha">
            <summary>
              Gets or sets the high-pass alpha.
            </summary>
        </member>
        <member name="T:Accord.Audio.NewFrameRequestedEventArgs">
            <summary>
              Arguments for new frame request from an audio output device.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.NewFrameRequestedEventArgs.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.NewFrameRequestedEventArgs"/> class.
            </summary>
            
            <param name="frames">The number of samples being requested.</param>
            
        </member>
        <member name="M:Accord.Audio.NewFrameRequestedEventArgs.#ctor(System.Single[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.NewFrameRequestedEventArgs"/> class.
            </summary>
            
            <param name="buffer">The initial buffer.</param>
            
        </member>
        <member name="P:Accord.Audio.NewFrameRequestedEventArgs.Buffer">
            <summary>
              Gets or sets the buffer to be played in the audio source.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.NewFrameRequestedEventArgs.Stop">
            <summary>
              Gets or sets whether the playing should stop.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.NewFrameRequestedEventArgs.Frames">
            <summary>
              Gets the number of samples which should be placed in the buffer.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.NewFrameRequestedEventArgs.FrameIndex">
            <summary>
              Optional field to inform the player which
              is the current index of the frame being played.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Windows.Extensions">
            <summary>
              Extension methods.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.Extensions.ForwardFourierTransform(Accord.Audio.ComplexSignal[])">
            <summary>
              Applies forward fast Fourier transformation to a complex signal array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.Extensions.BackwardFourierTransform(Accord.Audio.ComplexSignal[])">
            <summary>
              Applies backward fast Fourier transformation to a complex signal array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.Extensions.ForwardHilbertTransform(Accord.Audio.ComplexSignal[])">
            <summary>
              Applies forward fast Hilbert transformation to a complex signal array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.Extensions.BackwardHilbertTransform(Accord.Audio.ComplexSignal[])">
            <summary>
              Applies backward fast Hilbert transformation to a complex signal array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.Extensions.Split(Accord.Audio.ComplexSignal,Accord.Audio.Windows.IWindow,System.Int32)">
            <summary>
              Splits a signal using a window
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.Extensions.Split(Accord.Audio.ComplexSignal,System.Int32,System.Int32)">
            <summary>
              Splits a signal using a window
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Generators.ISignalGenerator">
            <summary>
              Interface for Signal generators.
            </summary>
        </member>
        <member name="M:Accord.Audio.Generators.ISignalGenerator.Generate(System.Int32)">
            <summary>
              Generates a signal with the given number of samples.
            </summary>
            <param name="samples">The number of samples to generate.</param>
            <returns>The generated signal</returns>
        </member>
        <member name="P:Accord.Audio.Generators.ISignalGenerator.SamplingRate">
            <summary>
              Gets or sets the sampling rate used to create signals.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ISignalGenerator.Channels">
            <summary>
              Gets or sets the number of channels of the created signals.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ISignalGenerator.Format">
            <summary>
              Gets or sets the sample format for created signals.
            </summary>
        </member>
        <member name="T:Accord.Audio.ComplexSignalStatus">
            <summary>
              Complex signal status.
            </summary>
            
        </member>
        <member name="F:Accord.Audio.ComplexSignalStatus.Normal">
            <summary>
              Normal state.
            </summary>
        </member>
        <member name="F:Accord.Audio.ComplexSignalStatus.Analytic">
            <summary>
             Analytic form (Hilbert Transformed)
            </summary>
        </member>
        <member name="F:Accord.Audio.ComplexSignalStatus.FourierTransformed">
            <summary>
             Frequency form (Fourier transformed)
            </summary>
        </member>
        <member name="T:Accord.Audio.ComplexSignal">
            <summary>
              Complex audio signal.
              A complex discrete-time signal is any complex-valued function
              of the integers.
            </summary>
            
            <remarks>
             <para>
              The class is used to keep audio signals represented in complex
              numbers sutable for Fourier transformations.</para>
            
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Analytic_signal">
                  Wikipedia, The Free Encyclopedia. Analytics Signal. Available on:
                  http://en.wikipedia.org/wiki/Analytic_signal </a></description></item>
              </list></para>
            
            <para>Sample usage:</para>
            <code>
            // create complex audio signal
            ComplexSignal complexSignal = ComplexSignal.FromSignal( signal );
            // do forward Fourier transformation
            complexSignal.ForwardFourierTransform( );
            // generate spectogram
            complexSignal.ToBitmap(512,512);
            </code>
            </remarks>
            
        </member>
        <member name="T:Accord.Audio.Signal">
             <summary>
               Represents a PCM sound discrete signal (measured in time).
               A real discrete-time signal is defined as any real-valued 
               function of the integers.
             </summary>
             
             <remarks>
              <para>
              In signal processing, sampling is the reduction of a continuous
              signal to a discrete signal. A common example is the conversion
              of a sound wave (a continuous-time signal) to a sequence of samples
              (a discrete-time signal).</para>
              
              <para>
              A sample refers to a value or set of values at a point in time 
              and/or space.</para>
            
             </remarks>
             
        </member>
        <member name="M:Accord.Audio.Signal.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Accord.Audio.SampleFormat)">
            <summary>
              Constructs a new signal.
            </summary>
            <param name="data">The raw data for the signal.</param>
            <param name="channels">The number of channels for the signal.</param>
            <param name="length">The length of the signal.</param>
            <param name="format">The sample format for the signal.</param>
            <param name="sampleRate">The sample date of the signal.</param>
        </member>
        <member name="M:Accord.Audio.Signal.#ctor(System.Int32,System.Int32,System.Int32,Accord.Audio.SampleFormat)">
            <summary>
              Constructs a new Signal.
            </summary>
            <param name="channels">The number of channels for the signal.</param>
            <param name="length">The length of the signal.</param>
            <param name="format">The sample format for the signal.</param>
            <param name="sampleRate">The sample date of the signal.</param>
        </member>
        <member name="M:Accord.Audio.Signal.GetEnergy">
            <summary>
              Computes the signal energy.
            </summary>
        </member>
        <member name="M:Accord.Audio.Signal.GetSample(System.Int32,System.Int32)">
            <summary>
              Gets the value of the specified sample in the Signal.
            </summary>
            <param name="channel">The channel's index of the sample to set.</param>
            <param name="position">The position of the sample to set.</param>
            <returns>A floating-point value ranging from -1 to 1 representing
              the retrieved value. Conversion is performed automatically from
              the underlying signal sample format if supported.</returns>
        </member>
        <member name="M:Accord.Audio.Signal.SetSample(System.Int32,System.Int32,System.Single)">
            <summary>
              Sets the value of the specified sample in the Signal.
            </summary>
            <param name="channel">The channel's index of the sample to set.</param>
            <param name="position">The position of the sample to set.</param>
            <param name="value">A floating-point value ranging from -1 to 1
              specifying the value to set. Conversion will be done automatically
              to the underlying signal sample format if supported.</param>
        </member>
        <member name="M:Accord.Audio.Signal.FromArray(System.Array,System.Int32)">
            <summary>
              Creates a new Signal from a float array.
            </summary>
        </member>
        <member name="M:Accord.Audio.Signal.ToComplex">
            <summary>
              Converts this signal to a ComplexSignal object.
            </summary>
        </member>
        <member name="M:Accord.Audio.Signal.FromArray(System.Array,System.Int32,System.Int32)">
            <summary>
              Creates a new Signal from a float array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Signal.FromArray(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new Signal from a float array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Signal.CopyTo(System.Array)">
            <summary>
              Copies this signal to a given array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Signal.CopyTo(System.Single[])">
            <summary>
              Copies this signal to a given array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Signal.ToFloat">
            <summary>
              Converts this signal into a array of floating-point samples.
            </summary>
            
            <returns>An array of single-precision floating-point samples.</returns>
            
        </member>
        <member name="M:Accord.Audio.Signal.NumberOfSamples(System.Int32,System.Int32)">
            <summary>
              Gets the number of samples contained in a signal of given duration and sampling rate.
            </summary>
        </member>
        <member name="M:Accord.Audio.Signal.DurationOfSamples(System.Int32,System.Int32)">
            <summary>
              Gets the duration of each sample in a signal with the given number of samples and sampling rate.
            </summary>
        </member>
        <member name="M:Accord.Audio.Signal.GetSampleSize(Accord.Audio.SampleFormat)">
            <summary>
              Gets the size (in bytes) of a sample format.
            </summary>
        </member>
        <member name="M:Accord.Audio.Signal.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, 
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Signal.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations 
              before the <see cref="T:Accord.Audio.Signal"/> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Signal.Dispose(System.Boolean)">
             <summary>
               Releases unmanaged and - optionally - managed resources
             </summary>
             
             <param name="disposing"><c>true</c> to release both managed
             and unmanaged resources; <c>false</c> to release only unmanaged
             resources.</param>
            
        </member>
        <member name="P:Accord.Audio.Signal.SampleFormat">
            <summary>
              Gets the sample format used by this signal.
            </summary>
            
            <value>The signal's sample format.</value>
            
        </member>
        <member name="P:Accord.Audio.Signal.Duration">
            <summary>
              Gets the signal duration in milliseconds.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Signal.Length">
            <summary>
              Gets the number of samples in each channel of this signal,
              as known as the number of frames in the signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Signal.Samples">
            <summary>
              Gets the total number of samples in this signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Signal.SampleRate">
            <summary>
              Gets the number of samples per second for this signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Signal.Channels">
            <summary>
              Gets the number of channels of this signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Signal.RawData">
            <summary>
              Gets the raw binary data representing the signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Signal.Data">
            <summary>
              Gets a pointer to the first sample of the signal.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new Complex Signal
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,Accord.Audio.ComplexSignalStatus)">
            <summary>
              Constructs a new Complex Signal
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new Complex Signal
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.ToArray">
            <summary>
              Converts the complex signal to a float array.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.GetChannel(System.Int32)">
            <summary>
              Extracts a channel from the signal.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.SetChannel(System.Int32,AForge.Math.Complex[])">
            <summary>
              Copies an array of samples to a signal's channel.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.ForwardFourierTransform">
            <summary>
            Applies forward fast Fourier transformation to the complex signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexSignal.BackwardFourierTransform">
            <summary>
            Applies backward fast Fourier transformation to the complex signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexSignal.ForwardHilbertTransform">
            <summary>
              Applies forward hilbert transformation to the complex signal.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.BackwardHilbertTransform">
            <summary>
             Applies backward hilbert transformation to the complex signal.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexSignal.FromSignal(Accord.Audio.Signal)">
            <summary>
              Create multichannel complex signal from floating-point matrix.
            </summary>
            
            <param name="signal">Source multichannel float array (matrix).</param>
            
            <returns>Returns an instance of complex signal.</returns>
            
        </member>
        <member name="M:Accord.Audio.ComplexSignal.FromArray(System.Single[0:,0:],System.Int32)">
            <summary>
              Create multichannel complex signal from floating-point matrix.
            </summary>
            
            <param name="array">Source multichannel float array (matrix).</param>
            <param name="sampleRate">Sampling rate for the signal.</param>
            
            <returns>Returns an instance of complex signal.</returns>
            
        </member>
        <member name="M:Accord.Audio.ComplexSignal.FromArray(AForge.Math.Complex[0:,0:],System.Int32)">
            <summary>
              Create complex signal from complex array.
            </summary>
            
            <param name="signal">Source complex array.</param>
            <param name="sampleRate">Sample rate of the signal.</param>
            
            <returns>Returns an instance of complex signal.</returns>
            
        </member>
        <member name="M:Accord.Audio.ComplexSignal.FromArray(AForge.Math.Complex[0:,0:],System.Int32,Accord.Audio.ComplexSignalStatus)">
            <summary>
              Create complex signal from complex array.
            </summary>
            
            <param name="array">Source complex array.</param>
            <param name="sampleRate">Sample rate of the signal.</param>
            <param name="status">Status of the signal.</param>
            
            <returns>Returns an instance of complex signal.</returns>
            
        </member>
        <member name="M:Accord.Audio.ComplexSignal.Combine(Accord.Audio.ComplexSignal[])">
            <summary>
              Combines a set of windows into one full signal.
            </summary>
        </member>
        <member name="P:Accord.Audio.ComplexSignal.Status">
            <summary>
             Gets the status of the signal - Fourier transformed,
             Hilbert transformed (analytic) or real.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.AudioOutputErrorEventArgs">
             <summary>
               Arguments for audio source error event from audio source.
             </summary>
            
        </member>
        <member name="M:Accord.Audio.AudioOutputErrorEventArgs.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Audio.AudioSourceErrorEventArgs"/> class.
             </summary>
            
             <param name="description">Error description.</param>
            
        </member>
        <member name="F:Accord.Audio.AudioOutputErrorEventArgs.Empty">
            <summary>
              Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Accord.Audio.AudioOutputErrorEventArgs.Description">
             <summary>
               Audio source error description.
             </summary>
            
        </member>
        <member name="T:Accord.Audio.SampleFormat">
            <summary>
              Specifies the format of each sample in a signal.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format8BitUnsigned">
            <summary>
              Specifies the format is 8 bit, unsigned.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format8Bit">
            <summary>
              Specifies the format is 8 bit, signed.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format16Bit">
            <summary>
              Specifies the format is 16 bit, signed.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format32Bit">
            <summary>
              Specifies the format is 32 bit, signed.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format32BitIeeeFloat">
            <summary>
              Specifies the format is 32 bit, represented by
              single-precision IEEE floating-point numbers.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format64BitIeeeFloat">
            <summary>
              Specifies the format is 64 bit, represented by
              double-precision IEEE floating-point numbers.
            </summary>
        </member>
        <member name="F:Accord.Audio.SampleFormat.Format128BitComplex">
            <summary>
              Specifies the format is 128 bit, represented by
              complex numbers with real and imaginary parts as
              double-precision IEEE floating-point numbers.
            </summary>
        </member>
        <member name="T:Accord.Audio.InvalidSignalPropertiesException">
            <summary>
              Invalid signal properties exception.
            </summary>
            
            <remarks>
              <para>
              The invalid signal properties exception is thrown in the case when
              user provides a signal which do not have the properties expected by
              a particular signal processing routine.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Audio.InvalidSignalPropertiesException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.InvalidSignalPropertiesException"/> class.
            </summary>
        </member>
        <member name="M:Accord.Audio.InvalidSignalPropertiesException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.InvalidSignalPropertiesException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.Audio.InvalidSignalPropertiesException.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.InvalidSignalPropertiesException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="paramName">Name of the invalid parameter.</param>
            
        </member>
        <member name="M:Accord.Audio.InvalidSignalPropertiesException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.InvalidSignalPropertiesException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.Audio.InvalidSignalPropertiesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.InvalidSignalPropertiesException"/> class.
            </summary>
            
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            
        </member>
        <member name="T:Accord.Audio.UnsupportedSampleFormatException">
            <summary>
              Unsupported sample format exception.
            </summary>
            
            <remarks>
              <para>
              The unsupported sample format exception is thrown in the case when a signal
              is passed to a signal processing routine which is not prepared to handle its
              format.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Audio.UnsupportedSampleFormatException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.UnsupportedSampleFormatException"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.UnsupportedSampleFormatException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.UnsupportedSampleFormatException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.Audio.UnsupportedSampleFormatException.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.UnsupportedSampleFormatException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="paramName">Name of the invalid parameter.</param>
            
        </member>
        <member name="M:Accord.Audio.UnsupportedSampleFormatException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.UnsupportedSampleFormatException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.Audio.UnsupportedSampleFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Audio.UnsupportedSampleFormatException"/> class.
            </summary>
            
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            
        </member>
        <member name="T:Accord.Audio.PlayFrameEventArgs">
             <summary>
               Arguments for new block event from audio source.
             </summary>
            
        </member>
        <member name="M:Accord.Audio.PlayFrameEventArgs.#ctor(System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Accord.Audio.NewFrameEventArgs"/> class.
             </summary>
            
             <param name="frameIndex">New frame index.</param>
             <param name="count">The number of frames to play.</param>
            
        </member>
        <member name="F:Accord.Audio.PlayFrameEventArgs.Empty">
            <summary>
              Represents an event with no event data.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.PlayFrameEventArgs.FrameIndex">
             <summary>
               New block from audio source.
             </summary>
            
        </member>
        <member name="P:Accord.Audio.PlayFrameEventArgs.Count">
            <summary>
              Gets how many frames
              are going to be played.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Tools">
            <summary>
              Tool functions for audio processing.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.Interleave(System.Single[][])">
            <summary>
              Interleaves the channels into a single array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.Interleave(System.Single[0:,0:])">
            <summary>
              Interleaves the channels into a single array.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.GetMagnitudeSpectrum(AForge.Math.Complex[])">
            <summary>
              Computes the Magnitude spectrum of a complex signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.GetPowerSpectrum(AForge.Math.Complex[])">
            <summary>
              Computes the Power spectrum of a complex signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.GetPhaseSpectrum(AForge.Math.Complex[])">
            <summary>
              Computes the Phase spectrum of a complex signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.GetFrequencyVector(System.Int32,System.Int32)">
            <summary>
              Creates an evenly spaced frequency vector (assuming a symmetric FFT)
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.GetSpectralResolution(System.Int32,System.Int32)">
            <summary>
              Gets the spectral resolution for a signal of given sampling rate and number of samples.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.GetPowerCepstrum(AForge.Math.Complex[])">
            <summary>
              Gets the power Cepstrum for a complex signal.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Tools.RootMeanSquare(System.Single[])">
            <summary>
              Computes the Root-Mean-Square (RMS) value of the given samples.
            </summary>
            
            <param name="samples">The samples.</param>
            
            <returns>The root-mean-square value of the samples.</returns>
            
        </member>
        <member name="M:Accord.Audio.Tools.RootMeanSquare(System.Single[],System.Int32,System.Int32)">
            <summary>
              Computes the Root-Mean-Square (RMS) value of the given samples.
            </summary>
            
            <param name="samples">The samples.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of samples, starting at start index, to compute.</param>
            
            <returns>The root-mean-square value of the samples.</returns>
            
        </member>
        <member name="M:Accord.Audio.Tools.Max(System.Single[])">
            <summary>
              Computes the maximum value of the given samples.
            </summary>
            
            <param name="samples">The samples.</param>
            
            <returns>The maximum value of the samples</returns>
            
        </member>
        <member name="M:Accord.Audio.Tools.Max(System.Single[],System.Int32,System.Int32)">
            <summary>
              Computes the maximum value of the given samples.
            </summary>
            
            <param name="samples">The samples.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The number of samples, starting at start index, to compute.</param>
            
            <returns>The maximum value of the samples</returns>
            
        </member>
        <member name="M:Accord.Audio.Tools.ToByteArray``1(``0)">
            <summary>
             Serializes (converts) any object to a byte array.
            </summary>
            
            <param name="value">The object to be serialized.</param>
            <returns>The byte array containing the serialized object.</returns>
            
        </member>
        <member name="M:Accord.Audio.Tools.RawDeserialize``1(System.Byte[])">
            <summary>
              Deserializes (converts) a byte array to a given structure type.
            </summary>
            
            <remarks>
             This is a potentiality unsafe operation.
            </remarks>
            
            <param name="rawData">The byte array containing the serialized object.</param>
            <returns>The object stored in the byte array.</returns>
            
        </member>
        <member name="M:Accord.Audio.Tools.RawDeserialize``1(System.Byte[],System.Int32)">
            <summary>
              Deserializes (converts) a byte array to a given structure type.
            </summary>
            
            <remarks>
             This is a potentiality unsafe operation.
            </remarks>
            
            <param name="rawData">The byte array containing the serialized object.</param>
            <param name="position">The starting position in the rawData array where the object is located.</param>
            <returns>The object stored in the byte array.</returns>
            
        </member>
        <member name="T:Accord.Audio.Windows.WindowBase">
            <summary>
              Base abstract class for signal windows.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Windows.IWindow">
            <summary>
              Spectral Window
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.IWindow.Apply(Accord.Audio.Signal,System.Int32)">
            <summary>
              Splits a signal using the current window.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.IWindow.Apply(Accord.Audio.ComplexSignal,System.Int32)">
            <summary>
              Splits a complex signal using the current window.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Windows.IWindow.Length">
            <summary>
              Gets the Window's length
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Windows.IWindow.Duration">
            <summary>
              Gets the Window's duration
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.WindowBase.#ctor(System.Double,System.Int32)">
            <summary>
              Constructs a new Window.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.WindowBase.#ctor(System.Int32)">
            <summary>
              Constructs a new Window.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.WindowBase.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new Window.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.WindowBase.Apply(Accord.Audio.Signal,System.Int32)">
            <summary>
              Splits a signal using the window.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.WindowBase.Apply(Accord.Audio.ComplexSignal,System.Int32)">
            <summary>
              Splits a signal using the window.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Windows.WindowBase.Length">
            <summary>
              Gets the window length.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Windows.WindowBase.Duration">
            <summary>
              Gets the Window duration.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Windows.WindowBase.Item(System.Int32)">
            <summary>
              Gets or sets values for the Window function.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Windows.RaisedCosineWindow">
            <summary>
              Raised Cosine Window.
            </summary>
            
            <remarks>
            <para>
              The "raised cosine" window is a family of temporal windows, from which
              the most known representative members are the Hann and Hamming windows.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Window_function">
                  Wikipedia, The Free Encyclopedia. Window function. Available on:
                  http://en.wikipedia.org/wiki/Window_function </a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
              Constructs a new Raised Cosine Window
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.#ctor(System.Double,System.Int32)">
            <summary>
              Constructs a new Raised Cosine Window
            </summary>
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
              Constructs a new Raised Cosine Window
            </summary>
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.Hamming(System.Int32)">
            <summary>
              Creates a new Hamming Window.
            </summary>
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.Hann(System.Int32)">
            <summary>
              Creates a new Hann Window.
            </summary>
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.Hann(System.Double,System.Int32)">
            <summary>
              Creates a new Hann Window.
            </summary>
        </member>
        <member name="M:Accord.Audio.Windows.RaisedCosineWindow.Rectangular(System.Int32)">
            <summary>
              Creates a new Rectangular Window.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Accord.Audio.Generators.SquareGenerator">
            <summary>
              Square Signal Generator
            </summary>
        </member>
        <member name="M:Accord.Audio.Generators.SquareGenerator.#ctor">
            <summary>
              Creates a new Square Signal Generator.
            </summary>
        </member>
        <member name="M:Accord.Audio.Generators.SquareGenerator.Generate(System.Int32)">
            <summary>
              Generates a signal.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.SquareGenerator.Frequency">
            <summary>
              Gets or sets the Frequency of the squared signal.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.SquareGenerator.Amplitude">
            <summary>
              Gets or sets the Amplitude of the squared signal.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.SquareGenerator.SamplingRate">
            <summary>
              Gets or sets the Sampling Rate of the generated signals.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.SquareGenerator.Channels">
            <summary>
              Gets or sets the number of channels for the generated signals.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.SquareGenerator.Format">
            <summary>
              Gets or sets the sample format for created signals.
            </summary>
        </member>
        <member name="T:Accord.Audio.AudioSourceErrorEventArgs">
             <summary>
               Arguments for audio source error event from audio source.
             </summary>
            
        </member>
        <member name="M:Accord.Audio.AudioSourceErrorEventArgs.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Audio.AudioSourceErrorEventArgs"/> class.
             </summary>
            
             <param name="description">Error description.</param>
            
        </member>
        <member name="F:Accord.Audio.AudioSourceErrorEventArgs.Empty">
            <summary>
              Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Accord.Audio.AudioSourceErrorEventArgs.Description">
             <summary>
               Audio source error description.
             </summary>
            
        </member>
        <member name="T:Accord.Audio.NewFrameEventArgs">
             <summary>
               Arguments for new block event from audio source.
             </summary>
            
        </member>
        <member name="M:Accord.Audio.NewFrameEventArgs.#ctor(Accord.Audio.Signal)">
             <summary>
             Initializes a new instance of the <see cref="T:Accord.Audio.NewFrameEventArgs"/> class.
             </summary>
            
             <param name="signal">New signal frame.</param>
            
        </member>
        <member name="P:Accord.Audio.NewFrameEventArgs.Signal">
             <summary>
               New Frame from audio source.
             </summary>
            
        </member>
        <member name="T:Accord.Audio.Generators.CosineGenerator">
            <summary>
              Cosine signal generator.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Generators.CosineGenerator.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
              Constructs a new Cosine Signal Generator.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Generators.CosineGenerator.Generate(System.Int32)">
            <summary>
              Generates a signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Generators.CosineGenerator.Frequency">
            <summary>
              Gets or sets the Frequency of the cosine signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Generators.CosineGenerator.Amplitude">
            <summary>
              Gets or sets the Amplitude of the cosine signal.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Generators.CosineGenerator.SamplingRate">
            <summary>
              Gets or sets the Sampling Rate of the generated signals.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Generators.CosineGenerator.Channels">
            <summary>
              Gets or sets the number of channels for the generated signals.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Generators.CosineGenerator.Format">
            <summary>
              Gets or sets the sample format for created signals.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Generators.ImpulseGenerator">
            <summary>
              Impulse train signal generator.
            </summary>
        </member>
        <member name="M:Accord.Audio.Generators.ImpulseGenerator.#ctor">
            <summary>
              Creates a new Impulse Signal Generator.
            </summary>
        </member>
        <member name="M:Accord.Audio.Generators.ImpulseGenerator.#ctor(System.Int32,System.Int32,System.Int32,Accord.Audio.SampleFormat)">
            <summary>
              Creates a new Impulse Signal Generator.
            </summary>
        </member>
        <member name="M:Accord.Audio.Generators.ImpulseGenerator.Generate(System.Int32)">
            <summary>
              Generates the given number of samples.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ImpulseGenerator.Channels">
            <summary>
              Gets or sets the number of channels to generate.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ImpulseGenerator.SamplingRate">
            <summary>
              Gets or sets the sampling rate of channels to generate.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ImpulseGenerator.Pulses">
            <summary>
              Gets or sets the number of pulses to generate in the signal.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ImpulseGenerator.Format">
            <summary>
              Gets or sets the sample format for created signals.
            </summary>
        </member>
        <member name="P:Accord.Audio.Generators.ImpulseGenerator.BeatsPerMinute">
            <summary>
              Gets or sets the beats per minute for the pulses.
            </summary>
        </member>
        <member name="T:Accord.Audio.Filters.LowPassFilter">
            <summary>
              Low band pass filter.
            </summary>
        </member>
        <member name="M:Accord.Audio.Filters.LowPassFilter.#ctor(System.Single)">
            <summary>
              Constructs a new Low-Pass Filter using the given alpha.
            </summary>
            <param name="alpha">Band pass alpha.</param>
        </member>
        <member name="M:Accord.Audio.Filters.LowPassFilter.ProcessFilter(Accord.Audio.Signal,Accord.Audio.Signal)">
            <summary>
              Processes the filter.
            </summary>
        </member>
        <member name="P:Accord.Audio.Filters.LowPassFilter.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            <value>The format translations.</value>
            <remarks>
              The dictionary defines which sample formats are supported for
              source signals and which sample format will be used for resulting signal.
            </remarks>
        </member>
        <member name="P:Accord.Audio.Filters.LowPassFilter.Alpha">
            <summary>
              Gets or sets the low-pass alpha.
            </summary>
        </member>
        <member name="T:Accord.Audio.ComplexFilters.EnvelopeFilter">
            <summary>
              Hilbert transform based envelope detector.
            </summary>
            
            <remarks>
             <para>
              This method works by creating the analytic signal of the input by
              using a Hilbert transform. An analytic signal is a complex signal,
              where the real part is the original signal and the imaginary part
              is the Hilbert transform of the original signal.</para>
             <para>
              The complex envelope of a signal can be found by taking the absolute
              (magnitude) value of the analytic signal.</para>
             <para>
               References: http://en.wikipedia.org/wiki/Hilbert_transform
             </para>
            </remarks>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.EnvelopeFilter.#ctor">
            <summary>
              Constructs a new Envelope filter.
            </summary>
        </member>
        <member name="M:Accord.Audio.ComplexFilters.EnvelopeFilter.ProcessFilter(Accord.Audio.ComplexSignal,Accord.Audio.ComplexSignal)">
            <summary>
              Processes the filter.
            </summary>
        </member>
        <member name="T:Accord.Audio.ComplexFilters.IComplexFilterBank">
            <summary>
              Filter banks segregates signals into different parts to be further processed.
              The most common filter bank is the band-pass filter bank.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.IComplexFilterBank.Apply(Accord.Audio.ComplexSignal)">
            <summary>
              Apply filter to complex signal.
            </summary>
            
            <param name="complexSignal">Complex signal to apply filter to.</param>
        </member>
        <member name="M:Accord.Audio.ComplexFilters.IComplexFilterBank.Apply(Accord.Audio.ComplexSignal[])">
            <summary>
              Apply filter to a windowed complex signal.
            </summary>
            
            <param name="complexSignal">Windowed complex signal to apply filter to.</param>
        </member>
        <member name="P:Accord.Audio.ComplexFilters.IComplexFilterBank.Length">
            <summary>
              Number of filters in the bank.
            </summary>
        </member>
        <member name="T:Accord.Audio.Windows.BlackmanWindow">
            <summary>
              Blackman window.
            </summary>
            
            <remarks>
              By common convention, the unqualified term Blackman window refers to α=0.16.
            </remarks>
            
        </member>
        <member name="M:Accord.Audio.Windows.BlackmanWindow.#ctor(System.Int32)">
            <summary>
              Constructs a new Blackman window.
            </summary>
            
            <param name="length">The length for the window.</param>
            
        </member>
        <member name="M:Accord.Audio.Windows.BlackmanWindow.#ctor(System.Double,System.Int32)">
            <summary>
              Constructs a new Blackman window.
            </summary>
            
            <param name="alpha">Blackman's alpha</param>
            <param name="length">The length for the window.</param>
            
        </member>
        <member name="T:Accord.Audio.SampleConverter">
            <summary>
              Static methods to convert between different sample formats.
            </summary>
            
            <remarks>
            <para>
              Code is mainly based on information available on the original
              C source code pa_converters.c from Portable Audio I/O Library.</para>
            <para>
              This class try to be as fast as possible without using unsafe code.</para>
              
            <para>
              Dither isn't currently supported. Currently supported conversions
              are 'to' and 'from' conversions between the following most common
              PCM format:</para>
            <para>
              <list type="bullet">
                <item><description>Integer 8-bit (byte)</description></item>
                <item><description>Integer 16-bit (Int16)</description></item>
                <item><description>Integer 32-bit (Int32)</description></item>
                <item><description>Single precision 32-bit floating point (float)</description></item>
              </list></para>
            </remarks>
            
            <example>
              To use it, just call Convert. The compiler will automatically detect
              which method to call based on your data types.
              
              <code>
              int[]   srcPcm16samples = new int[] { 1, 2, 3};
              float[] destIeeeFloat32samples = new float[3];
            
              SampleConverter.Convert(srcPcm16samples, destIeeeFloat32samples);
            
              // destIeeeFloat32samples now contains the converted samples.
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte[][],System.Int16[][])">
            <summary>
              Converts a array of signed 8-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte[],System.Int16[])">
            <summary>
              Converts a array of signed 8-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte,System.Int16@)">
            <summary>
              Converts a signed 8-bit int sample
              into a 32-bit float-point sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte[][],System.Int32[][])">
            <summary>
              Converts a matrix of unsigned 8-bit int samples
              into a matrix of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte[],System.Int32[])">
            <summary>
              Converts a array of unsigned 8-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte,System.Int32@)">
            <summary>
              Converts a unsigned 8-bit int sample
              into a 32-bit float-point sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte[][],System.Single[][])">
            <summary>
              Converts a matrix of unsigned 8-bit int samples
              into a matrix of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte[],System.Single[])">
            <summary>
              Converts a array of unsigned 8-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Byte,System.Single@)">
            <summary>
              Converts a unsigned 8-bit int sample
              into a 32-bit float-point sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16[][],System.Byte[][])">
            <summary>
              Converts a matrix of signed 16-bit int samples
              into a matrix of 8-bit unsigned byte samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16[],System.Byte[])">
            <summary>
              Converts a array of signed 16-bit int samples
              into a array of 8-bit unsigned byte samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16,System.Byte@)">
            <summary>
              Converts a signed 16-bit int sample
              into a 8-bit unsigned byte sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16[][],System.Int32[][])">
            <summary>
              Converts a matrix of signed 16-bit int samples
              into a matrix of 32-bit signed integer samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16[],System.Int32[])">
            <summary>
              Converts a array of signed 16-bit int samples
              into a array of 32-bit signed integer samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16,System.Int32@)">
            <summary>
              Converts a signed 16-bit int sample
              into a 32-bit signed integer sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16[][],System.Single[][])">
            <summary>
              Converts a matrix of signed 16-bit int samples
              into a matrix of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16[],System.Single[])">
            <summary>
              Converts a array of signed 16-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int16,System.Single@)">
            <summary>
              Converts a signed 16-bit int sample
              into a 32-bit float-point sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[][],System.Byte[][])">
            <summary>
              Converts a matrix of signed 32-bit int samples
              into a matrix of 8-bit unsigned byte samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[],System.Byte[])">
            <summary>
              Converts a array of signed 32-bit int samples
              into a array of 8-bit unsigned byte samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32,System.Byte@)">
            <summary>
              Converts a signed 32-bit int sample
              into a 8-bit unsigned byte sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[][],System.Int16[][])">
            <summary>
              Converts a matrix of signed 32-bit int samples
              into a matrix of 16-bit signed integer samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[],System.Int16[])">
            <summary>
              Converts a array of signed 32-bit int samples
              into a array of 16-bit signed integer samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32,System.Int16@)">
            <summary>
              Converts a signed 32-bit int sample
              into a 16-bit signed integer sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[][],System.Single[][])">
            <summary>
              Converts a matrix of signed 32-bit int samples
              into a matrix of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[],System.Single[])">
            <summary>
              Converts a array of signed 32-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32,System.Single@)">
            <summary>
              Converts a signed 32-bit int sample
              into a 32-bit float-point sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single[][],System.Byte[][])">
            <summary>
              Converts a matrix of signed 32-bit float samples
              into a matrix of 8-bit unsigned byte samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single[],System.Byte[])">
            <summary>
              Converts a array of signed 32-bit float samples
              into a array of 8-bit unsigned byte samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single,System.Byte@)">
            <summary>
              Converts a signed 32-bit float sample
              into a 8-bit unsigned byte sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single[][],System.Int16[][])">
            <summary>
              Converts a matrix of 32-bit float samples
              into a matrix of 16-bit integer samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single[],System.Int16[])">
            <summary>
              Converts a array of 32-bit float samples
              into a array of 16-bit integer samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single,System.Int16@)">
            <summary>
              Converts a 32-bit float sample
              into a 16-bit integer sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Single[][],System.Int32[][])">
            <summary>
              Converts a matrix of signed 32-bit int samples
              into a matrix of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32[],System.Int32[])">
            <summary>
              Converts a array of signed 32-bit int samples
              into a array of 32-bit float-point samples.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="M:Accord.Audio.SampleConverter.Convert(System.Int32,System.Int32@)">
            <summary>
              Converts a signed 32-bit int sample
              into a 32-bit float-point sample.
            </summary>
            <param name="from">The original sample.</param>
            <param name="to">The resulting sample.</param>
        </member>
        <member name="T:Accord.Audio.ComplexFilters.DifferentialRectificationFilter">
            <summary>
              Differential Rectification filter.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.DifferentialRectificationFilter.#ctor">
            <summary>
              Constructs a new Differential Rectification filter.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.ComplexFilters.DifferentialRectificationFilter.ProcessFilter(Accord.Audio.ComplexSignal,Accord.Audio.ComplexSignal)">
            <summary>
              Processes the filter.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Metronome">
            <summary>
              Metronome.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Metronome.#ctor">
            <summary>
              Constructs a new Metronome.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Metronome.Tap">
            <summary>
              Taps the metronome (for tempo detection)
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Metronome.Start">
            <summary>
              Starts the metronome.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Metronome.Stop">
            <summary>
              Stops the metronome.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Metronome.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Metronome.BeatsPerMinute">
            <summary>
              Gets or sets the Beats per Minute for this metronome.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Metronome.Detecting">
            <summary>
              Gets whether the metronome is currently detecting the tempo being tapped.
            </summary>
            
        </member>
        <member name="E:Accord.Audio.Metronome.TempoDetected">
            <summary>
              Fired when the metronome has figured the tapped tempo.
            </summary>
            
        </member>
        <member name="E:Accord.Audio.Metronome.Tick">
            <summary>
              Metronome tick.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.Metronome.SynchronizingObject">
            <summary>
              Synchronizing object for thread safety.
            </summary>
            
        </member>
        <member name="T:Accord.Audio.Filters.WaveRectifier">
            <summary>
              Wave Rectifier filter.
            </summary>
            
        </member>
        <member name="M:Accord.Audio.Filters.WaveRectifier.#ctor(System.Boolean)">
            <summary>
              Constructs a new Wave rectifier.
            </summary>
        </member>
        <member name="M:Accord.Audio.Filters.WaveRectifier.ProcessFilter(Accord.Audio.Signal,Accord.Audio.Signal)">
            <summary>
              Applies the filter to a signal.
            </summary>
        </member>
        <member name="P:Accord.Audio.Filters.WaveRectifier.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            <value>The format translations.</value>
            <remarks>
              The dictionary defines which sample formats are supported for
              source signals and which sample format will be used for resulting signal.
            </remarks>
        </member>
        <member name="P:Accord.Audio.Filters.WaveRectifier.Half">
            <summary>
              Gets or sets whether half rectification should be performed.
            </summary>
        </member>
        <member name="T:Accord.Audio.IAudioSource">
            <summary>
              Audio source interface.
            </summary>
            
            <remarks>The interface describes common methods for different type of audio sources.</remarks>
            
        </member>
        <member name="M:Accord.Audio.IAudioSource.Seek(System.Int32)">
            <summary>
              Seeks a frame.
            </summary>
            
            <remarks>
              This method may throw an NotSupportedException if the source
              does not allow repositioning.
            </remarks>
            
        </member>
        <member name="M:Accord.Audio.IAudioSource.Start">
            <summary>
              Start audio source.
            </summary>
            
            <remarks>Starts audio source and return execution to caller. Audio source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:Accord.Audio.IAudioSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:Accord.Audio.IAudioSource.SignalToStop">
            <summary>
              Signals audio source to stop its work.
            </summary>
            
            <remarks>Signals audio source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:Accord.Audio.IAudioSource.WaitForStop">
            <summary>
              Wait until audio source has stopped.
            </summary>
            
            <remarks>Waits for audio source stopping after it was signalled to stop using
            <see cref="M:Accord.Audio.IAudioSource.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:Accord.Audio.IAudioSource.Stop">
            <summary>
              Stop audio source.
            </summary>
            
            <remarks>Stops audio source aborting its thread.</remarks>
            
        </member>
        <member name="E:Accord.Audio.IAudioSource.NewFrame">
            <summary>
              New frame block event.
            </summary>
            
            <remarks><para>This event is used to notify clients about new available audio frame.</para>
            
            <para><note>Since audio source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed audio frame, but audio source is responsible for
            disposing its own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:Accord.Audio.IAudioSource.AudioSourceError">
            <summary>
              Audio source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            audio source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.Source">
            <summary>
              Audio source.
            </summary>
            
            <remarks>The meaning of the property depends on particular audio source.
            Depending on audio source it may be a file name, driver guid, URL or any
            other string describing the audio source.</remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.DesiredFrameSize">
            <summary>
              Amount of samples to be read on each frame.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.SampleRate">
            <summary>
              Gets or sets the sample rate for the source.
            </summary>
            
            <remarks>
              Changing this property may throw an NotSupportedException if
              the underlying source does not allow resampling.
            </remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.CanSeek">
            <summary>
              Gets a boolean value indicating if the source allows repositioning.
            </summary>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.FramesReceived">
            <summary>
              Received frames count.
            </summary>
            
            <remarks>Number of frames the audio source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.BytesReceived">
            <summary>
              Received bytes count.
            </summary>
            
            <remarks>Number of bytes the audio source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.UserData">
            <summary>
              User data.
            </summary>
            
            <remarks>The property allows to associate user data with audio source object.</remarks>
            
        </member>
        <member name="P:Accord.Audio.IAudioSource.IsRunning">
            <summary>
            State of the audio source.
            </summary>
            
            <remarks>Current state of audio source object - running or not.</remarks>
            
        </member>
    </members>
</doc>
