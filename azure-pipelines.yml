name: $(Date:yyyyMMdd)$(Rev:.r)

schedules:
  # at midnight every monday (UTC)
  - cron: 0 0 * * 0
    displayName: Weekly Release
    branches:
      include:
        - master


variables:
  build: '$(Build.BuildID)'
  system.debug: true
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  CI: true

# Run on all commits,  except for some folders
trigger:
  batch: true
  branches:
    include:
      - '*'
    exclude:
      - refs/tags/*
  paths:
    exclude:
    - docs/*
    - scripts/*
    - '**/*.md'

stages:
  - stage: build
    jobs:
      - template: build/azure-pipelines-build.yml
  - stage: release
    jobs:
      # this is really all quite ridiculous, but $(Build.SourceVersionMessage)
      # is not defined until the step stage so, and only if source is checked out *sigh*
      - job: checkRelease
        displayName: Check if a release is needed
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: none
          - pwsh: |
              $commit = Invoke-RestMethod -Method Get -Uri "https://api.github.com/repos/$(Build.Repository.Name)/commits/$(Build.SourceVersion)" -Headers @{Authorization="token ${env:AUDIO_ANALYSIS_CI}"}
              $commit_message = $commit.commit.message
              Write-Output "Analyzing commit message for [release] tag:`n$commit_message"
              $is_manual_release = $commit_message -ilike '*`[release`]*'
              $ci_do_release = $env:CI_DO_RELEASE
              Write-Output "CI_DO_RELEASE: $ci_do_release"
              $is_variable_release = $ci_do_release.Length -gt 0
              $is_weekly_release = '$(Build.Reason)' -ieq 'Schedule'
              $should_release = $is_weekly_release -or $is_manual_release -or $is_variable_release
              Write-Output "##vso[task.setvariable variable=isManualRelease;isOutput=true]$is_manual_release"
              Write-Output "##vso[task.setvariable variable=isWeeklyRelease;isOutput=true]$is_weekly_release"
              Write-Output "##vso[task.setvariable variable=isVariableRelease;isOutput=true]$is_variable_release"
              Write-Output "##vso[task.setvariable variable=shouldRelease;isOutput=true]$should_release"
            name: calculateVariables
            displayName: Get commit message and calculate release variables
            env:
              AUDIO_ANALYSIS_CI: $(AUDIO_ANALYSIS_CI)
              CI_DO_RELEASE: $[CI_DO_RELEASE]
      - job: doRelease
        dependsOn: checkRelease
        displayName: Release
        condition: eq(dependencies.checkRelease.outputs['calculateVariables.shouldRelease'], 'true')
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            clean: true
            fetchDepth: 200
            lfs: false
            persistCredentials: true
            displayName: "Shallow cloning repo"
          
          # downloads to $(System.ArtifactsDirectory)
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              downloadType: all
              # avoid downloading cod coverage report
              itemPattern: '**/*.+(xz|zip|txt)'
            displayName: Download previous build artifacts

          # every build produced version vars, just pick the one from any
          - pwsh: |
              Get-ChildItem -recurse $(System.ArtifactsDirectory)
              Get-Content $(System.ArtifactsDirectory)/any/AP_version_vars.txt | Write-Output
            displayName: Reconstitute variables

          - pwsh: |
              git checkout $env:BUILD_SOURCEBRANCHNAME
              ./build/release_notes.ps1 v${env:AP_VERSION} '$(System.ArtifactsDirectory)/release_notes.txt' -update_changelog
              Get-ChildItem env:
              git config --global user.email "ecoacoustics@qut.edu.au"
              git config --global user.name "QUT Ecoacoustics"
              git add CHANGELOG.md
              git commit -m "Update changelog for v${env:AP_VERSION}" -m "[skip ci]"
              git tag -a -m "Version ${env:AP_VERSION}" "v${env:AP_VERSION}" 
              git push --follow-tags
            displayName: Generate release notes, commit changelog, and tag

          - task: GitHubRelease@0
            inputs:
              # managed here https://dev.azure.com/QutEcoacoustics/audio-analysis/_settings/adminservices
              gitHubConnection: github.com_atruskie
              action: create
              tagSource: auto
              tag: v$(AP_Version)
              title: $(AP_ReleaseTitle)
              releaseNotesSource: file
              releaseNotesFile: '$(System.ArtifactsDirectory)/release_notes.txt'
              assets: |
                $(Build.ArtifactsDirectory)/**/*.zip
                $(Build.ArtifactsDirectory)/**/*.tar.xz
              isDraft: true
              isPreRelease: true
