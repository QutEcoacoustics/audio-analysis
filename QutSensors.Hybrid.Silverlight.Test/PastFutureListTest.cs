// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PastFutureListTest.cs" company="MQUTeR">
//   -
// </copyright>
// <summary>
//   This is a test class for PastFutureListTest and is intended
//   to contain all PastFutureListTest Unit Tests
// </summary>
// --------------------------------------------------------------------------------------------------------------------
//<auto-generated/>

using PastFutureList;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
namespace PastFutureList.Test
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;

    /// <summary>
    ///This is a test class for PastFutureListTest and is intended
    ///to contain all PastFutureListTest Unit Tests
    ///</summary>
    [TestClass()]
    public class PastFutureListTest
    {
        private int _defaultTotal = 4;

        private IEnumerable<MyClass> _defaultItems =
            (new string[] { "hi", "bye", "fly", "guy" }).Select((s) => new MyClass() { Str = s });
        
        private int _defaultLagging = 1;

        private TestContext testContextInstance;

        private PastFutureList<MyClass> _defaultObject;

        private class MyClass
        {
            public string Str { get; set; }
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            _defaultObject = new PastFutureList<MyClass>(_defaultTotal, _defaultLagging);
            _defaultObject.ValidatorFunction = (s) => s.Str.ToLower() == s.Str;
            _defaultObject.InvalidateAction = (s) =>
                {
                    s.Str =s.Str.ToUpper();
                    return s;
                };
            _defaultObject.Hungry += (s, e) => { };
        }

        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        public void MyTestCleanup()
        {
            _defaultObject = null;
        }

        #endregion

        #region constructor
        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(_defaultTotal, 5);
        }

        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest1()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(-1, -1);
        }

        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest2()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(_defaultTotal, -1);
        }

        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest3()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(0, _defaultLagging);
        }

        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest4()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(1 , 1);
        }

        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest5()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(_defaultTotal, 5);
        }

        /// <summary>
        ///A test for PastFutureList Constructor
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListConstructorTest7()
        {
            PastFutureList<MyClass> target = new PastFutureList<MyClass>(0, 0);
        }


        #endregion

        #region create

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod1()
        {
            var t = _defaultObject.IsAllValid;
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod2()
        {
            var t = _defaultObject.Current;
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod3()
        {
            var t = _defaultObject.IsCurrentValid;
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod4()
        {
            _defaultObject.Next();
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod5()
        {
            _defaultObject.Previous();
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod6()
        {
            var t = _defaultObject.GetEnumerator();
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod7()
        {
            foreach (MyClass o in _defaultObject)
            {
                // do something
            }
        }


        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void PastFutureListCreateMethod8()
        {
            _defaultObject.Create(_defaultItems);
            _defaultObject.Create(_defaultItems);
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentNullException))]
        public void PastFutureListCreateMethod9()
        {
            _defaultObject.Create(null);
        }

        /// <summary>
        ///A test for PastFutureList create method
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentException))]
        public void PastFutureListCreateMethod10()
        {
            _defaultObject.Create(new MyClass[] { new MyClass() { Str = "Hi" }, new MyClass() { Str = "Hi" }, new MyClass() { Str = "Hi" } })
            ;
        }

        #endregion

        #region current

        /// <summary>
        ///A test for PastFutureList current property
        ///</summary>
        [TestMethod()]
        public void CurrentProperty()
        {
            _defaultObject.Create(_defaultItems);
            Assert.AreEqual(_defaultObject.Current.Str, "bye");
            _defaultObject.Next();
            Assert.AreEqual(_defaultObject.Current.Str, "fly");
            _defaultObject.Previous();
            Assert.AreEqual(_defaultObject.Current.Str, "bye");
            _defaultObject.Previous();
            Assert.AreEqual(_defaultObject.IsCurrentValid, false);
            
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidElementException))]
        public void CurrentPropertyInvalidates()
        {
            _defaultObject.Create(_defaultItems);
            _defaultObject.Previous();
            _defaultObject.Previous();

            Assert.IsTrue(! _defaultObject.IsCurrentValid);
            var badOperation = _defaultObject.Current;
        }

        [TestMethod()]
        public void CurrentPropertyInvalidates1()
        {
            _defaultObject.Create(_defaultItems);
            Assert.IsTrue(_defaultObject.IsAllValid);
            _defaultObject.Previous();
            Assert.IsTrue(!_defaultObject.IsAllValid); // one invalidated tail element
            _defaultObject.Previous();

            Assert.IsTrue(! _defaultObject.IsCurrentValid);
            Assert.IsTrue(! _defaultObject.IsAllValid);
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidElementException))]
        public void CurrentPropertyInvalidates3()
        {
            _defaultObject.Create(_defaultItems);
            _defaultObject.Next();
            _defaultObject.Next();
            _defaultObject.Next();

            var badOperation = _defaultObject.Current;
        }

        [TestMethod()]
        public void CurrentPropertyInvalidates4()
        {
            _defaultObject.Create(_defaultItems);
            Assert.IsTrue(_defaultObject.IsAllValid);

            _defaultObject.Next();
            Assert.IsTrue(!_defaultObject.IsAllValid); // one invalidated head element
            _defaultObject.Next();
            Assert.IsTrue(!_defaultObject.IsAllValid); // two invalidated head elements
            _defaultObject.Next();

            Assert.IsTrue(!_defaultObject.IsCurrentValid);
            Assert.IsTrue(!_defaultObject.IsAllValid);
        }
        #endregion

        #region nxt prev

        [TestMethod()]
        public void NextWraps()
        {
            _defaultObject.Create(_defaultItems);
            var pvte = PastFutureList_Accessor<MyClass>.AttachShadow(_defaultObject);
            pvte._currentIndex = 1;
            pvte.Next();
            pvte.Next();
            pvte.Next();
            pvte.Next();
            pvte.Next();
            pvte.Next();
            pvte.Next();

            Assert.AreEqual(0, pvte._currentIndex);
            Assert.AreEqual(3, pvte.Tail);
            Assert.AreEqual(2, pvte.Head);
        }

        [TestMethod()]
        public void PrevWraps()
        {
            _defaultObject.Create(_defaultItems);
            var pvte = PastFutureList_Accessor<MyClass>.AttachShadow(_defaultObject);
            pvte._currentIndex = 1;
            pvte.Previous();
            pvte.Previous();
            pvte.Previous();
            pvte.Previous();
            pvte.Previous();
            pvte.Previous();
            pvte.Previous();

            Assert.AreEqual(2, pvte._currentIndex);
            Assert.AreEqual(1, pvte.Tail);
            Assert.AreEqual(0, pvte.Head);
        }

        #endregion

        #region hungry


        [TestMethod()]
        public void HungryBasic()
        {
            _defaultObject.Create(_defaultItems);
            _defaultObject.Hungry += (s, e) =>
                {
                    var item = ((PastFutureList<MyClass>)s);
                    Assert.IsTrue(!item.IsAllValid);
                    Assert.AreEqual(Tense.Future, e.Tense);
                    item[e.PflInternalIndex].Str = item[e.PflInternalIndex].Str.ToLower();
                    Assert.IsTrue(item.IsAllValid);
                };

            var pvte = PastFutureList_Accessor<MyClass>.AttachShadow(_defaultObject);
            Assert.IsTrue(pvte.IsAllValid);

            pvte.Next();
        }

        [TestMethod()]
        public void HungryOnCreate()
        {
            int numTimesHungry = 0;
            int totalSkipNum = 0;
            int[] indexTest = new[] {0,0,0,0};

            PastFutureList<MyClass> tst = new PastFutureList<MyClass>(_defaultTotal, _defaultLagging);
            tst.ValidatorFunction = (s) => s.Str.ToLower() == s.Str;
            tst.InvalidateAction = (s) =>
            {
                s.Str = s.Str.ToUpper();
                return s;
            }; 

            tst.Hungry += (s, e) =>
                {
                    indexTest[numTimesHungry] = e.PflInternalIndex;
                    numTimesHungry++;
                    totalSkipNum += e.Skip;
                    Debug.WriteLine("Skip num:" + e.Skip);
                };
            tst.Create(_defaultItems);

            Assert.AreEqual(4, numTimesHungry);
            Assert.AreEqual(1, totalSkipNum);
            Assert.IsTrue((new[] { 0, 1, 2, 3 }).SequenceEqual(indexTest));

            //var pvte = PastFutureList_Accessor<MyClass>.AttachShadow(_defaultObject);

        }


        #endregion
    }
}
